// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: BidResponse.proto

#ifndef PROTOBUF_BidResponse_2eproto__INCLUDED
#define PROTOBUF_BidResponse_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_BidResponse_2eproto();
void protobuf_AssignDesc_BidResponse_2eproto();
void protobuf_ShutdownFile_BidResponse_2eproto();

class BidResponse;
class SeatBid;
class Bid;

// ===================================================================

class BidResponse : public ::google::protobuf::Message {
 public:
  BidResponse();
  virtual ~BidResponse();
  
  BidResponse(const BidResponse& from);
  
  inline BidResponse& operator=(const BidResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BidResponse& default_instance();
  
  void Swap(BidResponse* other);
  
  // implements Message ----------------------------------------------
  
  BidResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BidResponse& from);
  void MergeFrom(const BidResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  
  // repeated .SeatBid seatbid = 2;
  inline int seatbid_size() const;
  inline void clear_seatbid();
  static const int kSeatbidFieldNumber = 2;
  inline const ::SeatBid& seatbid(int index) const;
  inline ::SeatBid* mutable_seatbid(int index);
  inline ::SeatBid* add_seatbid();
  inline const ::google::protobuf::RepeatedPtrField< ::SeatBid >&
      seatbid() const;
  inline ::google::protobuf::RepeatedPtrField< ::SeatBid >*
      mutable_seatbid();
  
  // optional string bidid = 3;
  inline bool has_bidid() const;
  inline void clear_bidid();
  static const int kBididFieldNumber = 3;
  inline const ::std::string& bidid() const;
  inline void set_bidid(const ::std::string& value);
  inline void set_bidid(const char* value);
  inline void set_bidid(const char* value, size_t size);
  inline ::std::string* mutable_bidid();
  
  // @@protoc_insertion_point(class_scope:BidResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::google::protobuf::RepeatedPtrField< ::SeatBid > seatbid_;
  ::std::string* bidid_;
  static const ::std::string _default_bidid_;
  friend void  protobuf_AddDesc_BidResponse_2eproto();
  friend void protobuf_AssignDesc_BidResponse_2eproto();
  friend void protobuf_ShutdownFile_BidResponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BidResponse* default_instance_;
};
// -------------------------------------------------------------------

class SeatBid : public ::google::protobuf::Message {
 public:
  SeatBid();
  virtual ~SeatBid();
  
  SeatBid(const SeatBid& from);
  
  inline SeatBid& operator=(const SeatBid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SeatBid& default_instance();
  
  void Swap(SeatBid* other);
  
  // implements Message ----------------------------------------------
  
  SeatBid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeatBid& from);
  void MergeFrom(const SeatBid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .Bid bid = 1;
  inline int bid_size() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline const ::Bid& bid(int index) const;
  inline ::Bid* mutable_bid(int index);
  inline ::Bid* add_bid();
  inline const ::google::protobuf::RepeatedPtrField< ::Bid >&
      bid() const;
  inline ::google::protobuf::RepeatedPtrField< ::Bid >*
      mutable_bid();
  
  // @@protoc_insertion_point(class_scope:SeatBid)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::Bid > bid_;
  friend void  protobuf_AddDesc_BidResponse_2eproto();
  friend void protobuf_AssignDesc_BidResponse_2eproto();
  friend void protobuf_ShutdownFile_BidResponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SeatBid* default_instance_;
};
// -------------------------------------------------------------------

class Bid : public ::google::protobuf::Message {
 public:
  Bid();
  virtual ~Bid();
  
  Bid(const Bid& from);
  
  inline Bid& operator=(const Bid& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Bid& default_instance();
  
  void Swap(Bid* other);
  
  // implements Message ----------------------------------------------
  
  Bid* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Bid& from);
  void MergeFrom(const Bid& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  
  // required string impid = 2;
  inline bool has_impid() const;
  inline void clear_impid();
  static const int kImpidFieldNumber = 2;
  inline const ::std::string& impid() const;
  inline void set_impid(const ::std::string& value);
  inline void set_impid(const char* value);
  inline void set_impid(const char* value, size_t size);
  inline ::std::string* mutable_impid();
  
  // required double price = 3;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 3;
  inline double price() const;
  inline void set_price(double value);
  
  // optional string adid = 4;
  inline bool has_adid() const;
  inline void clear_adid();
  static const int kAdidFieldNumber = 4;
  inline const ::std::string& adid() const;
  inline void set_adid(const ::std::string& value);
  inline void set_adid(const char* value);
  inline void set_adid(const char* value, size_t size);
  inline ::std::string* mutable_adid();
  
  // optional string nurl = 5;
  inline bool has_nurl() const;
  inline void clear_nurl();
  static const int kNurlFieldNumber = 5;
  inline const ::std::string& nurl() const;
  inline void set_nurl(const ::std::string& value);
  inline void set_nurl(const char* value);
  inline void set_nurl(const char* value, size_t size);
  inline ::std::string* mutable_nurl();
  
  // optional string adm = 6;
  inline bool has_adm() const;
  inline void clear_adm();
  static const int kAdmFieldNumber = 6;
  inline const ::std::string& adm() const;
  inline void set_adm(const ::std::string& value);
  inline void set_adm(const char* value);
  inline void set_adm(const char* value, size_t size);
  inline ::std::string* mutable_adm();
  
  // optional string impurl = 100;
  inline bool has_impurl() const;
  inline void clear_impurl();
  static const int kImpurlFieldNumber = 100;
  inline const ::std::string& impurl() const;
  inline void set_impurl(const ::std::string& value);
  inline void set_impurl(const char* value);
  inline void set_impurl(const char* value, size_t size);
  inline ::std::string* mutable_impurl();
  
  // optional string ext = 101;
  inline bool has_ext() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 101;
  inline const ::std::string& ext() const;
  inline void set_ext(const ::std::string& value);
  inline void set_ext(const char* value);
  inline void set_ext(const char* value, size_t size);
  inline ::std::string* mutable_ext();
  
  // optional string templeid = 102;
  inline bool has_templeid() const;
  inline void clear_templeid();
  static const int kTempleidFieldNumber = 102;
  inline const ::std::string& templeid() const;
  inline void set_templeid(const ::std::string& value);
  inline void set_templeid(const char* value);
  inline void set_templeid(const char* value, size_t size);
  inline ::std::string* mutable_templeid();
  
  // repeated string expurl = 103;
  inline int expurl_size() const;
  inline void clear_expurl();
  static const int kExpurlFieldNumber = 103;
  inline const ::std::string& expurl(int index) const;
  inline ::std::string* mutable_expurl(int index);
  inline void set_expurl(int index, const ::std::string& value);
  inline void set_expurl(int index, const char* value);
  inline void set_expurl(int index, const char* value, size_t size);
  inline ::std::string* add_expurl();
  inline void add_expurl(const ::std::string& value);
  inline void add_expurl(const char* value);
  inline void add_expurl(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& expurl() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_expurl();
  
  // optional string bt_type = 10001;
  inline bool has_bt_type() const;
  inline void clear_bt_type();
  static const int kBtTypeFieldNumber = 10001;
  inline const ::std::string& bt_type() const;
  inline void set_bt_type(const ::std::string& value);
  inline void set_bt_type(const char* value);
  inline void set_bt_type(const char* value, size_t size);
  inline ::std::string* mutable_bt_type();
  
  // optional string bt_info = 10002;
  inline bool has_bt_info() const;
  inline void clear_bt_info();
  static const int kBtInfoFieldNumber = 10002;
  inline const ::std::string& bt_info() const;
  inline void set_bt_info(const ::std::string& value);
  inline void set_bt_info(const char* value);
  inline void set_bt_info(const char* value, size_t size);
  inline ::std::string* mutable_bt_info();
  
  // optional string tagid = 10003;
  inline bool has_tagid() const;
  inline void clear_tagid();
  static const int kTagidFieldNumber = 10003;
  inline const ::std::string& tagid() const;
  inline void set_tagid(const ::std::string& value);
  inline void set_tagid(const char* value);
  inline void set_tagid(const char* value, size_t size);
  inline ::std::string* mutable_tagid();
  
  // @@protoc_insertion_point(class_scope:Bid)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* id_;
  static const ::std::string _default_id_;
  ::std::string* impid_;
  static const ::std::string _default_impid_;
  double price_;
  ::std::string* adid_;
  static const ::std::string _default_adid_;
  ::std::string* nurl_;
  static const ::std::string _default_nurl_;
  ::std::string* adm_;
  static const ::std::string _default_adm_;
  ::std::string* impurl_;
  static const ::std::string _default_impurl_;
  ::std::string* ext_;
  static const ::std::string _default_ext_;
  ::std::string* templeid_;
  static const ::std::string _default_templeid_;
  ::google::protobuf::RepeatedPtrField< ::std::string> expurl_;
  ::std::string* bt_type_;
  static const ::std::string _default_bt_type_;
  ::std::string* bt_info_;
  static const ::std::string _default_bt_info_;
  ::std::string* tagid_;
  static const ::std::string _default_tagid_;
  friend void  protobuf_AddDesc_BidResponse_2eproto();
  friend void protobuf_AssignDesc_BidResponse_2eproto();
  friend void protobuf_ShutdownFile_BidResponse_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Bid* default_instance_;
};
// ===================================================================


// ===================================================================

// BidResponse

// required string id = 1;
inline bool BidResponse::has_id() const {
  return _has_bit(0);
}
inline void BidResponse::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BidResponse::id() const {
  return *id_;
}
inline void BidResponse::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidResponse::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void BidResponse::set_id(const char* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// repeated .SeatBid seatbid = 2;
inline int BidResponse::seatbid_size() const {
  return seatbid_.size();
}
inline void BidResponse::clear_seatbid() {
  seatbid_.Clear();
}
inline const ::SeatBid& BidResponse::seatbid(int index) const {
  return seatbid_.Get(index);
}
inline ::SeatBid* BidResponse::mutable_seatbid(int index) {
  return seatbid_.Mutable(index);
}
inline ::SeatBid* BidResponse::add_seatbid() {
  return seatbid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SeatBid >&
BidResponse::seatbid() const {
  return seatbid_;
}
inline ::google::protobuf::RepeatedPtrField< ::SeatBid >*
BidResponse::mutable_seatbid() {
  return &seatbid_;
}

// optional string bidid = 3;
inline bool BidResponse::has_bidid() const {
  return _has_bit(2);
}
inline void BidResponse::clear_bidid() {
  if (bidid_ != &_default_bidid_) {
    bidid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& BidResponse::bidid() const {
  return *bidid_;
}
inline void BidResponse::set_bidid(const ::std::string& value) {
  _set_bit(2);
  if (bidid_ == &_default_bidid_) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
}
inline void BidResponse::set_bidid(const char* value) {
  _set_bit(2);
  if (bidid_ == &_default_bidid_) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(value);
}
inline void BidResponse::set_bidid(const char* value, size_t size) {
  _set_bit(2);
  if (bidid_ == &_default_bidid_) {
    bidid_ = new ::std::string;
  }
  bidid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BidResponse::mutable_bidid() {
  _set_bit(2);
  if (bidid_ == &_default_bidid_) {
    bidid_ = new ::std::string;
  }
  return bidid_;
}

// -------------------------------------------------------------------

// SeatBid

// repeated .Bid bid = 1;
inline int SeatBid::bid_size() const {
  return bid_.size();
}
inline void SeatBid::clear_bid() {
  bid_.Clear();
}
inline const ::Bid& SeatBid::bid(int index) const {
  return bid_.Get(index);
}
inline ::Bid* SeatBid::mutable_bid(int index) {
  return bid_.Mutable(index);
}
inline ::Bid* SeatBid::add_bid() {
  return bid_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Bid >&
SeatBid::bid() const {
  return bid_;
}
inline ::google::protobuf::RepeatedPtrField< ::Bid >*
SeatBid::mutable_bid() {
  return &bid_;
}

// -------------------------------------------------------------------

// Bid

// required string id = 1;
inline bool Bid::has_id() const {
  return _has_bit(0);
}
inline void Bid::clear_id() {
  if (id_ != &_default_id_) {
    id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Bid::id() const {
  return *id_;
}
inline void Bid::set_id(const ::std::string& value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Bid::set_id(const char* value) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(value);
}
inline void Bid::set_id(const char* value, size_t size) {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_id() {
  _set_bit(0);
  if (id_ == &_default_id_) {
    id_ = new ::std::string;
  }
  return id_;
}

// required string impid = 2;
inline bool Bid::has_impid() const {
  return _has_bit(1);
}
inline void Bid::clear_impid() {
  if (impid_ != &_default_impid_) {
    impid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Bid::impid() const {
  return *impid_;
}
inline void Bid::set_impid(const ::std::string& value) {
  _set_bit(1);
  if (impid_ == &_default_impid_) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
}
inline void Bid::set_impid(const char* value) {
  _set_bit(1);
  if (impid_ == &_default_impid_) {
    impid_ = new ::std::string;
  }
  impid_->assign(value);
}
inline void Bid::set_impid(const char* value, size_t size) {
  _set_bit(1);
  if (impid_ == &_default_impid_) {
    impid_ = new ::std::string;
  }
  impid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_impid() {
  _set_bit(1);
  if (impid_ == &_default_impid_) {
    impid_ = new ::std::string;
  }
  return impid_;
}

// required double price = 3;
inline bool Bid::has_price() const {
  return _has_bit(2);
}
inline void Bid::clear_price() {
  price_ = 0;
  _clear_bit(2);
}
inline double Bid::price() const {
  return price_;
}
inline void Bid::set_price(double value) {
  _set_bit(2);
  price_ = value;
}

// optional string adid = 4;
inline bool Bid::has_adid() const {
  return _has_bit(3);
}
inline void Bid::clear_adid() {
  if (adid_ != &_default_adid_) {
    adid_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Bid::adid() const {
  return *adid_;
}
inline void Bid::set_adid(const ::std::string& value) {
  _set_bit(3);
  if (adid_ == &_default_adid_) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
}
inline void Bid::set_adid(const char* value) {
  _set_bit(3);
  if (adid_ == &_default_adid_) {
    adid_ = new ::std::string;
  }
  adid_->assign(value);
}
inline void Bid::set_adid(const char* value, size_t size) {
  _set_bit(3);
  if (adid_ == &_default_adid_) {
    adid_ = new ::std::string;
  }
  adid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_adid() {
  _set_bit(3);
  if (adid_ == &_default_adid_) {
    adid_ = new ::std::string;
  }
  return adid_;
}

// optional string nurl = 5;
inline bool Bid::has_nurl() const {
  return _has_bit(4);
}
inline void Bid::clear_nurl() {
  if (nurl_ != &_default_nurl_) {
    nurl_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Bid::nurl() const {
  return *nurl_;
}
inline void Bid::set_nurl(const ::std::string& value) {
  _set_bit(4);
  if (nurl_ == &_default_nurl_) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
}
inline void Bid::set_nurl(const char* value) {
  _set_bit(4);
  if (nurl_ == &_default_nurl_) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(value);
}
inline void Bid::set_nurl(const char* value, size_t size) {
  _set_bit(4);
  if (nurl_ == &_default_nurl_) {
    nurl_ = new ::std::string;
  }
  nurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_nurl() {
  _set_bit(4);
  if (nurl_ == &_default_nurl_) {
    nurl_ = new ::std::string;
  }
  return nurl_;
}

// optional string adm = 6;
inline bool Bid::has_adm() const {
  return _has_bit(5);
}
inline void Bid::clear_adm() {
  if (adm_ != &_default_adm_) {
    adm_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Bid::adm() const {
  return *adm_;
}
inline void Bid::set_adm(const ::std::string& value) {
  _set_bit(5);
  if (adm_ == &_default_adm_) {
    adm_ = new ::std::string;
  }
  adm_->assign(value);
}
inline void Bid::set_adm(const char* value) {
  _set_bit(5);
  if (adm_ == &_default_adm_) {
    adm_ = new ::std::string;
  }
  adm_->assign(value);
}
inline void Bid::set_adm(const char* value, size_t size) {
  _set_bit(5);
  if (adm_ == &_default_adm_) {
    adm_ = new ::std::string;
  }
  adm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_adm() {
  _set_bit(5);
  if (adm_ == &_default_adm_) {
    adm_ = new ::std::string;
  }
  return adm_;
}

// optional string impurl = 100;
inline bool Bid::has_impurl() const {
  return _has_bit(6);
}
inline void Bid::clear_impurl() {
  if (impurl_ != &_default_impurl_) {
    impurl_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& Bid::impurl() const {
  return *impurl_;
}
inline void Bid::set_impurl(const ::std::string& value) {
  _set_bit(6);
  if (impurl_ == &_default_impurl_) {
    impurl_ = new ::std::string;
  }
  impurl_->assign(value);
}
inline void Bid::set_impurl(const char* value) {
  _set_bit(6);
  if (impurl_ == &_default_impurl_) {
    impurl_ = new ::std::string;
  }
  impurl_->assign(value);
}
inline void Bid::set_impurl(const char* value, size_t size) {
  _set_bit(6);
  if (impurl_ == &_default_impurl_) {
    impurl_ = new ::std::string;
  }
  impurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_impurl() {
  _set_bit(6);
  if (impurl_ == &_default_impurl_) {
    impurl_ = new ::std::string;
  }
  return impurl_;
}

// optional string ext = 101;
inline bool Bid::has_ext() const {
  return _has_bit(7);
}
inline void Bid::clear_ext() {
  if (ext_ != &_default_ext_) {
    ext_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& Bid::ext() const {
  return *ext_;
}
inline void Bid::set_ext(const ::std::string& value) {
  _set_bit(7);
  if (ext_ == &_default_ext_) {
    ext_ = new ::std::string;
  }
  ext_->assign(value);
}
inline void Bid::set_ext(const char* value) {
  _set_bit(7);
  if (ext_ == &_default_ext_) {
    ext_ = new ::std::string;
  }
  ext_->assign(value);
}
inline void Bid::set_ext(const char* value, size_t size) {
  _set_bit(7);
  if (ext_ == &_default_ext_) {
    ext_ = new ::std::string;
  }
  ext_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_ext() {
  _set_bit(7);
  if (ext_ == &_default_ext_) {
    ext_ = new ::std::string;
  }
  return ext_;
}

// optional string templeid = 102;
inline bool Bid::has_templeid() const {
  return _has_bit(8);
}
inline void Bid::clear_templeid() {
  if (templeid_ != &_default_templeid_) {
    templeid_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& Bid::templeid() const {
  return *templeid_;
}
inline void Bid::set_templeid(const ::std::string& value) {
  _set_bit(8);
  if (templeid_ == &_default_templeid_) {
    templeid_ = new ::std::string;
  }
  templeid_->assign(value);
}
inline void Bid::set_templeid(const char* value) {
  _set_bit(8);
  if (templeid_ == &_default_templeid_) {
    templeid_ = new ::std::string;
  }
  templeid_->assign(value);
}
inline void Bid::set_templeid(const char* value, size_t size) {
  _set_bit(8);
  if (templeid_ == &_default_templeid_) {
    templeid_ = new ::std::string;
  }
  templeid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_templeid() {
  _set_bit(8);
  if (templeid_ == &_default_templeid_) {
    templeid_ = new ::std::string;
  }
  return templeid_;
}

// repeated string expurl = 103;
inline int Bid::expurl_size() const {
  return expurl_.size();
}
inline void Bid::clear_expurl() {
  expurl_.Clear();
}
inline const ::std::string& Bid::expurl(int index) const {
  return expurl_.Get(index);
}
inline ::std::string* Bid::mutable_expurl(int index) {
  return expurl_.Mutable(index);
}
inline void Bid::set_expurl(int index, const ::std::string& value) {
  expurl_.Mutable(index)->assign(value);
}
inline void Bid::set_expurl(int index, const char* value) {
  expurl_.Mutable(index)->assign(value);
}
inline void Bid::set_expurl(int index, const char* value, size_t size) {
  expurl_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::add_expurl() {
  return expurl_.Add();
}
inline void Bid::add_expurl(const ::std::string& value) {
  expurl_.Add()->assign(value);
}
inline void Bid::add_expurl(const char* value) {
  expurl_.Add()->assign(value);
}
inline void Bid::add_expurl(const char* value, size_t size) {
  expurl_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Bid::expurl() const {
  return expurl_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Bid::mutable_expurl() {
  return &expurl_;
}

// optional string bt_type = 10001;
inline bool Bid::has_bt_type() const {
  return _has_bit(10);
}
inline void Bid::clear_bt_type() {
  if (bt_type_ != &_default_bt_type_) {
    bt_type_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& Bid::bt_type() const {
  return *bt_type_;
}
inline void Bid::set_bt_type(const ::std::string& value) {
  _set_bit(10);
  if (bt_type_ == &_default_bt_type_) {
    bt_type_ = new ::std::string;
  }
  bt_type_->assign(value);
}
inline void Bid::set_bt_type(const char* value) {
  _set_bit(10);
  if (bt_type_ == &_default_bt_type_) {
    bt_type_ = new ::std::string;
  }
  bt_type_->assign(value);
}
inline void Bid::set_bt_type(const char* value, size_t size) {
  _set_bit(10);
  if (bt_type_ == &_default_bt_type_) {
    bt_type_ = new ::std::string;
  }
  bt_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_bt_type() {
  _set_bit(10);
  if (bt_type_ == &_default_bt_type_) {
    bt_type_ = new ::std::string;
  }
  return bt_type_;
}

// optional string bt_info = 10002;
inline bool Bid::has_bt_info() const {
  return _has_bit(11);
}
inline void Bid::clear_bt_info() {
  if (bt_info_ != &_default_bt_info_) {
    bt_info_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& Bid::bt_info() const {
  return *bt_info_;
}
inline void Bid::set_bt_info(const ::std::string& value) {
  _set_bit(11);
  if (bt_info_ == &_default_bt_info_) {
    bt_info_ = new ::std::string;
  }
  bt_info_->assign(value);
}
inline void Bid::set_bt_info(const char* value) {
  _set_bit(11);
  if (bt_info_ == &_default_bt_info_) {
    bt_info_ = new ::std::string;
  }
  bt_info_->assign(value);
}
inline void Bid::set_bt_info(const char* value, size_t size) {
  _set_bit(11);
  if (bt_info_ == &_default_bt_info_) {
    bt_info_ = new ::std::string;
  }
  bt_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_bt_info() {
  _set_bit(11);
  if (bt_info_ == &_default_bt_info_) {
    bt_info_ = new ::std::string;
  }
  return bt_info_;
}

// optional string tagid = 10003;
inline bool Bid::has_tagid() const {
  return _has_bit(12);
}
inline void Bid::clear_tagid() {
  if (tagid_ != &_default_tagid_) {
    tagid_->clear();
  }
  _clear_bit(12);
}
inline const ::std::string& Bid::tagid() const {
  return *tagid_;
}
inline void Bid::set_tagid(const ::std::string& value) {
  _set_bit(12);
  if (tagid_ == &_default_tagid_) {
    tagid_ = new ::std::string;
  }
  tagid_->assign(value);
}
inline void Bid::set_tagid(const char* value) {
  _set_bit(12);
  if (tagid_ == &_default_tagid_) {
    tagid_ = new ::std::string;
  }
  tagid_->assign(value);
}
inline void Bid::set_tagid(const char* value, size_t size) {
  _set_bit(12);
  if (tagid_ == &_default_tagid_) {
    tagid_ = new ::std::string;
  }
  tagid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Bid::mutable_tagid() {
  _set_bit(12);
  if (tagid_ == &_default_tagid_) {
    tagid_ = new ::std::string;
  }
  return tagid_;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_BidResponse_2eproto__INCLUDED
