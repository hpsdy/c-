// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ztc_interface.proto

#ifndef PROTOBUF_ztc_5finterface_2eproto__INCLUDED
#define PROTOBUF_ztc_5finterface_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "bs_advinfo.pb.h"
#include "bizus_basemap.pb.h"
#include "BidResponse.pb.h"
#include "BidRequest.pb.h"
// @@protoc_insertion_point(includes)

namespace ztc {
namespace interface {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ztc_5finterface_2eproto();
void protobuf_AssignDesc_ztc_5finterface_2eproto();
void protobuf_ShutdownFile_ztc_5finterface_2eproto();

class ZtcRequest;
class BusinessInfo;
class UserInfo;
class DeviceInfo;
class AddInfo;
class TargetingInfo;
class ZtcResponse;
class VuiResponse;
class AdResponse;
class SrcAdnum;
class Pair;
class GeneralTransInfo;
class GeneralTransData;
class SrcResult;
class NewStyleResItem;
class ZtcAdvInfo;
class ZtcCsInfo;
class CsSearchResults;

// ===================================================================

class ZtcRequest : public ::google::protobuf::Message {
 public:
  ZtcRequest();
  virtual ~ZtcRequest();
  
  ZtcRequest(const ZtcRequest& from);
  
  inline ZtcRequest& operator=(const ZtcRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZtcRequest& default_instance();
  
  void Swap(ZtcRequest* other);
  
  // implements Message ----------------------------------------------
  
  ZtcRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZtcRequest& from);
  void MergeFrom(const ZtcRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes channel_page = 1;
  inline bool has_channel_page() const;
  inline void clear_channel_page();
  static const int kChannelPageFieldNumber = 1;
  inline const ::std::string& channel_page() const;
  inline void set_channel_page(const ::std::string& value);
  inline void set_channel_page(const char* value);
  inline void set_channel_page(const void* value, size_t size);
  inline ::std::string* mutable_channel_page();
  
  // optional uint64 search_id = 2;
  inline bool has_search_id() const;
  inline void clear_search_id();
  static const int kSearchIdFieldNumber = 2;
  inline ::google::protobuf::uint64 search_id() const;
  inline void set_search_id(::google::protobuf::uint64 value);
  
  // optional uint32 page_num = 3;
  inline bool has_page_num() const;
  inline void clear_page_num();
  static const int kPageNumFieldNumber = 3;
  inline ::google::protobuf::uint32 page_num() const;
  inline void set_page_num(::google::protobuf::uint32 value);
  
  // optional uint32 retry_num = 4;
  inline bool has_retry_num() const;
  inline void clear_retry_num();
  static const int kRetryNumFieldNumber = 4;
  inline ::google::protobuf::uint32 retry_num() const;
  inline void set_retry_num(::google::protobuf::uint32 value);
  
  // optional bytes url = 5;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 5;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const void* value, size_t size);
  inline ::std::string* mutable_url();
  
  // optional bytes refer = 6;
  inline bool has_refer() const;
  inline void clear_refer();
  static const int kReferFieldNumber = 6;
  inline const ::std::string& refer() const;
  inline void set_refer(const ::std::string& value);
  inline void set_refer(const char* value);
  inline void set_refer(const void* value, size_t size);
  inline ::std::string* mutable_refer();
  
  // optional bytes charge_name = 7;
  inline bool has_charge_name() const;
  inline void clear_charge_name();
  static const int kChargeNameFieldNumber = 7;
  inline const ::std::string& charge_name() const;
  inline void set_charge_name(const ::std::string& value);
  inline void set_charge_name(const char* value);
  inline void set_charge_name(const void* value, size_t size);
  inline ::std::string* mutable_charge_name();
  
  // optional bytes from = 8;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 8;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  
  // optional .ztc.interface.BusinessInfo business_info = 9;
  inline bool has_business_info() const;
  inline void clear_business_info();
  static const int kBusinessInfoFieldNumber = 9;
  inline const ::ztc::interface::BusinessInfo& business_info() const;
  inline ::ztc::interface::BusinessInfo* mutable_business_info();
  
  // optional .ztc.interface.UserInfo user_info = 10;
  inline bool has_user_info() const;
  inline void clear_user_info();
  static const int kUserInfoFieldNumber = 10;
  inline const ::ztc::interface::UserInfo& user_info() const;
  inline ::ztc::interface::UserInfo* mutable_user_info();
  
  // optional .ztc.interface.DeviceInfo device_info = 11;
  inline bool has_device_info() const;
  inline void clear_device_info();
  static const int kDeviceInfoFieldNumber = 11;
  inline const ::ztc::interface::DeviceInfo& device_info() const;
  inline ::ztc::interface::DeviceInfo* mutable_device_info();
  
  // optional .ztc.interface.AddInfo add_info = 12;
  inline bool has_add_info() const;
  inline void clear_add_info();
  static const int kAddInfoFieldNumber = 12;
  inline const ::ztc::interface::AddInfo& add_info() const;
  inline ::ztc::interface::AddInfo* mutable_add_info();
  
  // optional .ztc.interface.GeneralTransData general_trans_data = 13;
  inline bool has_general_trans_data() const;
  inline void clear_general_trans_data();
  static const int kGeneralTransDataFieldNumber = 13;
  inline const ::ztc::interface::GeneralTransData& general_trans_data() const;
  inline ::ztc::interface::GeneralTransData* mutable_general_trans_data();
  
  // repeated .bizus_basemap.SearchPoi basemap_poi = 14;
  inline int basemap_poi_size() const;
  inline void clear_basemap_poi();
  static const int kBasemapPoiFieldNumber = 14;
  inline const ::bizus_basemap::SearchPoi& basemap_poi(int index) const;
  inline ::bizus_basemap::SearchPoi* mutable_basemap_poi(int index);
  inline ::bizus_basemap::SearchPoi* add_basemap_poi();
  inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >&
      basemap_poi() const;
  inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >*
      mutable_basemap_poi();
  
  // optional .ztc.interface.TargetingInfo targeting_info = 15;
  inline bool has_targeting_info() const;
  inline void clear_targeting_info();
  static const int kTargetingInfoFieldNumber = 15;
  inline const ::ztc::interface::TargetingInfo& targeting_info() const;
  inline ::ztc::interface::TargetingInfo* mutable_targeting_info();
  
  // optional .BidRequest feed_request = 16;
  inline bool has_feed_request() const;
  inline void clear_feed_request();
  static const int kFeedRequestFieldNumber = 16;
  inline const ::BidRequest& feed_request() const;
  inline ::BidRequest* mutable_feed_request();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.ZtcRequest)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* channel_page_;
  static const ::std::string _default_channel_page_;
  ::google::protobuf::uint64 search_id_;
  ::google::protobuf::uint32 page_num_;
  ::google::protobuf::uint32 retry_num_;
  ::std::string* url_;
  static const ::std::string _default_url_;
  ::std::string* refer_;
  static const ::std::string _default_refer_;
  ::std::string* charge_name_;
  static const ::std::string _default_charge_name_;
  ::std::string* from_;
  static const ::std::string _default_from_;
  ::ztc::interface::BusinessInfo* business_info_;
  ::ztc::interface::UserInfo* user_info_;
  ::ztc::interface::DeviceInfo* device_info_;
  ::ztc::interface::AddInfo* add_info_;
  ::ztc::interface::GeneralTransData* general_trans_data_;
  ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi > basemap_poi_;
  ::ztc::interface::TargetingInfo* targeting_info_;
  ::BidRequest* feed_request_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ZtcRequest* default_instance_;
};
// -------------------------------------------------------------------

class BusinessInfo : public ::google::protobuf::Message {
 public:
  BusinessInfo();
  virtual ~BusinessInfo();
  
  BusinessInfo(const BusinessInfo& from);
  
  inline BusinessInfo& operator=(const BusinessInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BusinessInfo& default_instance();
  
  void Swap(BusinessInfo* other);
  
  // implements Message ----------------------------------------------
  
  BusinessInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BusinessInfo& from);
  void MergeFrom(const BusinessInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes query = 1;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 1;
  inline const ::std::string& query() const;
  inline void set_query(const ::std::string& value);
  inline void set_query(const char* value);
  inline void set_query(const void* value, size_t size);
  inline ::std::string* mutable_query();
  
  // repeated uint32 trade1 = 2;
  inline int trade1_size() const;
  inline void clear_trade1();
  static const int kTrade1FieldNumber = 2;
  inline ::google::protobuf::uint32 trade1(int index) const;
  inline void set_trade1(int index, ::google::protobuf::uint32 value);
  inline void add_trade1(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      trade1() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_trade1();
  
  // repeated uint32 trade2 = 3;
  inline int trade2_size() const;
  inline void clear_trade2();
  static const int kTrade2FieldNumber = 3;
  inline ::google::protobuf::uint32 trade2(int index) const;
  inline void set_trade2(int index, ::google::protobuf::uint32 value);
  inline void add_trade2(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      trade2() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_trade2();
  
  // repeated uint32 trade3 = 4;
  inline int trade3_size() const;
  inline void clear_trade3();
  static const int kTrade3FieldNumber = 4;
  inline ::google::protobuf::uint32 trade3(int index) const;
  inline void set_trade3(int index, ::google::protobuf::uint32 value);
  inline void add_trade3(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      trade3() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_trade3();
  
  // repeated bytes pre_poi_id = 5;
  inline int pre_poi_id_size() const;
  inline void clear_pre_poi_id();
  static const int kPrePoiIdFieldNumber = 5;
  inline const ::std::string& pre_poi_id(int index) const;
  inline ::std::string* mutable_pre_poi_id(int index);
  inline void set_pre_poi_id(int index, const ::std::string& value);
  inline void set_pre_poi_id(int index, const char* value);
  inline void set_pre_poi_id(int index, const void* value, size_t size);
  inline ::std::string* add_pre_poi_id();
  inline void add_pre_poi_id(const ::std::string& value);
  inline void add_pre_poi_id(const char* value);
  inline void add_pre_poi_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pre_poi_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pre_poi_id();
  
  // optional bytes select_condition = 6;
  inline bool has_select_condition() const;
  inline void clear_select_condition();
  static const int kSelectConditionFieldNumber = 6;
  inline const ::std::string& select_condition() const;
  inline void set_select_condition(const ::std::string& value);
  inline void set_select_condition(const char* value);
  inline void set_select_condition(const void* value, size_t size);
  inline ::std::string* mutable_select_condition();
  
  // optional bytes hit_brand_query = 7;
  inline bool has_hit_brand_query() const;
  inline void clear_hit_brand_query();
  static const int kHitBrandQueryFieldNumber = 7;
  inline const ::std::string& hit_brand_query() const;
  inline void set_hit_brand_query(const ::std::string& value);
  inline void set_hit_brand_query(const char* value);
  inline void set_hit_brand_query(const void* value, size_t size);
  inline ::std::string* mutable_hit_brand_query();
  
  // optional uint32 req_type = 8;
  inline bool has_req_type() const;
  inline void clear_req_type();
  static const int kReqTypeFieldNumber = 8;
  inline ::google::protobuf::uint32 req_type() const;
  inline void set_req_type(::google::protobuf::uint32 value);
  
  // repeated bytes pre_deal_id = 9;
  inline int pre_deal_id_size() const;
  inline void clear_pre_deal_id();
  static const int kPreDealIdFieldNumber = 9;
  inline const ::std::string& pre_deal_id(int index) const;
  inline ::std::string* mutable_pre_deal_id(int index);
  inline void set_pre_deal_id(int index, const ::std::string& value);
  inline void set_pre_deal_id(int index, const char* value);
  inline void set_pre_deal_id(int index, const void* value, size_t size);
  inline ::std::string* add_pre_deal_id();
  inline void add_pre_deal_id(const ::std::string& value);
  inline void add_pre_deal_id(const char* value);
  inline void add_pre_deal_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& pre_deal_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_pre_deal_id();
  
  // repeated bytes reject_deal_id = 10;
  inline int reject_deal_id_size() const;
  inline void clear_reject_deal_id();
  static const int kRejectDealIdFieldNumber = 10;
  inline const ::std::string& reject_deal_id(int index) const;
  inline ::std::string* mutable_reject_deal_id(int index);
  inline void set_reject_deal_id(int index, const ::std::string& value);
  inline void set_reject_deal_id(int index, const char* value);
  inline void set_reject_deal_id(int index, const void* value, size_t size);
  inline ::std::string* add_reject_deal_id();
  inline void add_reject_deal_id(const ::std::string& value);
  inline void add_reject_deal_id(const char* value);
  inline void add_reject_deal_id(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& reject_deal_id() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reject_deal_id();
  
  // optional uint32 start_idx = 11;
  inline bool has_start_idx() const;
  inline void clear_start_idx();
  static const int kStartIdxFieldNumber = 11;
  inline ::google::protobuf::uint32 start_idx() const;
  inline void set_start_idx(::google::protobuf::uint32 value);
  
  // repeated .ztc.interface.SrcAdnum src_adnum = 12;
  inline int src_adnum_size() const;
  inline void clear_src_adnum();
  static const int kSrcAdnumFieldNumber = 12;
  inline const ::ztc::interface::SrcAdnum& src_adnum(int index) const;
  inline ::ztc::interface::SrcAdnum* mutable_src_adnum(int index);
  inline ::ztc::interface::SrcAdnum* add_src_adnum();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum >&
      src_adnum() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum >*
      mutable_src_adnum();
  
  // optional bytes cur_deal_id = 13;
  inline bool has_cur_deal_id() const;
  inline void clear_cur_deal_id();
  static const int kCurDealIdFieldNumber = 13;
  inline const ::std::string& cur_deal_id() const;
  inline void set_cur_deal_id(const ::std::string& value);
  inline void set_cur_deal_id(const char* value);
  inline void set_cur_deal_id(const void* value, size_t size);
  inline ::std::string* mutable_cur_deal_id();
  
  // optional bytes cur_poi_id = 14;
  inline bool has_cur_poi_id() const;
  inline void clear_cur_poi_id();
  static const int kCurPoiIdFieldNumber = 14;
  inline const ::std::string& cur_poi_id() const;
  inline void set_cur_poi_id(const ::std::string& value);
  inline void set_cur_poi_id(const char* value);
  inline void set_cur_poi_id(const void* value, size_t size);
  inline ::std::string* mutable_cur_poi_id();
  
  // optional bool is_default_recom = 15;
  inline bool has_is_default_recom() const;
  inline void clear_is_default_recom();
  static const int kIsDefaultRecomFieldNumber = 15;
  inline bool is_default_recom() const;
  inline void set_is_default_recom(bool value);
  
  // optional bytes poi_gps = 16;
  inline bool has_poi_gps() const;
  inline void clear_poi_gps();
  static const int kPoiGpsFieldNumber = 16;
  inline const ::std::string& poi_gps() const;
  inline void set_poi_gps(const ::std::string& value);
  inline void set_poi_gps(const char* value);
  inline void set_poi_gps(const void* value, size_t size);
  inline ::std::string* mutable_poi_gps();
  
  // optional bytes std_tag = 17;
  inline bool has_std_tag() const;
  inline void clear_std_tag();
  static const int kStdTagFieldNumber = 17;
  inline const ::std::string& std_tag() const;
  inline void set_std_tag(const ::std::string& value);
  inline void set_std_tag(const char* value);
  inline void set_std_tag(const void* value, size_t size);
  inline ::std::string* mutable_std_tag();
  
  // optional int32 map_query_type = 18;
  inline bool has_map_query_type() const;
  inline void clear_map_query_type();
  static const int kMapQueryTypeFieldNumber = 18;
  inline ::google::protobuf::int32 map_query_type() const;
  inline void set_map_query_type(::google::protobuf::int32 value);
  
  // optional uint32 map_type = 19;
  inline bool has_map_type() const;
  inline void clear_map_type();
  static const int kMapTypeFieldNumber = 19;
  inline ::google::protobuf::uint32 map_type() const;
  inline void set_map_type(::google::protobuf::uint32 value);
  
  // optional bytes map_poi_ids = 20;
  inline bool has_map_poi_ids() const;
  inline void clear_map_poi_ids();
  static const int kMapPoiIdsFieldNumber = 20;
  inline const ::std::string& map_poi_ids() const;
  inline void set_map_poi_ids(const ::std::string& value);
  inline void set_map_poi_ids(const char* value);
  inline void set_map_poi_ids(const void* value, size_t size);
  inline ::std::string* mutable_map_poi_ids();
  
  // repeated .ztc.interface.SrcAdnum ori_src_adnum = 21;
  inline int ori_src_adnum_size() const;
  inline void clear_ori_src_adnum();
  static const int kOriSrcAdnumFieldNumber = 21;
  inline const ::ztc::interface::SrcAdnum& ori_src_adnum(int index) const;
  inline ::ztc::interface::SrcAdnum* mutable_ori_src_adnum(int index);
  inline ::ztc::interface::SrcAdnum* add_ori_src_adnum();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum >&
      ori_src_adnum() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum >*
      mutable_ori_src_adnum();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.BusinessInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* query_;
  static const ::std::string _default_query_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > trade1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > trade2_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > trade3_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pre_poi_id_;
  ::std::string* select_condition_;
  static const ::std::string _default_select_condition_;
  ::std::string* hit_brand_query_;
  static const ::std::string _default_hit_brand_query_;
  ::google::protobuf::uint32 req_type_;
  ::google::protobuf::RepeatedPtrField< ::std::string> pre_deal_id_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reject_deal_id_;
  ::google::protobuf::uint32 start_idx_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum > src_adnum_;
  ::std::string* cur_deal_id_;
  static const ::std::string _default_cur_deal_id_;
  ::std::string* cur_poi_id_;
  static const ::std::string _default_cur_poi_id_;
  bool is_default_recom_;
  ::std::string* poi_gps_;
  static const ::std::string _default_poi_gps_;
  ::std::string* std_tag_;
  static const ::std::string _default_std_tag_;
  ::google::protobuf::int32 map_query_type_;
  ::google::protobuf::uint32 map_type_;
  ::std::string* map_poi_ids_;
  static const ::std::string _default_map_poi_ids_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum > ori_src_adnum_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BusinessInfo* default_instance_;
};
// -------------------------------------------------------------------

class UserInfo : public ::google::protobuf::Message {
 public:
  UserInfo();
  virtual ~UserInfo();
  
  UserInfo(const UserInfo& from);
  
  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const UserInfo& default_instance();
  
  void Swap(UserInfo* other);
  
  // implements Message ----------------------------------------------
  
  UserInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UserInfo& from);
  void MergeFrom(const UserInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes baidu_id = 1;
  inline bool has_baidu_id() const;
  inline void clear_baidu_id();
  static const int kBaiduIdFieldNumber = 1;
  inline const ::std::string& baidu_id() const;
  inline void set_baidu_id(const ::std::string& value);
  inline void set_baidu_id(const char* value);
  inline void set_baidu_id(const void* value, size_t size);
  inline ::std::string* mutable_baidu_id();
  
  // optional bytes cuid = 2;
  inline bool has_cuid() const;
  inline void clear_cuid();
  static const int kCuidFieldNumber = 2;
  inline const ::std::string& cuid() const;
  inline void set_cuid(const ::std::string& value);
  inline void set_cuid(const char* value);
  inline void set_cuid(const void* value, size_t size);
  inline ::std::string* mutable_cuid();
  
  // optional uint64 passport_user_id = 3;
  inline bool has_passport_user_id() const;
  inline void clear_passport_user_id();
  static const int kPassportUserIdFieldNumber = 3;
  inline ::google::protobuf::uint64 passport_user_id() const;
  inline void set_passport_user_id(::google::protobuf::uint64 value);
  
  // optional uint32 user_ip = 4;
  inline bool has_user_ip() const;
  inline void clear_user_ip();
  static const int kUserIpFieldNumber = 4;
  inline ::google::protobuf::uint32 user_ip() const;
  inline void set_user_ip(::google::protobuf::uint32 value);
  
  // optional bytes gps = 5;
  inline bool has_gps() const;
  inline void clear_gps();
  static const int kGpsFieldNumber = 5;
  inline const ::std::string& gps() const;
  inline void set_gps(const ::std::string& value);
  inline void set_gps(const char* value);
  inline void set_gps(const void* value, size_t size);
  inline ::std::string* mutable_gps();
  
  // optional uint32 cityid = 6;
  inline bool has_cityid() const;
  inline void clear_cityid();
  static const int kCityidFieldNumber = 6;
  inline ::google::protobuf::uint32 cityid() const;
  inline void set_cityid(::google::protobuf::uint32 value);
  
  // optional uint32 provinceid = 7;
  inline bool has_provinceid() const;
  inline void clear_provinceid();
  static const int kProvinceidFieldNumber = 7;
  inline ::google::protobuf::uint32 provinceid() const;
  inline void set_provinceid(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ztc.interface.UserInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* baidu_id_;
  static const ::std::string _default_baidu_id_;
  ::std::string* cuid_;
  static const ::std::string _default_cuid_;
  ::google::protobuf::uint64 passport_user_id_;
  ::google::protobuf::uint32 user_ip_;
  ::std::string* gps_;
  static const ::std::string _default_gps_;
  ::google::protobuf::uint32 cityid_;
  ::google::protobuf::uint32 provinceid_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static UserInfo* default_instance_;
};
// -------------------------------------------------------------------

class DeviceInfo : public ::google::protobuf::Message {
 public:
  DeviceInfo();
  virtual ~DeviceInfo();
  
  DeviceInfo(const DeviceInfo& from);
  
  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DeviceInfo& default_instance();
  
  void Swap(DeviceInfo* other);
  
  // implements Message ----------------------------------------------
  
  DeviceInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes client_name = 1;
  inline bool has_client_name() const;
  inline void clear_client_name();
  static const int kClientNameFieldNumber = 1;
  inline const ::std::string& client_name() const;
  inline void set_client_name(const ::std::string& value);
  inline void set_client_name(const char* value);
  inline void set_client_name(const void* value, size_t size);
  inline ::std::string* mutable_client_name();
  
  // optional bytes device_type = 2;
  inline bool has_device_type() const;
  inline void clear_device_type();
  static const int kDeviceTypeFieldNumber = 2;
  inline const ::std::string& device_type() const;
  inline void set_device_type(const ::std::string& value);
  inline void set_device_type(const char* value);
  inline void set_device_type(const void* value, size_t size);
  inline ::std::string* mutable_device_type();
  
  // optional bytes os_version = 3;
  inline bool has_os_version() const;
  inline void clear_os_version();
  static const int kOsVersionFieldNumber = 3;
  inline const ::std::string& os_version() const;
  inline void set_os_version(const ::std::string& value);
  inline void set_os_version(const char* value);
  inline void set_os_version(const void* value, size_t size);
  inline ::std::string* mutable_os_version();
  
  // optional bytes user_agent = 4;
  inline bool has_user_agent() const;
  inline void clear_user_agent();
  static const int kUserAgentFieldNumber = 4;
  inline const ::std::string& user_agent() const;
  inline void set_user_agent(const ::std::string& value);
  inline void set_user_agent(const char* value);
  inline void set_user_agent(const void* value, size_t size);
  inline ::std::string* mutable_user_agent();
  
  // optional bytes wnettype = 5;
  inline bool has_wnettype() const;
  inline void clear_wnettype();
  static const int kWnettypeFieldNumber = 5;
  inline const ::std::string& wnettype() const;
  inline void set_wnettype(const ::std::string& value);
  inline void set_wnettype(const char* value);
  inline void set_wnettype(const void* value, size_t size);
  inline ::std::string* mutable_wnettype();
  
  // optional int32 screenwidth = 6;
  inline bool has_screenwidth() const;
  inline void clear_screenwidth();
  static const int kScreenwidthFieldNumber = 6;
  inline ::google::protobuf::int32 screenwidth() const;
  inline void set_screenwidth(::google::protobuf::int32 value);
  
  // optional int32 screenheight = 7;
  inline bool has_screenheight() const;
  inline void clear_screenheight();
  static const int kScreenheightFieldNumber = 7;
  inline ::google::protobuf::int32 screenheight() const;
  inline void set_screenheight(::google::protobuf::int32 value);
  
  // optional bytes wpt = 8;
  inline bool has_wpt() const;
  inline void clear_wpt();
  static const int kWptFieldNumber = 8;
  inline const ::std::string& wpt() const;
  inline void set_wpt(const ::std::string& value);
  inline void set_wpt(const char* value);
  inline void set_wpt(const void* value, size_t size);
  inline ::std::string* mutable_wpt();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.DeviceInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* client_name_;
  static const ::std::string _default_client_name_;
  ::std::string* device_type_;
  static const ::std::string _default_device_type_;
  ::std::string* os_version_;
  static const ::std::string _default_os_version_;
  ::std::string* user_agent_;
  static const ::std::string _default_user_agent_;
  ::std::string* wnettype_;
  static const ::std::string _default_wnettype_;
  ::google::protobuf::int32 screenwidth_;
  ::google::protobuf::int32 screenheight_;
  ::std::string* wpt_;
  static const ::std::string _default_wpt_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DeviceInfo* default_instance_;
};
// -------------------------------------------------------------------

class AddInfo : public ::google::protobuf::Message {
 public:
  AddInfo();
  virtual ~AddInfo();
  
  AddInfo(const AddInfo& from);
  
  inline AddInfo& operator=(const AddInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AddInfo& default_instance();
  
  void Swap(AddInfo* other);
  
  // implements Message ----------------------------------------------
  
  AddInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AddInfo& from);
  void MergeFrom(const AddInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes ui_server_ip = 1;
  inline bool has_ui_server_ip() const;
  inline void clear_ui_server_ip();
  static const int kUiServerIpFieldNumber = 1;
  inline const ::std::string& ui_server_ip() const;
  inline void set_ui_server_ip(const ::std::string& value);
  inline void set_ui_server_ip(const char* value);
  inline void set_ui_server_ip(const void* value, size_t size);
  inline ::std::string* mutable_ui_server_ip();
  
  // optional uint64 request_exact_time = 2;
  inline bool has_request_exact_time() const;
  inline void clear_request_exact_time();
  static const int kRequestExactTimeFieldNumber = 2;
  inline ::google::protobuf::uint64 request_exact_time() const;
  inline void set_request_exact_time(::google::protobuf::uint64 value);
  
  // optional bytes router_tag = 3;
  inline bool has_router_tag() const;
  inline void clear_router_tag();
  static const int kRouterTagFieldNumber = 3;
  inline const ::std::string& router_tag() const;
  inline void set_router_tag(const ::std::string& value);
  inline void set_router_tag(const char* value);
  inline void set_router_tag(const void* value, size_t size);
  inline ::std::string* mutable_router_tag();
  
  // repeated uint32 experiment_id_list = 4;
  inline int experiment_id_list_size() const;
  inline void clear_experiment_id_list();
  static const int kExperimentIdListFieldNumber = 4;
  inline ::google::protobuf::uint32 experiment_id_list(int index) const;
  inline void set_experiment_id_list(int index, ::google::protobuf::uint32 value);
  inline void add_experiment_id_list(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      experiment_id_list() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_experiment_id_list();
  
  // optional bytes logic_platform = 5;
  inline bool has_logic_platform() const;
  inline void clear_logic_platform();
  static const int kLogicPlatformFieldNumber = 5;
  inline const ::std::string& logic_platform() const;
  inline void set_logic_platform(const ::std::string& value);
  inline void set_logic_platform(const char* value);
  inline void set_logic_platform(const void* value, size_t size);
  inline ::std::string* mutable_logic_platform();
  
  // optional bytes physics_platform = 6;
  inline bool has_physics_platform() const;
  inline void clear_physics_platform();
  static const int kPhysicsPlatformFieldNumber = 6;
  inline const ::std::string& physics_platform() const;
  inline void set_physics_platform(const ::std::string& value);
  inline void set_physics_platform(const char* value);
  inline void set_physics_platform(const void* value, size_t size);
  inline ::std::string* mutable_physics_platform();
  
  // optional int32 need_bndetail = 7;
  inline bool has_need_bndetail() const;
  inline void clear_need_bndetail();
  static const int kNeedBndetailFieldNumber = 7;
  inline ::google::protobuf::int32 need_bndetail() const;
  inline void set_need_bndetail(::google::protobuf::int32 value);
  
  // optional int32 dync_ztc_router_tag = 8;
  inline bool has_dync_ztc_router_tag() const;
  inline void clear_dync_ztc_router_tag();
  static const int kDyncZtcRouterTagFieldNumber = 8;
  inline ::google::protobuf::int32 dync_ztc_router_tag() const;
  inline void set_dync_ztc_router_tag(::google::protobuf::int32 value);
  
  // optional bytes fc_ovlexp = 9;
  inline bool has_fc_ovlexp() const;
  inline void clear_fc_ovlexp();
  static const int kFcOvlexpFieldNumber = 9;
  inline const ::std::string& fc_ovlexp() const;
  inline void set_fc_ovlexp(const ::std::string& value);
  inline void set_fc_ovlexp(const char* value);
  inline void set_fc_ovlexp(const void* value, size_t size);
  inline ::std::string* mutable_fc_ovlexp();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.AddInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* ui_server_ip_;
  static const ::std::string _default_ui_server_ip_;
  ::google::protobuf::uint64 request_exact_time_;
  ::std::string* router_tag_;
  static const ::std::string _default_router_tag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > experiment_id_list_;
  ::std::string* logic_platform_;
  static const ::std::string _default_logic_platform_;
  ::std::string* physics_platform_;
  static const ::std::string _default_physics_platform_;
  ::google::protobuf::int32 need_bndetail_;
  ::google::protobuf::int32 dync_ztc_router_tag_;
  ::std::string* fc_ovlexp_;
  static const ::std::string _default_fc_ovlexp_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AddInfo* default_instance_;
};
// -------------------------------------------------------------------

class TargetingInfo : public ::google::protobuf::Message {
 public:
  TargetingInfo();
  virtual ~TargetingInfo();
  
  TargetingInfo(const TargetingInfo& from);
  
  inline TargetingInfo& operator=(const TargetingInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TargetingInfo& default_instance();
  
  void Swap(TargetingInfo* other);
  
  // implements Message ----------------------------------------------
  
  TargetingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TargetingInfo& from);
  void MergeFrom(const TargetingInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool enable_cs = 1;
  inline bool has_enable_cs() const;
  inline void clear_enable_cs();
  static const int kEnableCsFieldNumber = 1;
  inline bool enable_cs() const;
  inline void set_enable_cs(bool value);
  
  // @@protoc_insertion_point(class_scope:ztc.interface.TargetingInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  bool enable_cs_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TargetingInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZtcResponse : public ::google::protobuf::Message {
 public:
  ZtcResponse();
  virtual ~ZtcResponse();
  
  ZtcResponse(const ZtcResponse& from);
  
  inline ZtcResponse& operator=(const ZtcResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZtcResponse& default_instance();
  
  void Swap(ZtcResponse* other);
  
  // implements Message ----------------------------------------------
  
  ZtcResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZtcResponse& from);
  void MergeFrom(const ZtcResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ztc.interface.VuiResponse vui_res = 1;
  inline bool has_vui_res() const;
  inline void clear_vui_res();
  static const int kVuiResFieldNumber = 1;
  inline const ::ztc::interface::VuiResponse& vui_res() const;
  inline ::ztc::interface::VuiResponse* mutable_vui_res();
  
  // optional bytes log_info = 2;
  inline bool has_log_info() const;
  inline void clear_log_info();
  static const int kLogInfoFieldNumber = 2;
  inline const ::std::string& log_info() const;
  inline void set_log_info(const ::std::string& value);
  inline void set_log_info(const char* value);
  inline void set_log_info(const void* value, size_t size);
  inline ::std::string* mutable_log_info();
  
  // optional bool is_valid = 3;
  inline bool has_is_valid() const;
  inline void clear_is_valid();
  static const int kIsValidFieldNumber = 3;
  inline bool is_valid() const;
  inline void set_is_valid(bool value);
  
  // repeated .ztc.interface.SrcResult src_result = 4;
  inline int src_result_size() const;
  inline void clear_src_result();
  static const int kSrcResultFieldNumber = 4;
  inline const ::ztc::interface::SrcResult& src_result(int index) const;
  inline ::ztc::interface::SrcResult* mutable_src_result(int index);
  inline ::ztc::interface::SrcResult* add_src_result();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcResult >&
      src_result() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcResult >*
      mutable_src_result();
  
  // repeated .bizus_basemap.SearchPoi basemap_poi = 5;
  inline int basemap_poi_size() const;
  inline void clear_basemap_poi();
  static const int kBasemapPoiFieldNumber = 5;
  inline const ::bizus_basemap::SearchPoi& basemap_poi(int index) const;
  inline ::bizus_basemap::SearchPoi* mutable_basemap_poi(int index);
  inline ::bizus_basemap::SearchPoi* add_basemap_poi();
  inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >&
      basemap_poi() const;
  inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >*
      mutable_basemap_poi();
  
  // optional bool is_bda_valid = 6;
  inline bool has_is_bda_valid() const;
  inline void clear_is_bda_valid();
  static const int kIsBdaValidFieldNumber = 6;
  inline bool is_bda_valid() const;
  inline void set_is_bda_valid(bool value);
  
  // optional bytes bndetail_response = 7;
  inline bool has_bndetail_response() const;
  inline void clear_bndetail_response();
  static const int kBndetailResponseFieldNumber = 7;
  inline const ::std::string& bndetail_response() const;
  inline void set_bndetail_response(const ::std::string& value);
  inline void set_bndetail_response(const char* value);
  inline void set_bndetail_response(const void* value, size_t size);
  inline ::std::string* mutable_bndetail_response();
  
  // optional bytes nuomi_session_profile_binary = 8;
  inline bool has_nuomi_session_profile_binary() const;
  inline void clear_nuomi_session_profile_binary();
  static const int kNuomiSessionProfileBinaryFieldNumber = 8;
  inline const ::std::string& nuomi_session_profile_binary() const;
  inline void set_nuomi_session_profile_binary(const ::std::string& value);
  inline void set_nuomi_session_profile_binary(const char* value);
  inline void set_nuomi_session_profile_binary(const void* value, size_t size);
  inline ::std::string* mutable_nuomi_session_profile_binary();
  
  // optional bytes ztc_gs = 9;
  inline bool has_ztc_gs() const;
  inline void clear_ztc_gs();
  static const int kZtcGsFieldNumber = 9;
  inline const ::std::string& ztc_gs() const;
  inline void set_ztc_gs(const ::std::string& value);
  inline void set_ztc_gs(const char* value);
  inline void set_ztc_gs(const void* value, size_t size);
  inline ::std::string* mutable_ztc_gs();
  
  // optional .BidResponse feed_response = 10;
  inline bool has_feed_response() const;
  inline void clear_feed_response();
  static const int kFeedResponseFieldNumber = 10;
  inline const ::BidResponse& feed_response() const;
  inline ::BidResponse* mutable_feed_response();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.ZtcResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ztc::interface::VuiResponse* vui_res_;
  ::std::string* log_info_;
  static const ::std::string _default_log_info_;
  bool is_valid_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcResult > src_result_;
  ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi > basemap_poi_;
  bool is_bda_valid_;
  ::std::string* bndetail_response_;
  static const ::std::string _default_bndetail_response_;
  ::std::string* nuomi_session_profile_binary_;
  static const ::std::string _default_nuomi_session_profile_binary_;
  ::std::string* ztc_gs_;
  static const ::std::string _default_ztc_gs_;
  ::BidResponse* feed_response_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ZtcResponse* default_instance_;
};
// -------------------------------------------------------------------

class VuiResponse : public ::google::protobuf::Message {
 public:
  VuiResponse();
  virtual ~VuiResponse();
  
  VuiResponse(const VuiResponse& from);
  
  inline VuiResponse& operator=(const VuiResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const VuiResponse& default_instance();
  
  void Swap(VuiResponse* other);
  
  // implements Message ----------------------------------------------
  
  VuiResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VuiResponse& from);
  void MergeFrom(const VuiResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 err_no = 1;
  inline bool has_err_no() const;
  inline void clear_err_no();
  static const int kErrNoFieldNumber = 1;
  inline ::google::protobuf::uint32 err_no() const;
  inline void set_err_no(::google::protobuf::uint32 value);
  
  // repeated bytes global_js_list = 2;
  inline int global_js_list_size() const;
  inline void clear_global_js_list();
  static const int kGlobalJsListFieldNumber = 2;
  inline const ::std::string& global_js_list(int index) const;
  inline ::std::string* mutable_global_js_list(int index);
  inline void set_global_js_list(int index, const ::std::string& value);
  inline void set_global_js_list(int index, const char* value);
  inline void set_global_js_list(int index, const void* value, size_t size);
  inline ::std::string* add_global_js_list();
  inline void add_global_js_list(const ::std::string& value);
  inline void add_global_js_list(const char* value);
  inline void add_global_js_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& global_js_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_global_js_list();
  
  // repeated bytes global_css_list = 3;
  inline int global_css_list_size() const;
  inline void clear_global_css_list();
  static const int kGlobalCssListFieldNumber = 3;
  inline const ::std::string& global_css_list(int index) const;
  inline ::std::string* mutable_global_css_list(int index);
  inline void set_global_css_list(int index, const ::std::string& value);
  inline void set_global_css_list(int index, const char* value);
  inline void set_global_css_list(int index, const void* value, size_t size);
  inline ::std::string* add_global_css_list();
  inline void add_global_css_list(const ::std::string& value);
  inline void add_global_css_list(const char* value);
  inline void add_global_css_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& global_css_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_global_css_list();
  
  // repeated .ztc.interface.AdResponse ad_place_list = 4;
  inline int ad_place_list_size() const;
  inline void clear_ad_place_list();
  static const int kAdPlaceListFieldNumber = 4;
  inline const ::ztc::interface::AdResponse& ad_place_list(int index) const;
  inline ::ztc::interface::AdResponse* mutable_ad_place_list(int index);
  inline ::ztc::interface::AdResponse* add_ad_place_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::AdResponse >&
      ad_place_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::AdResponse >*
      mutable_ad_place_list();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.VuiResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 err_no_;
  ::google::protobuf::RepeatedPtrField< ::std::string> global_js_list_;
  ::google::protobuf::RepeatedPtrField< ::std::string> global_css_list_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::AdResponse > ad_place_list_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static VuiResponse* default_instance_;
};
// -------------------------------------------------------------------

class AdResponse : public ::google::protobuf::Message {
 public:
  AdResponse();
  virtual ~AdResponse();
  
  AdResponse(const AdResponse& from);
  
  inline AdResponse& operator=(const AdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdResponse& default_instance();
  
  void Swap(AdResponse* other);
  
  // implements Message ----------------------------------------------
  
  AdResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdResponse& from);
  void MergeFrom(const AdResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 ad_place_id = 1;
  inline bool has_ad_place_id() const;
  inline void clear_ad_place_id();
  static const int kAdPlaceIdFieldNumber = 1;
  inline ::google::protobuf::uint32 ad_place_id() const;
  inline void set_ad_place_id(::google::protobuf::uint32 value);
  
  // optional uint32 ad_num = 2;
  inline bool has_ad_num() const;
  inline void clear_ad_num();
  static const int kAdNumFieldNumber = 2;
  inline ::google::protobuf::uint32 ad_num() const;
  inline void set_ad_num(::google::protobuf::uint32 value);
  
  // optional bytes ad_place_data = 3;
  inline bool has_ad_place_data() const;
  inline void clear_ad_place_data();
  static const int kAdPlaceDataFieldNumber = 3;
  inline const ::std::string& ad_place_data() const;
  inline void set_ad_place_data(const ::std::string& value);
  inline void set_ad_place_data(const char* value);
  inline void set_ad_place_data(const void* value, size_t size);
  inline ::std::string* mutable_ad_place_data();
  
  // optional bytes ad_place_js = 4;
  inline bool has_ad_place_js() const;
  inline void clear_ad_place_js();
  static const int kAdPlaceJsFieldNumber = 4;
  inline const ::std::string& ad_place_js() const;
  inline void set_ad_place_js(const ::std::string& value);
  inline void set_ad_place_js(const char* value);
  inline void set_ad_place_js(const void* value, size_t size);
  inline ::std::string* mutable_ad_place_js();
  
  // optional bytes ad_place_css = 5;
  inline bool has_ad_place_css() const;
  inline void clear_ad_place_css();
  static const int kAdPlaceCssFieldNumber = 5;
  inline const ::std::string& ad_place_css() const;
  inline void set_ad_place_css(const ::std::string& value);
  inline void set_ad_place_css(const char* value);
  inline void set_ad_place_css(const void* value, size_t size);
  inline ::std::string* mutable_ad_place_css();
  
  // repeated bytes general_ad_fields = 6;
  inline int general_ad_fields_size() const;
  inline void clear_general_ad_fields();
  static const int kGeneralAdFieldsFieldNumber = 6;
  inline const ::std::string& general_ad_fields(int index) const;
  inline ::std::string* mutable_general_ad_fields(int index);
  inline void set_general_ad_fields(int index, const ::std::string& value);
  inline void set_general_ad_fields(int index, const char* value);
  inline void set_general_ad_fields(int index, const void* value, size_t size);
  inline ::std::string* add_general_ad_fields();
  inline void add_general_ad_fields(const ::std::string& value);
  inline void add_general_ad_fields(const char* value);
  inline void add_general_ad_fields(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& general_ad_fields() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_general_ad_fields();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.AdResponse)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 ad_place_id_;
  ::google::protobuf::uint32 ad_num_;
  ::std::string* ad_place_data_;
  static const ::std::string _default_ad_place_data_;
  ::std::string* ad_place_js_;
  static const ::std::string _default_ad_place_js_;
  ::std::string* ad_place_css_;
  static const ::std::string _default_ad_place_css_;
  ::google::protobuf::RepeatedPtrField< ::std::string> general_ad_fields_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AdResponse* default_instance_;
};
// -------------------------------------------------------------------

class SrcAdnum : public ::google::protobuf::Message {
 public:
  SrcAdnum();
  virtual ~SrcAdnum();
  
  SrcAdnum(const SrcAdnum& from);
  
  inline SrcAdnum& operator=(const SrcAdnum& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SrcAdnum& default_instance();
  
  void Swap(SrcAdnum* other);
  
  // implements Message ----------------------------------------------
  
  SrcAdnum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrcAdnum& from);
  void MergeFrom(const SrcAdnum& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 src_id = 1;
  inline bool has_src_id() const;
  inline void clear_src_id();
  static const int kSrcIdFieldNumber = 1;
  inline ::google::protobuf::uint32 src_id() const;
  inline void set_src_id(::google::protobuf::uint32 value);
  
  // optional uint32 ad_num = 2;
  inline bool has_ad_num() const;
  inline void clear_ad_num();
  static const int kAdNumFieldNumber = 2;
  inline ::google::protobuf::uint32 ad_num() const;
  inline void set_ad_num(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ztc.interface.SrcAdnum)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 src_id_;
  ::google::protobuf::uint32 ad_num_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SrcAdnum* default_instance_;
};
// -------------------------------------------------------------------

class Pair : public ::google::protobuf::Message {
 public:
  Pair();
  virtual ~Pair();
  
  Pair(const Pair& from);
  
  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pair& default_instance();
  
  void Swap(Pair* other);
  
  // implements Message ----------------------------------------------
  
  Pair* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.Pair)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Pair* default_instance_;
};
// -------------------------------------------------------------------

class GeneralTransInfo : public ::google::protobuf::Message {
 public:
  GeneralTransInfo();
  virtual ~GeneralTransInfo();
  
  GeneralTransInfo(const GeneralTransInfo& from);
  
  inline GeneralTransInfo& operator=(const GeneralTransInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralTransInfo& default_instance();
  
  void Swap(GeneralTransInfo* other);
  
  // implements Message ----------------------------------------------
  
  GeneralTransInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeneralTransInfo& from);
  void MergeFrom(const GeneralTransInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required bytes key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const void* value, size_t size);
  inline ::std::string* mutable_key();
  
  // optional bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  
  // repeated .ztc.interface.Pair value_list = 3;
  inline int value_list_size() const;
  inline void clear_value_list();
  static const int kValueListFieldNumber = 3;
  inline const ::ztc::interface::Pair& value_list(int index) const;
  inline ::ztc::interface::Pair* mutable_value_list(int index);
  inline ::ztc::interface::Pair* add_value_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::Pair >&
      value_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::Pair >*
      mutable_value_list();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.GeneralTransInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* key_;
  static const ::std::string _default_key_;
  ::std::string* value_;
  static const ::std::string _default_value_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::Pair > value_list_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GeneralTransInfo* default_instance_;
};
// -------------------------------------------------------------------

class GeneralTransData : public ::google::protobuf::Message {
 public:
  GeneralTransData();
  virtual ~GeneralTransData();
  
  GeneralTransData(const GeneralTransData& from);
  
  inline GeneralTransData& operator=(const GeneralTransData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralTransData& default_instance();
  
  void Swap(GeneralTransData* other);
  
  // implements Message ----------------------------------------------
  
  GeneralTransData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeneralTransData& from);
  void MergeFrom(const GeneralTransData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes data_type = 1;
  inline bool has_data_type() const;
  inline void clear_data_type();
  static const int kDataTypeFieldNumber = 1;
  inline const ::std::string& data_type() const;
  inline void set_data_type(const ::std::string& value);
  inline void set_data_type(const char* value);
  inline void set_data_type(const void* value, size_t size);
  inline ::std::string* mutable_data_type();
  
  // repeated .ztc.interface.GeneralTransInfo trans_info_list = 2;
  inline int trans_info_list_size() const;
  inline void clear_trans_info_list();
  static const int kTransInfoListFieldNumber = 2;
  inline const ::ztc::interface::GeneralTransInfo& trans_info_list(int index) const;
  inline ::ztc::interface::GeneralTransInfo* mutable_trans_info_list(int index);
  inline ::ztc::interface::GeneralTransInfo* add_trans_info_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::GeneralTransInfo >&
      trans_info_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::GeneralTransInfo >*
      mutable_trans_info_list();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.GeneralTransData)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* data_type_;
  static const ::std::string _default_data_type_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::GeneralTransInfo > trans_info_list_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static GeneralTransData* default_instance_;
};
// -------------------------------------------------------------------

class SrcResult : public ::google::protobuf::Message {
 public:
  SrcResult();
  virtual ~SrcResult();
  
  SrcResult(const SrcResult& from);
  
  inline SrcResult& operator=(const SrcResult& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SrcResult& default_instance();
  
  void Swap(SrcResult* other);
  
  // implements Message ----------------------------------------------
  
  SrcResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SrcResult& from);
  void MergeFrom(const SrcResult& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 srcid = 1;
  inline bool has_srcid() const;
  inline void clear_srcid();
  static const int kSrcidFieldNumber = 1;
  inline ::google::protobuf::uint32 srcid() const;
  inline void set_srcid(::google::protobuf::uint32 value);
  
  // required uint32 cmatch = 2;
  inline bool has_cmatch() const;
  inline void clear_cmatch();
  static const int kCmatchFieldNumber = 2;
  inline ::google::protobuf::uint32 cmatch() const;
  inline void set_cmatch(::google::protobuf::uint32 value);
  
  // repeated .ztc.interface.ZtcAdvInfo ztc_adv_info = 3;
  inline int ztc_adv_info_size() const;
  inline void clear_ztc_adv_info();
  static const int kZtcAdvInfoFieldNumber = 3;
  inline const ::ztc::interface::ZtcAdvInfo& ztc_adv_info(int index) const;
  inline ::ztc::interface::ZtcAdvInfo* mutable_ztc_adv_info(int index);
  inline ::ztc::interface::ZtcAdvInfo* add_ztc_adv_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::ZtcAdvInfo >&
      ztc_adv_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::ZtcAdvInfo >*
      mutable_ztc_adv_info();
  
  // optional bytes recom_reason = 4;
  inline bool has_recom_reason() const;
  inline void clear_recom_reason();
  static const int kRecomReasonFieldNumber = 4;
  inline const ::std::string& recom_reason() const;
  inline void set_recom_reason(const ::std::string& value);
  inline void set_recom_reason(const char* value);
  inline void set_recom_reason(const void* value, size_t size);
  inline ::std::string* mutable_recom_reason();
  
  // optional int32 recom_type = 5;
  inline bool has_recom_type() const;
  inline void clear_recom_type();
  static const int kRecomTypeFieldNumber = 5;
  inline ::google::protobuf::int32 recom_type() const;
  inline void set_recom_type(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ztc.interface.SrcResult)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 srcid_;
  ::google::protobuf::uint32 cmatch_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::ZtcAdvInfo > ztc_adv_info_;
  ::std::string* recom_reason_;
  static const ::std::string _default_recom_reason_;
  ::google::protobuf::int32 recom_type_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SrcResult* default_instance_;
};
// -------------------------------------------------------------------

class NewStyleResItem : public ::google::protobuf::Message {
 public:
  NewStyleResItem();
  virtual ~NewStyleResItem();
  
  NewStyleResItem(const NewStyleResItem& from);
  
  inline NewStyleResItem& operator=(const NewStyleResItem& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const NewStyleResItem& default_instance();
  
  void Swap(NewStyleResItem* other);
  
  // implements Message ----------------------------------------------
  
  NewStyleResItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewStyleResItem& from);
  void MergeFrom(const NewStyleResItem& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 mt_id = 1;
  inline bool has_mt_id() const;
  inline void clear_mt_id();
  static const int kMtIdFieldNumber = 1;
  inline ::google::protobuf::uint32 mt_id() const;
  inline void set_mt_id(::google::protobuf::uint32 value);
  
  // required bytes json = 2;
  inline bool has_json() const;
  inline void clear_json();
  static const int kJsonFieldNumber = 2;
  inline const ::std::string& json() const;
  inline void set_json(const ::std::string& value);
  inline void set_json(const char* value);
  inline void set_json(const void* value, size_t size);
  inline ::std::string* mutable_json();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.NewStyleResItem)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 mt_id_;
  ::std::string* json_;
  static const ::std::string _default_json_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static NewStyleResItem* default_instance_;
};
// -------------------------------------------------------------------

class ZtcAdvInfo : public ::google::protobuf::Message {
 public:
  ZtcAdvInfo();
  virtual ~ZtcAdvInfo();
  
  ZtcAdvInfo(const ZtcAdvInfo& from);
  
  inline ZtcAdvInfo& operator=(const ZtcAdvInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZtcAdvInfo& default_instance();
  
  void Swap(ZtcAdvInfo* other);
  
  // implements Message ----------------------------------------------
  
  ZtcAdvInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZtcAdvInfo& from);
  void MergeFrom(const ZtcAdvInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .ztc.interface.BsAdvInfo adv_info = 1;
  inline bool has_adv_info() const;
  inline void clear_adv_info();
  static const int kAdvInfoFieldNumber = 1;
  inline const ::ztc::interface::BsAdvInfo& adv_info() const;
  inline ::ztc::interface::BsAdvInfo* mutable_adv_info();
  
  // required bytes rcv_url = 2;
  inline bool has_rcv_url() const;
  inline void clear_rcv_url();
  static const int kRcvUrlFieldNumber = 2;
  inline const ::std::string& rcv_url() const;
  inline void set_rcv_url(const ::std::string& value);
  inline void set_rcv_url(const char* value);
  inline void set_rcv_url(const void* value, size_t size);
  inline ::std::string* mutable_rcv_url();
  
  // optional bytes tsmcid = 3;
  inline bool has_tsmcid() const;
  inline void clear_tsmcid();
  static const int kTsmcidFieldNumber = 3;
  inline const ::std::string& tsmcid() const;
  inline void set_tsmcid(const ::std::string& value);
  inline void set_tsmcid(const char* value);
  inline void set_tsmcid(const void* value, size_t size);
  inline ::std::string* mutable_tsmcid();
  
  // optional bytes channel_content = 4;
  inline bool has_channel_content() const;
  inline void clear_channel_content();
  static const int kChannelContentFieldNumber = 4;
  inline const ::std::string& channel_content() const;
  inline void set_channel_content(const ::std::string& value);
  inline void set_channel_content(const char* value);
  inline void set_channel_content(const void* value, size_t size);
  inline ::std::string* mutable_channel_content();
  
  // optional bytes tiny_url = 5;
  inline bool has_tiny_url() const;
  inline void clear_tiny_url();
  static const int kTinyUrlFieldNumber = 5;
  inline const ::std::string& tiny_url() const;
  inline void set_tiny_url(const ::std::string& value);
  inline void set_tiny_url(const char* value);
  inline void set_tiny_url(const void* value, size_t size);
  inline ::std::string* mutable_tiny_url();
  
  // optional uint64 charge_id = 6;
  inline bool has_charge_id() const;
  inline void clear_charge_id();
  static const int kChargeIdFieldNumber = 6;
  inline ::google::protobuf::uint64 charge_id() const;
  inline void set_charge_id(::google::protobuf::uint64 value);
  
  // repeated .ztc.interface.NewStyleResItem nst_items = 7;
  inline int nst_items_size() const;
  inline void clear_nst_items();
  static const int kNstItemsFieldNumber = 7;
  inline const ::ztc::interface::NewStyleResItem& nst_items(int index) const;
  inline ::ztc::interface::NewStyleResItem* mutable_nst_items(int index);
  inline ::ztc::interface::NewStyleResItem* add_nst_items();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::NewStyleResItem >&
      nst_items() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::NewStyleResItem >*
      mutable_nst_items();
  
  // optional uint32 ctr = 8;
  inline bool has_ctr() const;
  inline void clear_ctr();
  static const int kCtrFieldNumber = 8;
  inline ::google::protobuf::uint32 ctr() const;
  inline void set_ctr(::google::protobuf::uint32 value);
  
  // optional uint32 cvr = 9;
  inline bool has_cvr() const;
  inline void clear_cvr();
  static const int kCvrFieldNumber = 9;
  inline ::google::protobuf::uint32 cvr() const;
  inline void set_cvr(::google::protobuf::uint32 value);
  
  // optional .ztc.interface.ZtcCsInfo ztc_cs_info = 10;
  inline bool has_ztc_cs_info() const;
  inline void clear_ztc_cs_info();
  static const int kZtcCsInfoFieldNumber = 10;
  inline const ::ztc::interface::ZtcCsInfo& ztc_cs_info() const;
  inline ::ztc::interface::ZtcCsInfo* mutable_ztc_cs_info();
  
  // optional bytes feed_title_tagid = 11;
  inline bool has_feed_title_tagid() const;
  inline void clear_feed_title_tagid();
  static const int kFeedTitleTagidFieldNumber = 11;
  inline const ::std::string& feed_title_tagid() const;
  inline void set_feed_title_tagid(const ::std::string& value);
  inline void set_feed_title_tagid(const char* value);
  inline void set_feed_title_tagid(const void* value, size_t size);
  inline ::std::string* mutable_feed_title_tagid();
  
  // optional bytes feed_poi_distance = 12;
  inline bool has_feed_poi_distance() const;
  inline void clear_feed_poi_distance();
  static const int kFeedPoiDistanceFieldNumber = 12;
  inline const ::std::string& feed_poi_distance() const;
  inline void set_feed_poi_distance(const ::std::string& value);
  inline void set_feed_poi_distance(const char* value);
  inline void set_feed_poi_distance(const void* value, size_t size);
  inline ::std::string* mutable_feed_poi_distance();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.ZtcAdvInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ztc::interface::BsAdvInfo* adv_info_;
  ::std::string* rcv_url_;
  static const ::std::string _default_rcv_url_;
  ::std::string* tsmcid_;
  static const ::std::string _default_tsmcid_;
  ::std::string* channel_content_;
  static const ::std::string _default_channel_content_;
  ::std::string* tiny_url_;
  static const ::std::string _default_tiny_url_;
  ::google::protobuf::uint64 charge_id_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::NewStyleResItem > nst_items_;
  ::google::protobuf::uint32 ctr_;
  ::google::protobuf::uint32 cvr_;
  ::ztc::interface::ZtcCsInfo* ztc_cs_info_;
  ::std::string* feed_title_tagid_;
  static const ::std::string _default_feed_title_tagid_;
  ::std::string* feed_poi_distance_;
  static const ::std::string _default_feed_poi_distance_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ZtcAdvInfo* default_instance_;
};
// -------------------------------------------------------------------

class ZtcCsInfo : public ::google::protobuf::Message {
 public:
  ZtcCsInfo();
  virtual ~ZtcCsInfo();
  
  ZtcCsInfo(const ZtcCsInfo& from);
  
  inline ZtcCsInfo& operator=(const ZtcCsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZtcCsInfo& default_instance();
  
  void Swap(ZtcCsInfo* other);
  
  // implements Message ----------------------------------------------
  
  ZtcCsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZtcCsInfo& from);
  void MergeFrom(const ZtcCsInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ztc.interface.CsSearchResults cs_search_results = 1;
  inline int cs_search_results_size() const;
  inline void clear_cs_search_results();
  static const int kCsSearchResultsFieldNumber = 1;
  inline const ::ztc::interface::CsSearchResults& cs_search_results(int index) const;
  inline ::ztc::interface::CsSearchResults* mutable_cs_search_results(int index);
  inline ::ztc::interface::CsSearchResults* add_cs_search_results();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::CsSearchResults >&
      cs_search_results() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::CsSearchResults >*
      mutable_cs_search_results();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.ZtcCsInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::CsSearchResults > cs_search_results_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ZtcCsInfo* default_instance_;
};
// -------------------------------------------------------------------

class CsSearchResults : public ::google::protobuf::Message {
 public:
  CsSearchResults();
  virtual ~CsSearchResults();
  
  CsSearchResults(const CsSearchResults& from);
  
  inline CsSearchResults& operator=(const CsSearchResults& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CsSearchResults& default_instance();
  
  void Swap(CsSearchResults* other);
  
  // implements Message ----------------------------------------------
  
  CsSearchResults* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CsSearchResults& from);
  void MergeFrom(const CsSearchResults& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 service_id = 1;
  inline bool has_service_id() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 1;
  inline ::google::protobuf::uint64 service_id() const;
  inline void set_service_id(::google::protobuf::uint64 value);
  
  // optional uint64 target_id = 2;
  inline bool has_target_id() const;
  inline void clear_target_id();
  static const int kTargetIdFieldNumber = 2;
  inline ::google::protobuf::uint64 target_id() const;
  inline void set_target_id(::google::protobuf::uint64 value);
  
  // optional int64 score = 3;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 3;
  inline ::google::protobuf::int64 score() const;
  inline void set_score(::google::protobuf::int64 value);
  
  // optional uint64 service_id_resouce = 4;
  inline bool has_service_id_resouce() const;
  inline void clear_service_id_resouce();
  static const int kServiceIdResouceFieldNumber = 4;
  inline ::google::protobuf::uint64 service_id_resouce() const;
  inline void set_service_id_resouce(::google::protobuf::uint64 value);
  
  // @@protoc_insertion_point(class_scope:ztc.interface.CsSearchResults)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 service_id_;
  ::google::protobuf::uint64 target_id_;
  ::google::protobuf::int64 score_;
  ::google::protobuf::uint64 service_id_resouce_;
  friend void  protobuf_AddDesc_ztc_5finterface_2eproto();
  friend void protobuf_AssignDesc_ztc_5finterface_2eproto();
  friend void protobuf_ShutdownFile_ztc_5finterface_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CsSearchResults* default_instance_;
};
// ===================================================================


// ===================================================================

// ZtcRequest

// required bytes channel_page = 1;
inline bool ZtcRequest::has_channel_page() const {
  return _has_bit(0);
}
inline void ZtcRequest::clear_channel_page() {
  if (channel_page_ != &_default_channel_page_) {
    channel_page_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ZtcRequest::channel_page() const {
  return *channel_page_;
}
inline void ZtcRequest::set_channel_page(const ::std::string& value) {
  _set_bit(0);
  if (channel_page_ == &_default_channel_page_) {
    channel_page_ = new ::std::string;
  }
  channel_page_->assign(value);
}
inline void ZtcRequest::set_channel_page(const char* value) {
  _set_bit(0);
  if (channel_page_ == &_default_channel_page_) {
    channel_page_ = new ::std::string;
  }
  channel_page_->assign(value);
}
inline void ZtcRequest::set_channel_page(const void* value, size_t size) {
  _set_bit(0);
  if (channel_page_ == &_default_channel_page_) {
    channel_page_ = new ::std::string;
  }
  channel_page_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcRequest::mutable_channel_page() {
  _set_bit(0);
  if (channel_page_ == &_default_channel_page_) {
    channel_page_ = new ::std::string;
  }
  return channel_page_;
}

// optional uint64 search_id = 2;
inline bool ZtcRequest::has_search_id() const {
  return _has_bit(1);
}
inline void ZtcRequest::clear_search_id() {
  search_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 ZtcRequest::search_id() const {
  return search_id_;
}
inline void ZtcRequest::set_search_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  search_id_ = value;
}

// optional uint32 page_num = 3;
inline bool ZtcRequest::has_page_num() const {
  return _has_bit(2);
}
inline void ZtcRequest::clear_page_num() {
  page_num_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 ZtcRequest::page_num() const {
  return page_num_;
}
inline void ZtcRequest::set_page_num(::google::protobuf::uint32 value) {
  _set_bit(2);
  page_num_ = value;
}

// optional uint32 retry_num = 4;
inline bool ZtcRequest::has_retry_num() const {
  return _has_bit(3);
}
inline void ZtcRequest::clear_retry_num() {
  retry_num_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 ZtcRequest::retry_num() const {
  return retry_num_;
}
inline void ZtcRequest::set_retry_num(::google::protobuf::uint32 value) {
  _set_bit(3);
  retry_num_ = value;
}

// optional bytes url = 5;
inline bool ZtcRequest::has_url() const {
  return _has_bit(4);
}
inline void ZtcRequest::clear_url() {
  if (url_ != &_default_url_) {
    url_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& ZtcRequest::url() const {
  return *url_;
}
inline void ZtcRequest::set_url(const ::std::string& value) {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ZtcRequest::set_url(const char* value) {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void ZtcRequest::set_url(const void* value, size_t size) {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcRequest::mutable_url() {
  _set_bit(4);
  if (url_ == &_default_url_) {
    url_ = new ::std::string;
  }
  return url_;
}

// optional bytes refer = 6;
inline bool ZtcRequest::has_refer() const {
  return _has_bit(5);
}
inline void ZtcRequest::clear_refer() {
  if (refer_ != &_default_refer_) {
    refer_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& ZtcRequest::refer() const {
  return *refer_;
}
inline void ZtcRequest::set_refer(const ::std::string& value) {
  _set_bit(5);
  if (refer_ == &_default_refer_) {
    refer_ = new ::std::string;
  }
  refer_->assign(value);
}
inline void ZtcRequest::set_refer(const char* value) {
  _set_bit(5);
  if (refer_ == &_default_refer_) {
    refer_ = new ::std::string;
  }
  refer_->assign(value);
}
inline void ZtcRequest::set_refer(const void* value, size_t size) {
  _set_bit(5);
  if (refer_ == &_default_refer_) {
    refer_ = new ::std::string;
  }
  refer_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcRequest::mutable_refer() {
  _set_bit(5);
  if (refer_ == &_default_refer_) {
    refer_ = new ::std::string;
  }
  return refer_;
}

// optional bytes charge_name = 7;
inline bool ZtcRequest::has_charge_name() const {
  return _has_bit(6);
}
inline void ZtcRequest::clear_charge_name() {
  if (charge_name_ != &_default_charge_name_) {
    charge_name_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& ZtcRequest::charge_name() const {
  return *charge_name_;
}
inline void ZtcRequest::set_charge_name(const ::std::string& value) {
  _set_bit(6);
  if (charge_name_ == &_default_charge_name_) {
    charge_name_ = new ::std::string;
  }
  charge_name_->assign(value);
}
inline void ZtcRequest::set_charge_name(const char* value) {
  _set_bit(6);
  if (charge_name_ == &_default_charge_name_) {
    charge_name_ = new ::std::string;
  }
  charge_name_->assign(value);
}
inline void ZtcRequest::set_charge_name(const void* value, size_t size) {
  _set_bit(6);
  if (charge_name_ == &_default_charge_name_) {
    charge_name_ = new ::std::string;
  }
  charge_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcRequest::mutable_charge_name() {
  _set_bit(6);
  if (charge_name_ == &_default_charge_name_) {
    charge_name_ = new ::std::string;
  }
  return charge_name_;
}

// optional bytes from = 8;
inline bool ZtcRequest::has_from() const {
  return _has_bit(7);
}
inline void ZtcRequest::clear_from() {
  if (from_ != &_default_from_) {
    from_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& ZtcRequest::from() const {
  return *from_;
}
inline void ZtcRequest::set_from(const ::std::string& value) {
  _set_bit(7);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void ZtcRequest::set_from(const char* value) {
  _set_bit(7);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void ZtcRequest::set_from(const void* value, size_t size) {
  _set_bit(7);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcRequest::mutable_from() {
  _set_bit(7);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  return from_;
}

// optional .ztc.interface.BusinessInfo business_info = 9;
inline bool ZtcRequest::has_business_info() const {
  return _has_bit(8);
}
inline void ZtcRequest::clear_business_info() {
  if (business_info_ != NULL) business_info_->::ztc::interface::BusinessInfo::Clear();
  _clear_bit(8);
}
inline const ::ztc::interface::BusinessInfo& ZtcRequest::business_info() const {
  return business_info_ != NULL ? *business_info_ : *default_instance_->business_info_;
}
inline ::ztc::interface::BusinessInfo* ZtcRequest::mutable_business_info() {
  _set_bit(8);
  if (business_info_ == NULL) business_info_ = new ::ztc::interface::BusinessInfo;
  return business_info_;
}

// optional .ztc.interface.UserInfo user_info = 10;
inline bool ZtcRequest::has_user_info() const {
  return _has_bit(9);
}
inline void ZtcRequest::clear_user_info() {
  if (user_info_ != NULL) user_info_->::ztc::interface::UserInfo::Clear();
  _clear_bit(9);
}
inline const ::ztc::interface::UserInfo& ZtcRequest::user_info() const {
  return user_info_ != NULL ? *user_info_ : *default_instance_->user_info_;
}
inline ::ztc::interface::UserInfo* ZtcRequest::mutable_user_info() {
  _set_bit(9);
  if (user_info_ == NULL) user_info_ = new ::ztc::interface::UserInfo;
  return user_info_;
}

// optional .ztc.interface.DeviceInfo device_info = 11;
inline bool ZtcRequest::has_device_info() const {
  return _has_bit(10);
}
inline void ZtcRequest::clear_device_info() {
  if (device_info_ != NULL) device_info_->::ztc::interface::DeviceInfo::Clear();
  _clear_bit(10);
}
inline const ::ztc::interface::DeviceInfo& ZtcRequest::device_info() const {
  return device_info_ != NULL ? *device_info_ : *default_instance_->device_info_;
}
inline ::ztc::interface::DeviceInfo* ZtcRequest::mutable_device_info() {
  _set_bit(10);
  if (device_info_ == NULL) device_info_ = new ::ztc::interface::DeviceInfo;
  return device_info_;
}

// optional .ztc.interface.AddInfo add_info = 12;
inline bool ZtcRequest::has_add_info() const {
  return _has_bit(11);
}
inline void ZtcRequest::clear_add_info() {
  if (add_info_ != NULL) add_info_->::ztc::interface::AddInfo::Clear();
  _clear_bit(11);
}
inline const ::ztc::interface::AddInfo& ZtcRequest::add_info() const {
  return add_info_ != NULL ? *add_info_ : *default_instance_->add_info_;
}
inline ::ztc::interface::AddInfo* ZtcRequest::mutable_add_info() {
  _set_bit(11);
  if (add_info_ == NULL) add_info_ = new ::ztc::interface::AddInfo;
  return add_info_;
}

// optional .ztc.interface.GeneralTransData general_trans_data = 13;
inline bool ZtcRequest::has_general_trans_data() const {
  return _has_bit(12);
}
inline void ZtcRequest::clear_general_trans_data() {
  if (general_trans_data_ != NULL) general_trans_data_->::ztc::interface::GeneralTransData::Clear();
  _clear_bit(12);
}
inline const ::ztc::interface::GeneralTransData& ZtcRequest::general_trans_data() const {
  return general_trans_data_ != NULL ? *general_trans_data_ : *default_instance_->general_trans_data_;
}
inline ::ztc::interface::GeneralTransData* ZtcRequest::mutable_general_trans_data() {
  _set_bit(12);
  if (general_trans_data_ == NULL) general_trans_data_ = new ::ztc::interface::GeneralTransData;
  return general_trans_data_;
}

// repeated .bizus_basemap.SearchPoi basemap_poi = 14;
inline int ZtcRequest::basemap_poi_size() const {
  return basemap_poi_.size();
}
inline void ZtcRequest::clear_basemap_poi() {
  basemap_poi_.Clear();
}
inline const ::bizus_basemap::SearchPoi& ZtcRequest::basemap_poi(int index) const {
  return basemap_poi_.Get(index);
}
inline ::bizus_basemap::SearchPoi* ZtcRequest::mutable_basemap_poi(int index) {
  return basemap_poi_.Mutable(index);
}
inline ::bizus_basemap::SearchPoi* ZtcRequest::add_basemap_poi() {
  return basemap_poi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >&
ZtcRequest::basemap_poi() const {
  return basemap_poi_;
}
inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >*
ZtcRequest::mutable_basemap_poi() {
  return &basemap_poi_;
}

// optional .ztc.interface.TargetingInfo targeting_info = 15;
inline bool ZtcRequest::has_targeting_info() const {
  return _has_bit(14);
}
inline void ZtcRequest::clear_targeting_info() {
  if (targeting_info_ != NULL) targeting_info_->::ztc::interface::TargetingInfo::Clear();
  _clear_bit(14);
}
inline const ::ztc::interface::TargetingInfo& ZtcRequest::targeting_info() const {
  return targeting_info_ != NULL ? *targeting_info_ : *default_instance_->targeting_info_;
}
inline ::ztc::interface::TargetingInfo* ZtcRequest::mutable_targeting_info() {
  _set_bit(14);
  if (targeting_info_ == NULL) targeting_info_ = new ::ztc::interface::TargetingInfo;
  return targeting_info_;
}

// optional .BidRequest feed_request = 16;
inline bool ZtcRequest::has_feed_request() const {
  return _has_bit(15);
}
inline void ZtcRequest::clear_feed_request() {
  if (feed_request_ != NULL) feed_request_->::BidRequest::Clear();
  _clear_bit(15);
}
inline const ::BidRequest& ZtcRequest::feed_request() const {
  return feed_request_ != NULL ? *feed_request_ : *default_instance_->feed_request_;
}
inline ::BidRequest* ZtcRequest::mutable_feed_request() {
  _set_bit(15);
  if (feed_request_ == NULL) feed_request_ = new ::BidRequest;
  return feed_request_;
}

// -------------------------------------------------------------------

// BusinessInfo

// optional bytes query = 1;
inline bool BusinessInfo::has_query() const {
  return _has_bit(0);
}
inline void BusinessInfo::clear_query() {
  if (query_ != &_default_query_) {
    query_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BusinessInfo::query() const {
  return *query_;
}
inline void BusinessInfo::set_query(const ::std::string& value) {
  _set_bit(0);
  if (query_ == &_default_query_) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void BusinessInfo::set_query(const char* value) {
  _set_bit(0);
  if (query_ == &_default_query_) {
    query_ = new ::std::string;
  }
  query_->assign(value);
}
inline void BusinessInfo::set_query(const void* value, size_t size) {
  _set_bit(0);
  if (query_ == &_default_query_) {
    query_ = new ::std::string;
  }
  query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::mutable_query() {
  _set_bit(0);
  if (query_ == &_default_query_) {
    query_ = new ::std::string;
  }
  return query_;
}

// repeated uint32 trade1 = 2;
inline int BusinessInfo::trade1_size() const {
  return trade1_.size();
}
inline void BusinessInfo::clear_trade1() {
  trade1_.Clear();
}
inline ::google::protobuf::uint32 BusinessInfo::trade1(int index) const {
  return trade1_.Get(index);
}
inline void BusinessInfo::set_trade1(int index, ::google::protobuf::uint32 value) {
  trade1_.Set(index, value);
}
inline void BusinessInfo::add_trade1(::google::protobuf::uint32 value) {
  trade1_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BusinessInfo::trade1() const {
  return trade1_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BusinessInfo::mutable_trade1() {
  return &trade1_;
}

// repeated uint32 trade2 = 3;
inline int BusinessInfo::trade2_size() const {
  return trade2_.size();
}
inline void BusinessInfo::clear_trade2() {
  trade2_.Clear();
}
inline ::google::protobuf::uint32 BusinessInfo::trade2(int index) const {
  return trade2_.Get(index);
}
inline void BusinessInfo::set_trade2(int index, ::google::protobuf::uint32 value) {
  trade2_.Set(index, value);
}
inline void BusinessInfo::add_trade2(::google::protobuf::uint32 value) {
  trade2_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BusinessInfo::trade2() const {
  return trade2_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BusinessInfo::mutable_trade2() {
  return &trade2_;
}

// repeated uint32 trade3 = 4;
inline int BusinessInfo::trade3_size() const {
  return trade3_.size();
}
inline void BusinessInfo::clear_trade3() {
  trade3_.Clear();
}
inline ::google::protobuf::uint32 BusinessInfo::trade3(int index) const {
  return trade3_.Get(index);
}
inline void BusinessInfo::set_trade3(int index, ::google::protobuf::uint32 value) {
  trade3_.Set(index, value);
}
inline void BusinessInfo::add_trade3(::google::protobuf::uint32 value) {
  trade3_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
BusinessInfo::trade3() const {
  return trade3_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
BusinessInfo::mutable_trade3() {
  return &trade3_;
}

// repeated bytes pre_poi_id = 5;
inline int BusinessInfo::pre_poi_id_size() const {
  return pre_poi_id_.size();
}
inline void BusinessInfo::clear_pre_poi_id() {
  pre_poi_id_.Clear();
}
inline const ::std::string& BusinessInfo::pre_poi_id(int index) const {
  return pre_poi_id_.Get(index);
}
inline ::std::string* BusinessInfo::mutable_pre_poi_id(int index) {
  return pre_poi_id_.Mutable(index);
}
inline void BusinessInfo::set_pre_poi_id(int index, const ::std::string& value) {
  pre_poi_id_.Mutable(index)->assign(value);
}
inline void BusinessInfo::set_pre_poi_id(int index, const char* value) {
  pre_poi_id_.Mutable(index)->assign(value);
}
inline void BusinessInfo::set_pre_poi_id(int index, const void* value, size_t size) {
  pre_poi_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::add_pre_poi_id() {
  return pre_poi_id_.Add();
}
inline void BusinessInfo::add_pre_poi_id(const ::std::string& value) {
  pre_poi_id_.Add()->assign(value);
}
inline void BusinessInfo::add_pre_poi_id(const char* value) {
  pre_poi_id_.Add()->assign(value);
}
inline void BusinessInfo::add_pre_poi_id(const void* value, size_t size) {
  pre_poi_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BusinessInfo::pre_poi_id() const {
  return pre_poi_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BusinessInfo::mutable_pre_poi_id() {
  return &pre_poi_id_;
}

// optional bytes select_condition = 6;
inline bool BusinessInfo::has_select_condition() const {
  return _has_bit(5);
}
inline void BusinessInfo::clear_select_condition() {
  if (select_condition_ != &_default_select_condition_) {
    select_condition_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& BusinessInfo::select_condition() const {
  return *select_condition_;
}
inline void BusinessInfo::set_select_condition(const ::std::string& value) {
  _set_bit(5);
  if (select_condition_ == &_default_select_condition_) {
    select_condition_ = new ::std::string;
  }
  select_condition_->assign(value);
}
inline void BusinessInfo::set_select_condition(const char* value) {
  _set_bit(5);
  if (select_condition_ == &_default_select_condition_) {
    select_condition_ = new ::std::string;
  }
  select_condition_->assign(value);
}
inline void BusinessInfo::set_select_condition(const void* value, size_t size) {
  _set_bit(5);
  if (select_condition_ == &_default_select_condition_) {
    select_condition_ = new ::std::string;
  }
  select_condition_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::mutable_select_condition() {
  _set_bit(5);
  if (select_condition_ == &_default_select_condition_) {
    select_condition_ = new ::std::string;
  }
  return select_condition_;
}

// optional bytes hit_brand_query = 7;
inline bool BusinessInfo::has_hit_brand_query() const {
  return _has_bit(6);
}
inline void BusinessInfo::clear_hit_brand_query() {
  if (hit_brand_query_ != &_default_hit_brand_query_) {
    hit_brand_query_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& BusinessInfo::hit_brand_query() const {
  return *hit_brand_query_;
}
inline void BusinessInfo::set_hit_brand_query(const ::std::string& value) {
  _set_bit(6);
  if (hit_brand_query_ == &_default_hit_brand_query_) {
    hit_brand_query_ = new ::std::string;
  }
  hit_brand_query_->assign(value);
}
inline void BusinessInfo::set_hit_brand_query(const char* value) {
  _set_bit(6);
  if (hit_brand_query_ == &_default_hit_brand_query_) {
    hit_brand_query_ = new ::std::string;
  }
  hit_brand_query_->assign(value);
}
inline void BusinessInfo::set_hit_brand_query(const void* value, size_t size) {
  _set_bit(6);
  if (hit_brand_query_ == &_default_hit_brand_query_) {
    hit_brand_query_ = new ::std::string;
  }
  hit_brand_query_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::mutable_hit_brand_query() {
  _set_bit(6);
  if (hit_brand_query_ == &_default_hit_brand_query_) {
    hit_brand_query_ = new ::std::string;
  }
  return hit_brand_query_;
}

// optional uint32 req_type = 8;
inline bool BusinessInfo::has_req_type() const {
  return _has_bit(7);
}
inline void BusinessInfo::clear_req_type() {
  req_type_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 BusinessInfo::req_type() const {
  return req_type_;
}
inline void BusinessInfo::set_req_type(::google::protobuf::uint32 value) {
  _set_bit(7);
  req_type_ = value;
}

// repeated bytes pre_deal_id = 9;
inline int BusinessInfo::pre_deal_id_size() const {
  return pre_deal_id_.size();
}
inline void BusinessInfo::clear_pre_deal_id() {
  pre_deal_id_.Clear();
}
inline const ::std::string& BusinessInfo::pre_deal_id(int index) const {
  return pre_deal_id_.Get(index);
}
inline ::std::string* BusinessInfo::mutable_pre_deal_id(int index) {
  return pre_deal_id_.Mutable(index);
}
inline void BusinessInfo::set_pre_deal_id(int index, const ::std::string& value) {
  pre_deal_id_.Mutable(index)->assign(value);
}
inline void BusinessInfo::set_pre_deal_id(int index, const char* value) {
  pre_deal_id_.Mutable(index)->assign(value);
}
inline void BusinessInfo::set_pre_deal_id(int index, const void* value, size_t size) {
  pre_deal_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::add_pre_deal_id() {
  return pre_deal_id_.Add();
}
inline void BusinessInfo::add_pre_deal_id(const ::std::string& value) {
  pre_deal_id_.Add()->assign(value);
}
inline void BusinessInfo::add_pre_deal_id(const char* value) {
  pre_deal_id_.Add()->assign(value);
}
inline void BusinessInfo::add_pre_deal_id(const void* value, size_t size) {
  pre_deal_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BusinessInfo::pre_deal_id() const {
  return pre_deal_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BusinessInfo::mutable_pre_deal_id() {
  return &pre_deal_id_;
}

// repeated bytes reject_deal_id = 10;
inline int BusinessInfo::reject_deal_id_size() const {
  return reject_deal_id_.size();
}
inline void BusinessInfo::clear_reject_deal_id() {
  reject_deal_id_.Clear();
}
inline const ::std::string& BusinessInfo::reject_deal_id(int index) const {
  return reject_deal_id_.Get(index);
}
inline ::std::string* BusinessInfo::mutable_reject_deal_id(int index) {
  return reject_deal_id_.Mutable(index);
}
inline void BusinessInfo::set_reject_deal_id(int index, const ::std::string& value) {
  reject_deal_id_.Mutable(index)->assign(value);
}
inline void BusinessInfo::set_reject_deal_id(int index, const char* value) {
  reject_deal_id_.Mutable(index)->assign(value);
}
inline void BusinessInfo::set_reject_deal_id(int index, const void* value, size_t size) {
  reject_deal_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::add_reject_deal_id() {
  return reject_deal_id_.Add();
}
inline void BusinessInfo::add_reject_deal_id(const ::std::string& value) {
  reject_deal_id_.Add()->assign(value);
}
inline void BusinessInfo::add_reject_deal_id(const char* value) {
  reject_deal_id_.Add()->assign(value);
}
inline void BusinessInfo::add_reject_deal_id(const void* value, size_t size) {
  reject_deal_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
BusinessInfo::reject_deal_id() const {
  return reject_deal_id_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
BusinessInfo::mutable_reject_deal_id() {
  return &reject_deal_id_;
}

// optional uint32 start_idx = 11;
inline bool BusinessInfo::has_start_idx() const {
  return _has_bit(10);
}
inline void BusinessInfo::clear_start_idx() {
  start_idx_ = 0u;
  _clear_bit(10);
}
inline ::google::protobuf::uint32 BusinessInfo::start_idx() const {
  return start_idx_;
}
inline void BusinessInfo::set_start_idx(::google::protobuf::uint32 value) {
  _set_bit(10);
  start_idx_ = value;
}

// repeated .ztc.interface.SrcAdnum src_adnum = 12;
inline int BusinessInfo::src_adnum_size() const {
  return src_adnum_.size();
}
inline void BusinessInfo::clear_src_adnum() {
  src_adnum_.Clear();
}
inline const ::ztc::interface::SrcAdnum& BusinessInfo::src_adnum(int index) const {
  return src_adnum_.Get(index);
}
inline ::ztc::interface::SrcAdnum* BusinessInfo::mutable_src_adnum(int index) {
  return src_adnum_.Mutable(index);
}
inline ::ztc::interface::SrcAdnum* BusinessInfo::add_src_adnum() {
  return src_adnum_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum >&
BusinessInfo::src_adnum() const {
  return src_adnum_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum >*
BusinessInfo::mutable_src_adnum() {
  return &src_adnum_;
}

// optional bytes cur_deal_id = 13;
inline bool BusinessInfo::has_cur_deal_id() const {
  return _has_bit(12);
}
inline void BusinessInfo::clear_cur_deal_id() {
  if (cur_deal_id_ != &_default_cur_deal_id_) {
    cur_deal_id_->clear();
  }
  _clear_bit(12);
}
inline const ::std::string& BusinessInfo::cur_deal_id() const {
  return *cur_deal_id_;
}
inline void BusinessInfo::set_cur_deal_id(const ::std::string& value) {
  _set_bit(12);
  if (cur_deal_id_ == &_default_cur_deal_id_) {
    cur_deal_id_ = new ::std::string;
  }
  cur_deal_id_->assign(value);
}
inline void BusinessInfo::set_cur_deal_id(const char* value) {
  _set_bit(12);
  if (cur_deal_id_ == &_default_cur_deal_id_) {
    cur_deal_id_ = new ::std::string;
  }
  cur_deal_id_->assign(value);
}
inline void BusinessInfo::set_cur_deal_id(const void* value, size_t size) {
  _set_bit(12);
  if (cur_deal_id_ == &_default_cur_deal_id_) {
    cur_deal_id_ = new ::std::string;
  }
  cur_deal_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::mutable_cur_deal_id() {
  _set_bit(12);
  if (cur_deal_id_ == &_default_cur_deal_id_) {
    cur_deal_id_ = new ::std::string;
  }
  return cur_deal_id_;
}

// optional bytes cur_poi_id = 14;
inline bool BusinessInfo::has_cur_poi_id() const {
  return _has_bit(13);
}
inline void BusinessInfo::clear_cur_poi_id() {
  if (cur_poi_id_ != &_default_cur_poi_id_) {
    cur_poi_id_->clear();
  }
  _clear_bit(13);
}
inline const ::std::string& BusinessInfo::cur_poi_id() const {
  return *cur_poi_id_;
}
inline void BusinessInfo::set_cur_poi_id(const ::std::string& value) {
  _set_bit(13);
  if (cur_poi_id_ == &_default_cur_poi_id_) {
    cur_poi_id_ = new ::std::string;
  }
  cur_poi_id_->assign(value);
}
inline void BusinessInfo::set_cur_poi_id(const char* value) {
  _set_bit(13);
  if (cur_poi_id_ == &_default_cur_poi_id_) {
    cur_poi_id_ = new ::std::string;
  }
  cur_poi_id_->assign(value);
}
inline void BusinessInfo::set_cur_poi_id(const void* value, size_t size) {
  _set_bit(13);
  if (cur_poi_id_ == &_default_cur_poi_id_) {
    cur_poi_id_ = new ::std::string;
  }
  cur_poi_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::mutable_cur_poi_id() {
  _set_bit(13);
  if (cur_poi_id_ == &_default_cur_poi_id_) {
    cur_poi_id_ = new ::std::string;
  }
  return cur_poi_id_;
}

// optional bool is_default_recom = 15;
inline bool BusinessInfo::has_is_default_recom() const {
  return _has_bit(14);
}
inline void BusinessInfo::clear_is_default_recom() {
  is_default_recom_ = false;
  _clear_bit(14);
}
inline bool BusinessInfo::is_default_recom() const {
  return is_default_recom_;
}
inline void BusinessInfo::set_is_default_recom(bool value) {
  _set_bit(14);
  is_default_recom_ = value;
}

// optional bytes poi_gps = 16;
inline bool BusinessInfo::has_poi_gps() const {
  return _has_bit(15);
}
inline void BusinessInfo::clear_poi_gps() {
  if (poi_gps_ != &_default_poi_gps_) {
    poi_gps_->clear();
  }
  _clear_bit(15);
}
inline const ::std::string& BusinessInfo::poi_gps() const {
  return *poi_gps_;
}
inline void BusinessInfo::set_poi_gps(const ::std::string& value) {
  _set_bit(15);
  if (poi_gps_ == &_default_poi_gps_) {
    poi_gps_ = new ::std::string;
  }
  poi_gps_->assign(value);
}
inline void BusinessInfo::set_poi_gps(const char* value) {
  _set_bit(15);
  if (poi_gps_ == &_default_poi_gps_) {
    poi_gps_ = new ::std::string;
  }
  poi_gps_->assign(value);
}
inline void BusinessInfo::set_poi_gps(const void* value, size_t size) {
  _set_bit(15);
  if (poi_gps_ == &_default_poi_gps_) {
    poi_gps_ = new ::std::string;
  }
  poi_gps_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::mutable_poi_gps() {
  _set_bit(15);
  if (poi_gps_ == &_default_poi_gps_) {
    poi_gps_ = new ::std::string;
  }
  return poi_gps_;
}

// optional bytes std_tag = 17;
inline bool BusinessInfo::has_std_tag() const {
  return _has_bit(16);
}
inline void BusinessInfo::clear_std_tag() {
  if (std_tag_ != &_default_std_tag_) {
    std_tag_->clear();
  }
  _clear_bit(16);
}
inline const ::std::string& BusinessInfo::std_tag() const {
  return *std_tag_;
}
inline void BusinessInfo::set_std_tag(const ::std::string& value) {
  _set_bit(16);
  if (std_tag_ == &_default_std_tag_) {
    std_tag_ = new ::std::string;
  }
  std_tag_->assign(value);
}
inline void BusinessInfo::set_std_tag(const char* value) {
  _set_bit(16);
  if (std_tag_ == &_default_std_tag_) {
    std_tag_ = new ::std::string;
  }
  std_tag_->assign(value);
}
inline void BusinessInfo::set_std_tag(const void* value, size_t size) {
  _set_bit(16);
  if (std_tag_ == &_default_std_tag_) {
    std_tag_ = new ::std::string;
  }
  std_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::mutable_std_tag() {
  _set_bit(16);
  if (std_tag_ == &_default_std_tag_) {
    std_tag_ = new ::std::string;
  }
  return std_tag_;
}

// optional int32 map_query_type = 18;
inline bool BusinessInfo::has_map_query_type() const {
  return _has_bit(17);
}
inline void BusinessInfo::clear_map_query_type() {
  map_query_type_ = 0;
  _clear_bit(17);
}
inline ::google::protobuf::int32 BusinessInfo::map_query_type() const {
  return map_query_type_;
}
inline void BusinessInfo::set_map_query_type(::google::protobuf::int32 value) {
  _set_bit(17);
  map_query_type_ = value;
}

// optional uint32 map_type = 19;
inline bool BusinessInfo::has_map_type() const {
  return _has_bit(18);
}
inline void BusinessInfo::clear_map_type() {
  map_type_ = 0u;
  _clear_bit(18);
}
inline ::google::protobuf::uint32 BusinessInfo::map_type() const {
  return map_type_;
}
inline void BusinessInfo::set_map_type(::google::protobuf::uint32 value) {
  _set_bit(18);
  map_type_ = value;
}

// optional bytes map_poi_ids = 20;
inline bool BusinessInfo::has_map_poi_ids() const {
  return _has_bit(19);
}
inline void BusinessInfo::clear_map_poi_ids() {
  if (map_poi_ids_ != &_default_map_poi_ids_) {
    map_poi_ids_->clear();
  }
  _clear_bit(19);
}
inline const ::std::string& BusinessInfo::map_poi_ids() const {
  return *map_poi_ids_;
}
inline void BusinessInfo::set_map_poi_ids(const ::std::string& value) {
  _set_bit(19);
  if (map_poi_ids_ == &_default_map_poi_ids_) {
    map_poi_ids_ = new ::std::string;
  }
  map_poi_ids_->assign(value);
}
inline void BusinessInfo::set_map_poi_ids(const char* value) {
  _set_bit(19);
  if (map_poi_ids_ == &_default_map_poi_ids_) {
    map_poi_ids_ = new ::std::string;
  }
  map_poi_ids_->assign(value);
}
inline void BusinessInfo::set_map_poi_ids(const void* value, size_t size) {
  _set_bit(19);
  if (map_poi_ids_ == &_default_map_poi_ids_) {
    map_poi_ids_ = new ::std::string;
  }
  map_poi_ids_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BusinessInfo::mutable_map_poi_ids() {
  _set_bit(19);
  if (map_poi_ids_ == &_default_map_poi_ids_) {
    map_poi_ids_ = new ::std::string;
  }
  return map_poi_ids_;
}

// repeated .ztc.interface.SrcAdnum ori_src_adnum = 21;
inline int BusinessInfo::ori_src_adnum_size() const {
  return ori_src_adnum_.size();
}
inline void BusinessInfo::clear_ori_src_adnum() {
  ori_src_adnum_.Clear();
}
inline const ::ztc::interface::SrcAdnum& BusinessInfo::ori_src_adnum(int index) const {
  return ori_src_adnum_.Get(index);
}
inline ::ztc::interface::SrcAdnum* BusinessInfo::mutable_ori_src_adnum(int index) {
  return ori_src_adnum_.Mutable(index);
}
inline ::ztc::interface::SrcAdnum* BusinessInfo::add_ori_src_adnum() {
  return ori_src_adnum_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum >&
BusinessInfo::ori_src_adnum() const {
  return ori_src_adnum_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcAdnum >*
BusinessInfo::mutable_ori_src_adnum() {
  return &ori_src_adnum_;
}

// -------------------------------------------------------------------

// UserInfo

// optional bytes baidu_id = 1;
inline bool UserInfo::has_baidu_id() const {
  return _has_bit(0);
}
inline void UserInfo::clear_baidu_id() {
  if (baidu_id_ != &_default_baidu_id_) {
    baidu_id_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& UserInfo::baidu_id() const {
  return *baidu_id_;
}
inline void UserInfo::set_baidu_id(const ::std::string& value) {
  _set_bit(0);
  if (baidu_id_ == &_default_baidu_id_) {
    baidu_id_ = new ::std::string;
  }
  baidu_id_->assign(value);
}
inline void UserInfo::set_baidu_id(const char* value) {
  _set_bit(0);
  if (baidu_id_ == &_default_baidu_id_) {
    baidu_id_ = new ::std::string;
  }
  baidu_id_->assign(value);
}
inline void UserInfo::set_baidu_id(const void* value, size_t size) {
  _set_bit(0);
  if (baidu_id_ == &_default_baidu_id_) {
    baidu_id_ = new ::std::string;
  }
  baidu_id_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_baidu_id() {
  _set_bit(0);
  if (baidu_id_ == &_default_baidu_id_) {
    baidu_id_ = new ::std::string;
  }
  return baidu_id_;
}

// optional bytes cuid = 2;
inline bool UserInfo::has_cuid() const {
  return _has_bit(1);
}
inline void UserInfo::clear_cuid() {
  if (cuid_ != &_default_cuid_) {
    cuid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& UserInfo::cuid() const {
  return *cuid_;
}
inline void UserInfo::set_cuid(const ::std::string& value) {
  _set_bit(1);
  if (cuid_ == &_default_cuid_) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void UserInfo::set_cuid(const char* value) {
  _set_bit(1);
  if (cuid_ == &_default_cuid_) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void UserInfo::set_cuid(const void* value, size_t size) {
  _set_bit(1);
  if (cuid_ == &_default_cuid_) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_cuid() {
  _set_bit(1);
  if (cuid_ == &_default_cuid_) {
    cuid_ = new ::std::string;
  }
  return cuid_;
}

// optional uint64 passport_user_id = 3;
inline bool UserInfo::has_passport_user_id() const {
  return _has_bit(2);
}
inline void UserInfo::clear_passport_user_id() {
  passport_user_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::uint64 UserInfo::passport_user_id() const {
  return passport_user_id_;
}
inline void UserInfo::set_passport_user_id(::google::protobuf::uint64 value) {
  _set_bit(2);
  passport_user_id_ = value;
}

// optional uint32 user_ip = 4;
inline bool UserInfo::has_user_ip() const {
  return _has_bit(3);
}
inline void UserInfo::clear_user_ip() {
  user_ip_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 UserInfo::user_ip() const {
  return user_ip_;
}
inline void UserInfo::set_user_ip(::google::protobuf::uint32 value) {
  _set_bit(3);
  user_ip_ = value;
}

// optional bytes gps = 5;
inline bool UserInfo::has_gps() const {
  return _has_bit(4);
}
inline void UserInfo::clear_gps() {
  if (gps_ != &_default_gps_) {
    gps_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& UserInfo::gps() const {
  return *gps_;
}
inline void UserInfo::set_gps(const ::std::string& value) {
  _set_bit(4);
  if (gps_ == &_default_gps_) {
    gps_ = new ::std::string;
  }
  gps_->assign(value);
}
inline void UserInfo::set_gps(const char* value) {
  _set_bit(4);
  if (gps_ == &_default_gps_) {
    gps_ = new ::std::string;
  }
  gps_->assign(value);
}
inline void UserInfo::set_gps(const void* value, size_t size) {
  _set_bit(4);
  if (gps_ == &_default_gps_) {
    gps_ = new ::std::string;
  }
  gps_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* UserInfo::mutable_gps() {
  _set_bit(4);
  if (gps_ == &_default_gps_) {
    gps_ = new ::std::string;
  }
  return gps_;
}

// optional uint32 cityid = 6;
inline bool UserInfo::has_cityid() const {
  return _has_bit(5);
}
inline void UserInfo::clear_cityid() {
  cityid_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 UserInfo::cityid() const {
  return cityid_;
}
inline void UserInfo::set_cityid(::google::protobuf::uint32 value) {
  _set_bit(5);
  cityid_ = value;
}

// optional uint32 provinceid = 7;
inline bool UserInfo::has_provinceid() const {
  return _has_bit(6);
}
inline void UserInfo::clear_provinceid() {
  provinceid_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 UserInfo::provinceid() const {
  return provinceid_;
}
inline void UserInfo::set_provinceid(::google::protobuf::uint32 value) {
  _set_bit(6);
  provinceid_ = value;
}

// -------------------------------------------------------------------

// DeviceInfo

// optional bytes client_name = 1;
inline bool DeviceInfo::has_client_name() const {
  return _has_bit(0);
}
inline void DeviceInfo::clear_client_name() {
  if (client_name_ != &_default_client_name_) {
    client_name_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& DeviceInfo::client_name() const {
  return *client_name_;
}
inline void DeviceInfo::set_client_name(const ::std::string& value) {
  _set_bit(0);
  if (client_name_ == &_default_client_name_) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
}
inline void DeviceInfo::set_client_name(const char* value) {
  _set_bit(0);
  if (client_name_ == &_default_client_name_) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(value);
}
inline void DeviceInfo::set_client_name(const void* value, size_t size) {
  _set_bit(0);
  if (client_name_ == &_default_client_name_) {
    client_name_ = new ::std::string;
  }
  client_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_client_name() {
  _set_bit(0);
  if (client_name_ == &_default_client_name_) {
    client_name_ = new ::std::string;
  }
  return client_name_;
}

// optional bytes device_type = 2;
inline bool DeviceInfo::has_device_type() const {
  return _has_bit(1);
}
inline void DeviceInfo::clear_device_type() {
  if (device_type_ != &_default_device_type_) {
    device_type_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DeviceInfo::device_type() const {
  return *device_type_;
}
inline void DeviceInfo::set_device_type(const ::std::string& value) {
  _set_bit(1);
  if (device_type_ == &_default_device_type_) {
    device_type_ = new ::std::string;
  }
  device_type_->assign(value);
}
inline void DeviceInfo::set_device_type(const char* value) {
  _set_bit(1);
  if (device_type_ == &_default_device_type_) {
    device_type_ = new ::std::string;
  }
  device_type_->assign(value);
}
inline void DeviceInfo::set_device_type(const void* value, size_t size) {
  _set_bit(1);
  if (device_type_ == &_default_device_type_) {
    device_type_ = new ::std::string;
  }
  device_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_device_type() {
  _set_bit(1);
  if (device_type_ == &_default_device_type_) {
    device_type_ = new ::std::string;
  }
  return device_type_;
}

// optional bytes os_version = 3;
inline bool DeviceInfo::has_os_version() const {
  return _has_bit(2);
}
inline void DeviceInfo::clear_os_version() {
  if (os_version_ != &_default_os_version_) {
    os_version_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DeviceInfo::os_version() const {
  return *os_version_;
}
inline void DeviceInfo::set_os_version(const ::std::string& value) {
  _set_bit(2);
  if (os_version_ == &_default_os_version_) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void DeviceInfo::set_os_version(const char* value) {
  _set_bit(2);
  if (os_version_ == &_default_os_version_) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(value);
}
inline void DeviceInfo::set_os_version(const void* value, size_t size) {
  _set_bit(2);
  if (os_version_ == &_default_os_version_) {
    os_version_ = new ::std::string;
  }
  os_version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_os_version() {
  _set_bit(2);
  if (os_version_ == &_default_os_version_) {
    os_version_ = new ::std::string;
  }
  return os_version_;
}

// optional bytes user_agent = 4;
inline bool DeviceInfo::has_user_agent() const {
  return _has_bit(3);
}
inline void DeviceInfo::clear_user_agent() {
  if (user_agent_ != &_default_user_agent_) {
    user_agent_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& DeviceInfo::user_agent() const {
  return *user_agent_;
}
inline void DeviceInfo::set_user_agent(const ::std::string& value) {
  _set_bit(3);
  if (user_agent_ == &_default_user_agent_) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
}
inline void DeviceInfo::set_user_agent(const char* value) {
  _set_bit(3);
  if (user_agent_ == &_default_user_agent_) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(value);
}
inline void DeviceInfo::set_user_agent(const void* value, size_t size) {
  _set_bit(3);
  if (user_agent_ == &_default_user_agent_) {
    user_agent_ = new ::std::string;
  }
  user_agent_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_user_agent() {
  _set_bit(3);
  if (user_agent_ == &_default_user_agent_) {
    user_agent_ = new ::std::string;
  }
  return user_agent_;
}

// optional bytes wnettype = 5;
inline bool DeviceInfo::has_wnettype() const {
  return _has_bit(4);
}
inline void DeviceInfo::clear_wnettype() {
  if (wnettype_ != &_default_wnettype_) {
    wnettype_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& DeviceInfo::wnettype() const {
  return *wnettype_;
}
inline void DeviceInfo::set_wnettype(const ::std::string& value) {
  _set_bit(4);
  if (wnettype_ == &_default_wnettype_) {
    wnettype_ = new ::std::string;
  }
  wnettype_->assign(value);
}
inline void DeviceInfo::set_wnettype(const char* value) {
  _set_bit(4);
  if (wnettype_ == &_default_wnettype_) {
    wnettype_ = new ::std::string;
  }
  wnettype_->assign(value);
}
inline void DeviceInfo::set_wnettype(const void* value, size_t size) {
  _set_bit(4);
  if (wnettype_ == &_default_wnettype_) {
    wnettype_ = new ::std::string;
  }
  wnettype_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_wnettype() {
  _set_bit(4);
  if (wnettype_ == &_default_wnettype_) {
    wnettype_ = new ::std::string;
  }
  return wnettype_;
}

// optional int32 screenwidth = 6;
inline bool DeviceInfo::has_screenwidth() const {
  return _has_bit(5);
}
inline void DeviceInfo::clear_screenwidth() {
  screenwidth_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 DeviceInfo::screenwidth() const {
  return screenwidth_;
}
inline void DeviceInfo::set_screenwidth(::google::protobuf::int32 value) {
  _set_bit(5);
  screenwidth_ = value;
}

// optional int32 screenheight = 7;
inline bool DeviceInfo::has_screenheight() const {
  return _has_bit(6);
}
inline void DeviceInfo::clear_screenheight() {
  screenheight_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 DeviceInfo::screenheight() const {
  return screenheight_;
}
inline void DeviceInfo::set_screenheight(::google::protobuf::int32 value) {
  _set_bit(6);
  screenheight_ = value;
}

// optional bytes wpt = 8;
inline bool DeviceInfo::has_wpt() const {
  return _has_bit(7);
}
inline void DeviceInfo::clear_wpt() {
  if (wpt_ != &_default_wpt_) {
    wpt_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& DeviceInfo::wpt() const {
  return *wpt_;
}
inline void DeviceInfo::set_wpt(const ::std::string& value) {
  _set_bit(7);
  if (wpt_ == &_default_wpt_) {
    wpt_ = new ::std::string;
  }
  wpt_->assign(value);
}
inline void DeviceInfo::set_wpt(const char* value) {
  _set_bit(7);
  if (wpt_ == &_default_wpt_) {
    wpt_ = new ::std::string;
  }
  wpt_->assign(value);
}
inline void DeviceInfo::set_wpt(const void* value, size_t size) {
  _set_bit(7);
  if (wpt_ == &_default_wpt_) {
    wpt_ = new ::std::string;
  }
  wpt_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DeviceInfo::mutable_wpt() {
  _set_bit(7);
  if (wpt_ == &_default_wpt_) {
    wpt_ = new ::std::string;
  }
  return wpt_;
}

// -------------------------------------------------------------------

// AddInfo

// optional bytes ui_server_ip = 1;
inline bool AddInfo::has_ui_server_ip() const {
  return _has_bit(0);
}
inline void AddInfo::clear_ui_server_ip() {
  if (ui_server_ip_ != &_default_ui_server_ip_) {
    ui_server_ip_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& AddInfo::ui_server_ip() const {
  return *ui_server_ip_;
}
inline void AddInfo::set_ui_server_ip(const ::std::string& value) {
  _set_bit(0);
  if (ui_server_ip_ == &_default_ui_server_ip_) {
    ui_server_ip_ = new ::std::string;
  }
  ui_server_ip_->assign(value);
}
inline void AddInfo::set_ui_server_ip(const char* value) {
  _set_bit(0);
  if (ui_server_ip_ == &_default_ui_server_ip_) {
    ui_server_ip_ = new ::std::string;
  }
  ui_server_ip_->assign(value);
}
inline void AddInfo::set_ui_server_ip(const void* value, size_t size) {
  _set_bit(0);
  if (ui_server_ip_ == &_default_ui_server_ip_) {
    ui_server_ip_ = new ::std::string;
  }
  ui_server_ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddInfo::mutable_ui_server_ip() {
  _set_bit(0);
  if (ui_server_ip_ == &_default_ui_server_ip_) {
    ui_server_ip_ = new ::std::string;
  }
  return ui_server_ip_;
}

// optional uint64 request_exact_time = 2;
inline bool AddInfo::has_request_exact_time() const {
  return _has_bit(1);
}
inline void AddInfo::clear_request_exact_time() {
  request_exact_time_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 AddInfo::request_exact_time() const {
  return request_exact_time_;
}
inline void AddInfo::set_request_exact_time(::google::protobuf::uint64 value) {
  _set_bit(1);
  request_exact_time_ = value;
}

// optional bytes router_tag = 3;
inline bool AddInfo::has_router_tag() const {
  return _has_bit(2);
}
inline void AddInfo::clear_router_tag() {
  if (router_tag_ != &_default_router_tag_) {
    router_tag_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& AddInfo::router_tag() const {
  return *router_tag_;
}
inline void AddInfo::set_router_tag(const ::std::string& value) {
  _set_bit(2);
  if (router_tag_ == &_default_router_tag_) {
    router_tag_ = new ::std::string;
  }
  router_tag_->assign(value);
}
inline void AddInfo::set_router_tag(const char* value) {
  _set_bit(2);
  if (router_tag_ == &_default_router_tag_) {
    router_tag_ = new ::std::string;
  }
  router_tag_->assign(value);
}
inline void AddInfo::set_router_tag(const void* value, size_t size) {
  _set_bit(2);
  if (router_tag_ == &_default_router_tag_) {
    router_tag_ = new ::std::string;
  }
  router_tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddInfo::mutable_router_tag() {
  _set_bit(2);
  if (router_tag_ == &_default_router_tag_) {
    router_tag_ = new ::std::string;
  }
  return router_tag_;
}

// repeated uint32 experiment_id_list = 4;
inline int AddInfo::experiment_id_list_size() const {
  return experiment_id_list_.size();
}
inline void AddInfo::clear_experiment_id_list() {
  experiment_id_list_.Clear();
}
inline ::google::protobuf::uint32 AddInfo::experiment_id_list(int index) const {
  return experiment_id_list_.Get(index);
}
inline void AddInfo::set_experiment_id_list(int index, ::google::protobuf::uint32 value) {
  experiment_id_list_.Set(index, value);
}
inline void AddInfo::add_experiment_id_list(::google::protobuf::uint32 value) {
  experiment_id_list_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AddInfo::experiment_id_list() const {
  return experiment_id_list_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AddInfo::mutable_experiment_id_list() {
  return &experiment_id_list_;
}

// optional bytes logic_platform = 5;
inline bool AddInfo::has_logic_platform() const {
  return _has_bit(4);
}
inline void AddInfo::clear_logic_platform() {
  if (logic_platform_ != &_default_logic_platform_) {
    logic_platform_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& AddInfo::logic_platform() const {
  return *logic_platform_;
}
inline void AddInfo::set_logic_platform(const ::std::string& value) {
  _set_bit(4);
  if (logic_platform_ == &_default_logic_platform_) {
    logic_platform_ = new ::std::string;
  }
  logic_platform_->assign(value);
}
inline void AddInfo::set_logic_platform(const char* value) {
  _set_bit(4);
  if (logic_platform_ == &_default_logic_platform_) {
    logic_platform_ = new ::std::string;
  }
  logic_platform_->assign(value);
}
inline void AddInfo::set_logic_platform(const void* value, size_t size) {
  _set_bit(4);
  if (logic_platform_ == &_default_logic_platform_) {
    logic_platform_ = new ::std::string;
  }
  logic_platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddInfo::mutable_logic_platform() {
  _set_bit(4);
  if (logic_platform_ == &_default_logic_platform_) {
    logic_platform_ = new ::std::string;
  }
  return logic_platform_;
}

// optional bytes physics_platform = 6;
inline bool AddInfo::has_physics_platform() const {
  return _has_bit(5);
}
inline void AddInfo::clear_physics_platform() {
  if (physics_platform_ != &_default_physics_platform_) {
    physics_platform_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& AddInfo::physics_platform() const {
  return *physics_platform_;
}
inline void AddInfo::set_physics_platform(const ::std::string& value) {
  _set_bit(5);
  if (physics_platform_ == &_default_physics_platform_) {
    physics_platform_ = new ::std::string;
  }
  physics_platform_->assign(value);
}
inline void AddInfo::set_physics_platform(const char* value) {
  _set_bit(5);
  if (physics_platform_ == &_default_physics_platform_) {
    physics_platform_ = new ::std::string;
  }
  physics_platform_->assign(value);
}
inline void AddInfo::set_physics_platform(const void* value, size_t size) {
  _set_bit(5);
  if (physics_platform_ == &_default_physics_platform_) {
    physics_platform_ = new ::std::string;
  }
  physics_platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddInfo::mutable_physics_platform() {
  _set_bit(5);
  if (physics_platform_ == &_default_physics_platform_) {
    physics_platform_ = new ::std::string;
  }
  return physics_platform_;
}

// optional int32 need_bndetail = 7;
inline bool AddInfo::has_need_bndetail() const {
  return _has_bit(6);
}
inline void AddInfo::clear_need_bndetail() {
  need_bndetail_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 AddInfo::need_bndetail() const {
  return need_bndetail_;
}
inline void AddInfo::set_need_bndetail(::google::protobuf::int32 value) {
  _set_bit(6);
  need_bndetail_ = value;
}

// optional int32 dync_ztc_router_tag = 8;
inline bool AddInfo::has_dync_ztc_router_tag() const {
  return _has_bit(7);
}
inline void AddInfo::clear_dync_ztc_router_tag() {
  dync_ztc_router_tag_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 AddInfo::dync_ztc_router_tag() const {
  return dync_ztc_router_tag_;
}
inline void AddInfo::set_dync_ztc_router_tag(::google::protobuf::int32 value) {
  _set_bit(7);
  dync_ztc_router_tag_ = value;
}

// optional bytes fc_ovlexp = 9;
inline bool AddInfo::has_fc_ovlexp() const {
  return _has_bit(8);
}
inline void AddInfo::clear_fc_ovlexp() {
  if (fc_ovlexp_ != &_default_fc_ovlexp_) {
    fc_ovlexp_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& AddInfo::fc_ovlexp() const {
  return *fc_ovlexp_;
}
inline void AddInfo::set_fc_ovlexp(const ::std::string& value) {
  _set_bit(8);
  if (fc_ovlexp_ == &_default_fc_ovlexp_) {
    fc_ovlexp_ = new ::std::string;
  }
  fc_ovlexp_->assign(value);
}
inline void AddInfo::set_fc_ovlexp(const char* value) {
  _set_bit(8);
  if (fc_ovlexp_ == &_default_fc_ovlexp_) {
    fc_ovlexp_ = new ::std::string;
  }
  fc_ovlexp_->assign(value);
}
inline void AddInfo::set_fc_ovlexp(const void* value, size_t size) {
  _set_bit(8);
  if (fc_ovlexp_ == &_default_fc_ovlexp_) {
    fc_ovlexp_ = new ::std::string;
  }
  fc_ovlexp_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AddInfo::mutable_fc_ovlexp() {
  _set_bit(8);
  if (fc_ovlexp_ == &_default_fc_ovlexp_) {
    fc_ovlexp_ = new ::std::string;
  }
  return fc_ovlexp_;
}

// -------------------------------------------------------------------

// TargetingInfo

// optional bool enable_cs = 1;
inline bool TargetingInfo::has_enable_cs() const {
  return _has_bit(0);
}
inline void TargetingInfo::clear_enable_cs() {
  enable_cs_ = false;
  _clear_bit(0);
}
inline bool TargetingInfo::enable_cs() const {
  return enable_cs_;
}
inline void TargetingInfo::set_enable_cs(bool value) {
  _set_bit(0);
  enable_cs_ = value;
}

// -------------------------------------------------------------------

// ZtcResponse

// optional .ztc.interface.VuiResponse vui_res = 1;
inline bool ZtcResponse::has_vui_res() const {
  return _has_bit(0);
}
inline void ZtcResponse::clear_vui_res() {
  if (vui_res_ != NULL) vui_res_->::ztc::interface::VuiResponse::Clear();
  _clear_bit(0);
}
inline const ::ztc::interface::VuiResponse& ZtcResponse::vui_res() const {
  return vui_res_ != NULL ? *vui_res_ : *default_instance_->vui_res_;
}
inline ::ztc::interface::VuiResponse* ZtcResponse::mutable_vui_res() {
  _set_bit(0);
  if (vui_res_ == NULL) vui_res_ = new ::ztc::interface::VuiResponse;
  return vui_res_;
}

// optional bytes log_info = 2;
inline bool ZtcResponse::has_log_info() const {
  return _has_bit(1);
}
inline void ZtcResponse::clear_log_info() {
  if (log_info_ != &_default_log_info_) {
    log_info_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ZtcResponse::log_info() const {
  return *log_info_;
}
inline void ZtcResponse::set_log_info(const ::std::string& value) {
  _set_bit(1);
  if (log_info_ == &_default_log_info_) {
    log_info_ = new ::std::string;
  }
  log_info_->assign(value);
}
inline void ZtcResponse::set_log_info(const char* value) {
  _set_bit(1);
  if (log_info_ == &_default_log_info_) {
    log_info_ = new ::std::string;
  }
  log_info_->assign(value);
}
inline void ZtcResponse::set_log_info(const void* value, size_t size) {
  _set_bit(1);
  if (log_info_ == &_default_log_info_) {
    log_info_ = new ::std::string;
  }
  log_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcResponse::mutable_log_info() {
  _set_bit(1);
  if (log_info_ == &_default_log_info_) {
    log_info_ = new ::std::string;
  }
  return log_info_;
}

// optional bool is_valid = 3;
inline bool ZtcResponse::has_is_valid() const {
  return _has_bit(2);
}
inline void ZtcResponse::clear_is_valid() {
  is_valid_ = false;
  _clear_bit(2);
}
inline bool ZtcResponse::is_valid() const {
  return is_valid_;
}
inline void ZtcResponse::set_is_valid(bool value) {
  _set_bit(2);
  is_valid_ = value;
}

// repeated .ztc.interface.SrcResult src_result = 4;
inline int ZtcResponse::src_result_size() const {
  return src_result_.size();
}
inline void ZtcResponse::clear_src_result() {
  src_result_.Clear();
}
inline const ::ztc::interface::SrcResult& ZtcResponse::src_result(int index) const {
  return src_result_.Get(index);
}
inline ::ztc::interface::SrcResult* ZtcResponse::mutable_src_result(int index) {
  return src_result_.Mutable(index);
}
inline ::ztc::interface::SrcResult* ZtcResponse::add_src_result() {
  return src_result_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcResult >&
ZtcResponse::src_result() const {
  return src_result_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::SrcResult >*
ZtcResponse::mutable_src_result() {
  return &src_result_;
}

// repeated .bizus_basemap.SearchPoi basemap_poi = 5;
inline int ZtcResponse::basemap_poi_size() const {
  return basemap_poi_.size();
}
inline void ZtcResponse::clear_basemap_poi() {
  basemap_poi_.Clear();
}
inline const ::bizus_basemap::SearchPoi& ZtcResponse::basemap_poi(int index) const {
  return basemap_poi_.Get(index);
}
inline ::bizus_basemap::SearchPoi* ZtcResponse::mutable_basemap_poi(int index) {
  return basemap_poi_.Mutable(index);
}
inline ::bizus_basemap::SearchPoi* ZtcResponse::add_basemap_poi() {
  return basemap_poi_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >&
ZtcResponse::basemap_poi() const {
  return basemap_poi_;
}
inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >*
ZtcResponse::mutable_basemap_poi() {
  return &basemap_poi_;
}

// optional bool is_bda_valid = 6;
inline bool ZtcResponse::has_is_bda_valid() const {
  return _has_bit(5);
}
inline void ZtcResponse::clear_is_bda_valid() {
  is_bda_valid_ = false;
  _clear_bit(5);
}
inline bool ZtcResponse::is_bda_valid() const {
  return is_bda_valid_;
}
inline void ZtcResponse::set_is_bda_valid(bool value) {
  _set_bit(5);
  is_bda_valid_ = value;
}

// optional bytes bndetail_response = 7;
inline bool ZtcResponse::has_bndetail_response() const {
  return _has_bit(6);
}
inline void ZtcResponse::clear_bndetail_response() {
  if (bndetail_response_ != &_default_bndetail_response_) {
    bndetail_response_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& ZtcResponse::bndetail_response() const {
  return *bndetail_response_;
}
inline void ZtcResponse::set_bndetail_response(const ::std::string& value) {
  _set_bit(6);
  if (bndetail_response_ == &_default_bndetail_response_) {
    bndetail_response_ = new ::std::string;
  }
  bndetail_response_->assign(value);
}
inline void ZtcResponse::set_bndetail_response(const char* value) {
  _set_bit(6);
  if (bndetail_response_ == &_default_bndetail_response_) {
    bndetail_response_ = new ::std::string;
  }
  bndetail_response_->assign(value);
}
inline void ZtcResponse::set_bndetail_response(const void* value, size_t size) {
  _set_bit(6);
  if (bndetail_response_ == &_default_bndetail_response_) {
    bndetail_response_ = new ::std::string;
  }
  bndetail_response_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcResponse::mutable_bndetail_response() {
  _set_bit(6);
  if (bndetail_response_ == &_default_bndetail_response_) {
    bndetail_response_ = new ::std::string;
  }
  return bndetail_response_;
}

// optional bytes nuomi_session_profile_binary = 8;
inline bool ZtcResponse::has_nuomi_session_profile_binary() const {
  return _has_bit(7);
}
inline void ZtcResponse::clear_nuomi_session_profile_binary() {
  if (nuomi_session_profile_binary_ != &_default_nuomi_session_profile_binary_) {
    nuomi_session_profile_binary_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& ZtcResponse::nuomi_session_profile_binary() const {
  return *nuomi_session_profile_binary_;
}
inline void ZtcResponse::set_nuomi_session_profile_binary(const ::std::string& value) {
  _set_bit(7);
  if (nuomi_session_profile_binary_ == &_default_nuomi_session_profile_binary_) {
    nuomi_session_profile_binary_ = new ::std::string;
  }
  nuomi_session_profile_binary_->assign(value);
}
inline void ZtcResponse::set_nuomi_session_profile_binary(const char* value) {
  _set_bit(7);
  if (nuomi_session_profile_binary_ == &_default_nuomi_session_profile_binary_) {
    nuomi_session_profile_binary_ = new ::std::string;
  }
  nuomi_session_profile_binary_->assign(value);
}
inline void ZtcResponse::set_nuomi_session_profile_binary(const void* value, size_t size) {
  _set_bit(7);
  if (nuomi_session_profile_binary_ == &_default_nuomi_session_profile_binary_) {
    nuomi_session_profile_binary_ = new ::std::string;
  }
  nuomi_session_profile_binary_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcResponse::mutable_nuomi_session_profile_binary() {
  _set_bit(7);
  if (nuomi_session_profile_binary_ == &_default_nuomi_session_profile_binary_) {
    nuomi_session_profile_binary_ = new ::std::string;
  }
  return nuomi_session_profile_binary_;
}

// optional bytes ztc_gs = 9;
inline bool ZtcResponse::has_ztc_gs() const {
  return _has_bit(8);
}
inline void ZtcResponse::clear_ztc_gs() {
  if (ztc_gs_ != &_default_ztc_gs_) {
    ztc_gs_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& ZtcResponse::ztc_gs() const {
  return *ztc_gs_;
}
inline void ZtcResponse::set_ztc_gs(const ::std::string& value) {
  _set_bit(8);
  if (ztc_gs_ == &_default_ztc_gs_) {
    ztc_gs_ = new ::std::string;
  }
  ztc_gs_->assign(value);
}
inline void ZtcResponse::set_ztc_gs(const char* value) {
  _set_bit(8);
  if (ztc_gs_ == &_default_ztc_gs_) {
    ztc_gs_ = new ::std::string;
  }
  ztc_gs_->assign(value);
}
inline void ZtcResponse::set_ztc_gs(const void* value, size_t size) {
  _set_bit(8);
  if (ztc_gs_ == &_default_ztc_gs_) {
    ztc_gs_ = new ::std::string;
  }
  ztc_gs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcResponse::mutable_ztc_gs() {
  _set_bit(8);
  if (ztc_gs_ == &_default_ztc_gs_) {
    ztc_gs_ = new ::std::string;
  }
  return ztc_gs_;
}

// optional .BidResponse feed_response = 10;
inline bool ZtcResponse::has_feed_response() const {
  return _has_bit(9);
}
inline void ZtcResponse::clear_feed_response() {
  if (feed_response_ != NULL) feed_response_->::BidResponse::Clear();
  _clear_bit(9);
}
inline const ::BidResponse& ZtcResponse::feed_response() const {
  return feed_response_ != NULL ? *feed_response_ : *default_instance_->feed_response_;
}
inline ::BidResponse* ZtcResponse::mutable_feed_response() {
  _set_bit(9);
  if (feed_response_ == NULL) feed_response_ = new ::BidResponse;
  return feed_response_;
}

// -------------------------------------------------------------------

// VuiResponse

// required uint32 err_no = 1;
inline bool VuiResponse::has_err_no() const {
  return _has_bit(0);
}
inline void VuiResponse::clear_err_no() {
  err_no_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 VuiResponse::err_no() const {
  return err_no_;
}
inline void VuiResponse::set_err_no(::google::protobuf::uint32 value) {
  _set_bit(0);
  err_no_ = value;
}

// repeated bytes global_js_list = 2;
inline int VuiResponse::global_js_list_size() const {
  return global_js_list_.size();
}
inline void VuiResponse::clear_global_js_list() {
  global_js_list_.Clear();
}
inline const ::std::string& VuiResponse::global_js_list(int index) const {
  return global_js_list_.Get(index);
}
inline ::std::string* VuiResponse::mutable_global_js_list(int index) {
  return global_js_list_.Mutable(index);
}
inline void VuiResponse::set_global_js_list(int index, const ::std::string& value) {
  global_js_list_.Mutable(index)->assign(value);
}
inline void VuiResponse::set_global_js_list(int index, const char* value) {
  global_js_list_.Mutable(index)->assign(value);
}
inline void VuiResponse::set_global_js_list(int index, const void* value, size_t size) {
  global_js_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VuiResponse::add_global_js_list() {
  return global_js_list_.Add();
}
inline void VuiResponse::add_global_js_list(const ::std::string& value) {
  global_js_list_.Add()->assign(value);
}
inline void VuiResponse::add_global_js_list(const char* value) {
  global_js_list_.Add()->assign(value);
}
inline void VuiResponse::add_global_js_list(const void* value, size_t size) {
  global_js_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VuiResponse::global_js_list() const {
  return global_js_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VuiResponse::mutable_global_js_list() {
  return &global_js_list_;
}

// repeated bytes global_css_list = 3;
inline int VuiResponse::global_css_list_size() const {
  return global_css_list_.size();
}
inline void VuiResponse::clear_global_css_list() {
  global_css_list_.Clear();
}
inline const ::std::string& VuiResponse::global_css_list(int index) const {
  return global_css_list_.Get(index);
}
inline ::std::string* VuiResponse::mutable_global_css_list(int index) {
  return global_css_list_.Mutable(index);
}
inline void VuiResponse::set_global_css_list(int index, const ::std::string& value) {
  global_css_list_.Mutable(index)->assign(value);
}
inline void VuiResponse::set_global_css_list(int index, const char* value) {
  global_css_list_.Mutable(index)->assign(value);
}
inline void VuiResponse::set_global_css_list(int index, const void* value, size_t size) {
  global_css_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* VuiResponse::add_global_css_list() {
  return global_css_list_.Add();
}
inline void VuiResponse::add_global_css_list(const ::std::string& value) {
  global_css_list_.Add()->assign(value);
}
inline void VuiResponse::add_global_css_list(const char* value) {
  global_css_list_.Add()->assign(value);
}
inline void VuiResponse::add_global_css_list(const void* value, size_t size) {
  global_css_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
VuiResponse::global_css_list() const {
  return global_css_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
VuiResponse::mutable_global_css_list() {
  return &global_css_list_;
}

// repeated .ztc.interface.AdResponse ad_place_list = 4;
inline int VuiResponse::ad_place_list_size() const {
  return ad_place_list_.size();
}
inline void VuiResponse::clear_ad_place_list() {
  ad_place_list_.Clear();
}
inline const ::ztc::interface::AdResponse& VuiResponse::ad_place_list(int index) const {
  return ad_place_list_.Get(index);
}
inline ::ztc::interface::AdResponse* VuiResponse::mutable_ad_place_list(int index) {
  return ad_place_list_.Mutable(index);
}
inline ::ztc::interface::AdResponse* VuiResponse::add_ad_place_list() {
  return ad_place_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::AdResponse >&
VuiResponse::ad_place_list() const {
  return ad_place_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::AdResponse >*
VuiResponse::mutable_ad_place_list() {
  return &ad_place_list_;
}

// -------------------------------------------------------------------

// AdResponse

// optional uint32 ad_place_id = 1;
inline bool AdResponse::has_ad_place_id() const {
  return _has_bit(0);
}
inline void AdResponse::clear_ad_place_id() {
  ad_place_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 AdResponse::ad_place_id() const {
  return ad_place_id_;
}
inline void AdResponse::set_ad_place_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  ad_place_id_ = value;
}

// optional uint32 ad_num = 2;
inline bool AdResponse::has_ad_num() const {
  return _has_bit(1);
}
inline void AdResponse::clear_ad_num() {
  ad_num_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 AdResponse::ad_num() const {
  return ad_num_;
}
inline void AdResponse::set_ad_num(::google::protobuf::uint32 value) {
  _set_bit(1);
  ad_num_ = value;
}

// optional bytes ad_place_data = 3;
inline bool AdResponse::has_ad_place_data() const {
  return _has_bit(2);
}
inline void AdResponse::clear_ad_place_data() {
  if (ad_place_data_ != &_default_ad_place_data_) {
    ad_place_data_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& AdResponse::ad_place_data() const {
  return *ad_place_data_;
}
inline void AdResponse::set_ad_place_data(const ::std::string& value) {
  _set_bit(2);
  if (ad_place_data_ == &_default_ad_place_data_) {
    ad_place_data_ = new ::std::string;
  }
  ad_place_data_->assign(value);
}
inline void AdResponse::set_ad_place_data(const char* value) {
  _set_bit(2);
  if (ad_place_data_ == &_default_ad_place_data_) {
    ad_place_data_ = new ::std::string;
  }
  ad_place_data_->assign(value);
}
inline void AdResponse::set_ad_place_data(const void* value, size_t size) {
  _set_bit(2);
  if (ad_place_data_ == &_default_ad_place_data_) {
    ad_place_data_ = new ::std::string;
  }
  ad_place_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdResponse::mutable_ad_place_data() {
  _set_bit(2);
  if (ad_place_data_ == &_default_ad_place_data_) {
    ad_place_data_ = new ::std::string;
  }
  return ad_place_data_;
}

// optional bytes ad_place_js = 4;
inline bool AdResponse::has_ad_place_js() const {
  return _has_bit(3);
}
inline void AdResponse::clear_ad_place_js() {
  if (ad_place_js_ != &_default_ad_place_js_) {
    ad_place_js_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& AdResponse::ad_place_js() const {
  return *ad_place_js_;
}
inline void AdResponse::set_ad_place_js(const ::std::string& value) {
  _set_bit(3);
  if (ad_place_js_ == &_default_ad_place_js_) {
    ad_place_js_ = new ::std::string;
  }
  ad_place_js_->assign(value);
}
inline void AdResponse::set_ad_place_js(const char* value) {
  _set_bit(3);
  if (ad_place_js_ == &_default_ad_place_js_) {
    ad_place_js_ = new ::std::string;
  }
  ad_place_js_->assign(value);
}
inline void AdResponse::set_ad_place_js(const void* value, size_t size) {
  _set_bit(3);
  if (ad_place_js_ == &_default_ad_place_js_) {
    ad_place_js_ = new ::std::string;
  }
  ad_place_js_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdResponse::mutable_ad_place_js() {
  _set_bit(3);
  if (ad_place_js_ == &_default_ad_place_js_) {
    ad_place_js_ = new ::std::string;
  }
  return ad_place_js_;
}

// optional bytes ad_place_css = 5;
inline bool AdResponse::has_ad_place_css() const {
  return _has_bit(4);
}
inline void AdResponse::clear_ad_place_css() {
  if (ad_place_css_ != &_default_ad_place_css_) {
    ad_place_css_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& AdResponse::ad_place_css() const {
  return *ad_place_css_;
}
inline void AdResponse::set_ad_place_css(const ::std::string& value) {
  _set_bit(4);
  if (ad_place_css_ == &_default_ad_place_css_) {
    ad_place_css_ = new ::std::string;
  }
  ad_place_css_->assign(value);
}
inline void AdResponse::set_ad_place_css(const char* value) {
  _set_bit(4);
  if (ad_place_css_ == &_default_ad_place_css_) {
    ad_place_css_ = new ::std::string;
  }
  ad_place_css_->assign(value);
}
inline void AdResponse::set_ad_place_css(const void* value, size_t size) {
  _set_bit(4);
  if (ad_place_css_ == &_default_ad_place_css_) {
    ad_place_css_ = new ::std::string;
  }
  ad_place_css_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdResponse::mutable_ad_place_css() {
  _set_bit(4);
  if (ad_place_css_ == &_default_ad_place_css_) {
    ad_place_css_ = new ::std::string;
  }
  return ad_place_css_;
}

// repeated bytes general_ad_fields = 6;
inline int AdResponse::general_ad_fields_size() const {
  return general_ad_fields_.size();
}
inline void AdResponse::clear_general_ad_fields() {
  general_ad_fields_.Clear();
}
inline const ::std::string& AdResponse::general_ad_fields(int index) const {
  return general_ad_fields_.Get(index);
}
inline ::std::string* AdResponse::mutable_general_ad_fields(int index) {
  return general_ad_fields_.Mutable(index);
}
inline void AdResponse::set_general_ad_fields(int index, const ::std::string& value) {
  general_ad_fields_.Mutable(index)->assign(value);
}
inline void AdResponse::set_general_ad_fields(int index, const char* value) {
  general_ad_fields_.Mutable(index)->assign(value);
}
inline void AdResponse::set_general_ad_fields(int index, const void* value, size_t size) {
  general_ad_fields_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdResponse::add_general_ad_fields() {
  return general_ad_fields_.Add();
}
inline void AdResponse::add_general_ad_fields(const ::std::string& value) {
  general_ad_fields_.Add()->assign(value);
}
inline void AdResponse::add_general_ad_fields(const char* value) {
  general_ad_fields_.Add()->assign(value);
}
inline void AdResponse::add_general_ad_fields(const void* value, size_t size) {
  general_ad_fields_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AdResponse::general_ad_fields() const {
  return general_ad_fields_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AdResponse::mutable_general_ad_fields() {
  return &general_ad_fields_;
}

// -------------------------------------------------------------------

// SrcAdnum

// optional uint32 src_id = 1;
inline bool SrcAdnum::has_src_id() const {
  return _has_bit(0);
}
inline void SrcAdnum::clear_src_id() {
  src_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 SrcAdnum::src_id() const {
  return src_id_;
}
inline void SrcAdnum::set_src_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  src_id_ = value;
}

// optional uint32 ad_num = 2;
inline bool SrcAdnum::has_ad_num() const {
  return _has_bit(1);
}
inline void SrcAdnum::clear_ad_num() {
  ad_num_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 SrcAdnum::ad_num() const {
  return ad_num_;
}
inline void SrcAdnum::set_ad_num(::google::protobuf::uint32 value) {
  _set_bit(1);
  ad_num_ = value;
}

// -------------------------------------------------------------------

// Pair

// optional bytes key = 1;
inline bool Pair::has_key() const {
  return _has_bit(0);
}
inline void Pair::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Pair::key() const {
  return *key_;
}
inline void Pair::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Pair::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void Pair::set_key(const void* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pair::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// optional bytes value = 2;
inline bool Pair::has_value() const {
  return _has_bit(1);
}
inline void Pair::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Pair::value() const {
  return *value_;
}
inline void Pair::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Pair::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Pair::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Pair::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// -------------------------------------------------------------------

// GeneralTransInfo

// required bytes key = 1;
inline bool GeneralTransInfo::has_key() const {
  return _has_bit(0);
}
inline void GeneralTransInfo::clear_key() {
  if (key_ != &_default_key_) {
    key_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GeneralTransInfo::key() const {
  return *key_;
}
inline void GeneralTransInfo::set_key(const ::std::string& value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void GeneralTransInfo::set_key(const char* value) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void GeneralTransInfo::set_key(const void* value, size_t size) {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeneralTransInfo::mutable_key() {
  _set_bit(0);
  if (key_ == &_default_key_) {
    key_ = new ::std::string;
  }
  return key_;
}

// optional bytes value = 2;
inline bool GeneralTransInfo::has_value() const {
  return _has_bit(1);
}
inline void GeneralTransInfo::clear_value() {
  if (value_ != &_default_value_) {
    value_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& GeneralTransInfo::value() const {
  return *value_;
}
inline void GeneralTransInfo::set_value(const ::std::string& value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void GeneralTransInfo::set_value(const char* value) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void GeneralTransInfo::set_value(const void* value, size_t size) {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeneralTransInfo::mutable_value() {
  _set_bit(1);
  if (value_ == &_default_value_) {
    value_ = new ::std::string;
  }
  return value_;
}

// repeated .ztc.interface.Pair value_list = 3;
inline int GeneralTransInfo::value_list_size() const {
  return value_list_.size();
}
inline void GeneralTransInfo::clear_value_list() {
  value_list_.Clear();
}
inline const ::ztc::interface::Pair& GeneralTransInfo::value_list(int index) const {
  return value_list_.Get(index);
}
inline ::ztc::interface::Pair* GeneralTransInfo::mutable_value_list(int index) {
  return value_list_.Mutable(index);
}
inline ::ztc::interface::Pair* GeneralTransInfo::add_value_list() {
  return value_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::Pair >&
GeneralTransInfo::value_list() const {
  return value_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::Pair >*
GeneralTransInfo::mutable_value_list() {
  return &value_list_;
}

// -------------------------------------------------------------------

// GeneralTransData

// optional bytes data_type = 1;
inline bool GeneralTransData::has_data_type() const {
  return _has_bit(0);
}
inline void GeneralTransData::clear_data_type() {
  if (data_type_ != &_default_data_type_) {
    data_type_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& GeneralTransData::data_type() const {
  return *data_type_;
}
inline void GeneralTransData::set_data_type(const ::std::string& value) {
  _set_bit(0);
  if (data_type_ == &_default_data_type_) {
    data_type_ = new ::std::string;
  }
  data_type_->assign(value);
}
inline void GeneralTransData::set_data_type(const char* value) {
  _set_bit(0);
  if (data_type_ == &_default_data_type_) {
    data_type_ = new ::std::string;
  }
  data_type_->assign(value);
}
inline void GeneralTransData::set_data_type(const void* value, size_t size) {
  _set_bit(0);
  if (data_type_ == &_default_data_type_) {
    data_type_ = new ::std::string;
  }
  data_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeneralTransData::mutable_data_type() {
  _set_bit(0);
  if (data_type_ == &_default_data_type_) {
    data_type_ = new ::std::string;
  }
  return data_type_;
}

// repeated .ztc.interface.GeneralTransInfo trans_info_list = 2;
inline int GeneralTransData::trans_info_list_size() const {
  return trans_info_list_.size();
}
inline void GeneralTransData::clear_trans_info_list() {
  trans_info_list_.Clear();
}
inline const ::ztc::interface::GeneralTransInfo& GeneralTransData::trans_info_list(int index) const {
  return trans_info_list_.Get(index);
}
inline ::ztc::interface::GeneralTransInfo* GeneralTransData::mutable_trans_info_list(int index) {
  return trans_info_list_.Mutable(index);
}
inline ::ztc::interface::GeneralTransInfo* GeneralTransData::add_trans_info_list() {
  return trans_info_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::GeneralTransInfo >&
GeneralTransData::trans_info_list() const {
  return trans_info_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::GeneralTransInfo >*
GeneralTransData::mutable_trans_info_list() {
  return &trans_info_list_;
}

// -------------------------------------------------------------------

// SrcResult

// required uint32 srcid = 1;
inline bool SrcResult::has_srcid() const {
  return _has_bit(0);
}
inline void SrcResult::clear_srcid() {
  srcid_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 SrcResult::srcid() const {
  return srcid_;
}
inline void SrcResult::set_srcid(::google::protobuf::uint32 value) {
  _set_bit(0);
  srcid_ = value;
}

// required uint32 cmatch = 2;
inline bool SrcResult::has_cmatch() const {
  return _has_bit(1);
}
inline void SrcResult::clear_cmatch() {
  cmatch_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 SrcResult::cmatch() const {
  return cmatch_;
}
inline void SrcResult::set_cmatch(::google::protobuf::uint32 value) {
  _set_bit(1);
  cmatch_ = value;
}

// repeated .ztc.interface.ZtcAdvInfo ztc_adv_info = 3;
inline int SrcResult::ztc_adv_info_size() const {
  return ztc_adv_info_.size();
}
inline void SrcResult::clear_ztc_adv_info() {
  ztc_adv_info_.Clear();
}
inline const ::ztc::interface::ZtcAdvInfo& SrcResult::ztc_adv_info(int index) const {
  return ztc_adv_info_.Get(index);
}
inline ::ztc::interface::ZtcAdvInfo* SrcResult::mutable_ztc_adv_info(int index) {
  return ztc_adv_info_.Mutable(index);
}
inline ::ztc::interface::ZtcAdvInfo* SrcResult::add_ztc_adv_info() {
  return ztc_adv_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::ZtcAdvInfo >&
SrcResult::ztc_adv_info() const {
  return ztc_adv_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::ZtcAdvInfo >*
SrcResult::mutable_ztc_adv_info() {
  return &ztc_adv_info_;
}

// optional bytes recom_reason = 4;
inline bool SrcResult::has_recom_reason() const {
  return _has_bit(3);
}
inline void SrcResult::clear_recom_reason() {
  if (recom_reason_ != &_default_recom_reason_) {
    recom_reason_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& SrcResult::recom_reason() const {
  return *recom_reason_;
}
inline void SrcResult::set_recom_reason(const ::std::string& value) {
  _set_bit(3);
  if (recom_reason_ == &_default_recom_reason_) {
    recom_reason_ = new ::std::string;
  }
  recom_reason_->assign(value);
}
inline void SrcResult::set_recom_reason(const char* value) {
  _set_bit(3);
  if (recom_reason_ == &_default_recom_reason_) {
    recom_reason_ = new ::std::string;
  }
  recom_reason_->assign(value);
}
inline void SrcResult::set_recom_reason(const void* value, size_t size) {
  _set_bit(3);
  if (recom_reason_ == &_default_recom_reason_) {
    recom_reason_ = new ::std::string;
  }
  recom_reason_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SrcResult::mutable_recom_reason() {
  _set_bit(3);
  if (recom_reason_ == &_default_recom_reason_) {
    recom_reason_ = new ::std::string;
  }
  return recom_reason_;
}

// optional int32 recom_type = 5;
inline bool SrcResult::has_recom_type() const {
  return _has_bit(4);
}
inline void SrcResult::clear_recom_type() {
  recom_type_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 SrcResult::recom_type() const {
  return recom_type_;
}
inline void SrcResult::set_recom_type(::google::protobuf::int32 value) {
  _set_bit(4);
  recom_type_ = value;
}

// -------------------------------------------------------------------

// NewStyleResItem

// required uint32 mt_id = 1;
inline bool NewStyleResItem::has_mt_id() const {
  return _has_bit(0);
}
inline void NewStyleResItem::clear_mt_id() {
  mt_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 NewStyleResItem::mt_id() const {
  return mt_id_;
}
inline void NewStyleResItem::set_mt_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  mt_id_ = value;
}

// required bytes json = 2;
inline bool NewStyleResItem::has_json() const {
  return _has_bit(1);
}
inline void NewStyleResItem::clear_json() {
  if (json_ != &_default_json_) {
    json_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& NewStyleResItem::json() const {
  return *json_;
}
inline void NewStyleResItem::set_json(const ::std::string& value) {
  _set_bit(1);
  if (json_ == &_default_json_) {
    json_ = new ::std::string;
  }
  json_->assign(value);
}
inline void NewStyleResItem::set_json(const char* value) {
  _set_bit(1);
  if (json_ == &_default_json_) {
    json_ = new ::std::string;
  }
  json_->assign(value);
}
inline void NewStyleResItem::set_json(const void* value, size_t size) {
  _set_bit(1);
  if (json_ == &_default_json_) {
    json_ = new ::std::string;
  }
  json_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NewStyleResItem::mutable_json() {
  _set_bit(1);
  if (json_ == &_default_json_) {
    json_ = new ::std::string;
  }
  return json_;
}

// -------------------------------------------------------------------

// ZtcAdvInfo

// required .ztc.interface.BsAdvInfo adv_info = 1;
inline bool ZtcAdvInfo::has_adv_info() const {
  return _has_bit(0);
}
inline void ZtcAdvInfo::clear_adv_info() {
  if (adv_info_ != NULL) adv_info_->::ztc::interface::BsAdvInfo::Clear();
  _clear_bit(0);
}
inline const ::ztc::interface::BsAdvInfo& ZtcAdvInfo::adv_info() const {
  return adv_info_ != NULL ? *adv_info_ : *default_instance_->adv_info_;
}
inline ::ztc::interface::BsAdvInfo* ZtcAdvInfo::mutable_adv_info() {
  _set_bit(0);
  if (adv_info_ == NULL) adv_info_ = new ::ztc::interface::BsAdvInfo;
  return adv_info_;
}

// required bytes rcv_url = 2;
inline bool ZtcAdvInfo::has_rcv_url() const {
  return _has_bit(1);
}
inline void ZtcAdvInfo::clear_rcv_url() {
  if (rcv_url_ != &_default_rcv_url_) {
    rcv_url_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& ZtcAdvInfo::rcv_url() const {
  return *rcv_url_;
}
inline void ZtcAdvInfo::set_rcv_url(const ::std::string& value) {
  _set_bit(1);
  if (rcv_url_ == &_default_rcv_url_) {
    rcv_url_ = new ::std::string;
  }
  rcv_url_->assign(value);
}
inline void ZtcAdvInfo::set_rcv_url(const char* value) {
  _set_bit(1);
  if (rcv_url_ == &_default_rcv_url_) {
    rcv_url_ = new ::std::string;
  }
  rcv_url_->assign(value);
}
inline void ZtcAdvInfo::set_rcv_url(const void* value, size_t size) {
  _set_bit(1);
  if (rcv_url_ == &_default_rcv_url_) {
    rcv_url_ = new ::std::string;
  }
  rcv_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcAdvInfo::mutable_rcv_url() {
  _set_bit(1);
  if (rcv_url_ == &_default_rcv_url_) {
    rcv_url_ = new ::std::string;
  }
  return rcv_url_;
}

// optional bytes tsmcid = 3;
inline bool ZtcAdvInfo::has_tsmcid() const {
  return _has_bit(2);
}
inline void ZtcAdvInfo::clear_tsmcid() {
  if (tsmcid_ != &_default_tsmcid_) {
    tsmcid_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ZtcAdvInfo::tsmcid() const {
  return *tsmcid_;
}
inline void ZtcAdvInfo::set_tsmcid(const ::std::string& value) {
  _set_bit(2);
  if (tsmcid_ == &_default_tsmcid_) {
    tsmcid_ = new ::std::string;
  }
  tsmcid_->assign(value);
}
inline void ZtcAdvInfo::set_tsmcid(const char* value) {
  _set_bit(2);
  if (tsmcid_ == &_default_tsmcid_) {
    tsmcid_ = new ::std::string;
  }
  tsmcid_->assign(value);
}
inline void ZtcAdvInfo::set_tsmcid(const void* value, size_t size) {
  _set_bit(2);
  if (tsmcid_ == &_default_tsmcid_) {
    tsmcid_ = new ::std::string;
  }
  tsmcid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcAdvInfo::mutable_tsmcid() {
  _set_bit(2);
  if (tsmcid_ == &_default_tsmcid_) {
    tsmcid_ = new ::std::string;
  }
  return tsmcid_;
}

// optional bytes channel_content = 4;
inline bool ZtcAdvInfo::has_channel_content() const {
  return _has_bit(3);
}
inline void ZtcAdvInfo::clear_channel_content() {
  if (channel_content_ != &_default_channel_content_) {
    channel_content_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& ZtcAdvInfo::channel_content() const {
  return *channel_content_;
}
inline void ZtcAdvInfo::set_channel_content(const ::std::string& value) {
  _set_bit(3);
  if (channel_content_ == &_default_channel_content_) {
    channel_content_ = new ::std::string;
  }
  channel_content_->assign(value);
}
inline void ZtcAdvInfo::set_channel_content(const char* value) {
  _set_bit(3);
  if (channel_content_ == &_default_channel_content_) {
    channel_content_ = new ::std::string;
  }
  channel_content_->assign(value);
}
inline void ZtcAdvInfo::set_channel_content(const void* value, size_t size) {
  _set_bit(3);
  if (channel_content_ == &_default_channel_content_) {
    channel_content_ = new ::std::string;
  }
  channel_content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcAdvInfo::mutable_channel_content() {
  _set_bit(3);
  if (channel_content_ == &_default_channel_content_) {
    channel_content_ = new ::std::string;
  }
  return channel_content_;
}

// optional bytes tiny_url = 5;
inline bool ZtcAdvInfo::has_tiny_url() const {
  return _has_bit(4);
}
inline void ZtcAdvInfo::clear_tiny_url() {
  if (tiny_url_ != &_default_tiny_url_) {
    tiny_url_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& ZtcAdvInfo::tiny_url() const {
  return *tiny_url_;
}
inline void ZtcAdvInfo::set_tiny_url(const ::std::string& value) {
  _set_bit(4);
  if (tiny_url_ == &_default_tiny_url_) {
    tiny_url_ = new ::std::string;
  }
  tiny_url_->assign(value);
}
inline void ZtcAdvInfo::set_tiny_url(const char* value) {
  _set_bit(4);
  if (tiny_url_ == &_default_tiny_url_) {
    tiny_url_ = new ::std::string;
  }
  tiny_url_->assign(value);
}
inline void ZtcAdvInfo::set_tiny_url(const void* value, size_t size) {
  _set_bit(4);
  if (tiny_url_ == &_default_tiny_url_) {
    tiny_url_ = new ::std::string;
  }
  tiny_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcAdvInfo::mutable_tiny_url() {
  _set_bit(4);
  if (tiny_url_ == &_default_tiny_url_) {
    tiny_url_ = new ::std::string;
  }
  return tiny_url_;
}

// optional uint64 charge_id = 6;
inline bool ZtcAdvInfo::has_charge_id() const {
  return _has_bit(5);
}
inline void ZtcAdvInfo::clear_charge_id() {
  charge_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(5);
}
inline ::google::protobuf::uint64 ZtcAdvInfo::charge_id() const {
  return charge_id_;
}
inline void ZtcAdvInfo::set_charge_id(::google::protobuf::uint64 value) {
  _set_bit(5);
  charge_id_ = value;
}

// repeated .ztc.interface.NewStyleResItem nst_items = 7;
inline int ZtcAdvInfo::nst_items_size() const {
  return nst_items_.size();
}
inline void ZtcAdvInfo::clear_nst_items() {
  nst_items_.Clear();
}
inline const ::ztc::interface::NewStyleResItem& ZtcAdvInfo::nst_items(int index) const {
  return nst_items_.Get(index);
}
inline ::ztc::interface::NewStyleResItem* ZtcAdvInfo::mutable_nst_items(int index) {
  return nst_items_.Mutable(index);
}
inline ::ztc::interface::NewStyleResItem* ZtcAdvInfo::add_nst_items() {
  return nst_items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::NewStyleResItem >&
ZtcAdvInfo::nst_items() const {
  return nst_items_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::NewStyleResItem >*
ZtcAdvInfo::mutable_nst_items() {
  return &nst_items_;
}

// optional uint32 ctr = 8;
inline bool ZtcAdvInfo::has_ctr() const {
  return _has_bit(7);
}
inline void ZtcAdvInfo::clear_ctr() {
  ctr_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 ZtcAdvInfo::ctr() const {
  return ctr_;
}
inline void ZtcAdvInfo::set_ctr(::google::protobuf::uint32 value) {
  _set_bit(7);
  ctr_ = value;
}

// optional uint32 cvr = 9;
inline bool ZtcAdvInfo::has_cvr() const {
  return _has_bit(8);
}
inline void ZtcAdvInfo::clear_cvr() {
  cvr_ = 0u;
  _clear_bit(8);
}
inline ::google::protobuf::uint32 ZtcAdvInfo::cvr() const {
  return cvr_;
}
inline void ZtcAdvInfo::set_cvr(::google::protobuf::uint32 value) {
  _set_bit(8);
  cvr_ = value;
}

// optional .ztc.interface.ZtcCsInfo ztc_cs_info = 10;
inline bool ZtcAdvInfo::has_ztc_cs_info() const {
  return _has_bit(9);
}
inline void ZtcAdvInfo::clear_ztc_cs_info() {
  if (ztc_cs_info_ != NULL) ztc_cs_info_->::ztc::interface::ZtcCsInfo::Clear();
  _clear_bit(9);
}
inline const ::ztc::interface::ZtcCsInfo& ZtcAdvInfo::ztc_cs_info() const {
  return ztc_cs_info_ != NULL ? *ztc_cs_info_ : *default_instance_->ztc_cs_info_;
}
inline ::ztc::interface::ZtcCsInfo* ZtcAdvInfo::mutable_ztc_cs_info() {
  _set_bit(9);
  if (ztc_cs_info_ == NULL) ztc_cs_info_ = new ::ztc::interface::ZtcCsInfo;
  return ztc_cs_info_;
}

// optional bytes feed_title_tagid = 11;
inline bool ZtcAdvInfo::has_feed_title_tagid() const {
  return _has_bit(10);
}
inline void ZtcAdvInfo::clear_feed_title_tagid() {
  if (feed_title_tagid_ != &_default_feed_title_tagid_) {
    feed_title_tagid_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& ZtcAdvInfo::feed_title_tagid() const {
  return *feed_title_tagid_;
}
inline void ZtcAdvInfo::set_feed_title_tagid(const ::std::string& value) {
  _set_bit(10);
  if (feed_title_tagid_ == &_default_feed_title_tagid_) {
    feed_title_tagid_ = new ::std::string;
  }
  feed_title_tagid_->assign(value);
}
inline void ZtcAdvInfo::set_feed_title_tagid(const char* value) {
  _set_bit(10);
  if (feed_title_tagid_ == &_default_feed_title_tagid_) {
    feed_title_tagid_ = new ::std::string;
  }
  feed_title_tagid_->assign(value);
}
inline void ZtcAdvInfo::set_feed_title_tagid(const void* value, size_t size) {
  _set_bit(10);
  if (feed_title_tagid_ == &_default_feed_title_tagid_) {
    feed_title_tagid_ = new ::std::string;
  }
  feed_title_tagid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcAdvInfo::mutable_feed_title_tagid() {
  _set_bit(10);
  if (feed_title_tagid_ == &_default_feed_title_tagid_) {
    feed_title_tagid_ = new ::std::string;
  }
  return feed_title_tagid_;
}

// optional bytes feed_poi_distance = 12;
inline bool ZtcAdvInfo::has_feed_poi_distance() const {
  return _has_bit(11);
}
inline void ZtcAdvInfo::clear_feed_poi_distance() {
  if (feed_poi_distance_ != &_default_feed_poi_distance_) {
    feed_poi_distance_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& ZtcAdvInfo::feed_poi_distance() const {
  return *feed_poi_distance_;
}
inline void ZtcAdvInfo::set_feed_poi_distance(const ::std::string& value) {
  _set_bit(11);
  if (feed_poi_distance_ == &_default_feed_poi_distance_) {
    feed_poi_distance_ = new ::std::string;
  }
  feed_poi_distance_->assign(value);
}
inline void ZtcAdvInfo::set_feed_poi_distance(const char* value) {
  _set_bit(11);
  if (feed_poi_distance_ == &_default_feed_poi_distance_) {
    feed_poi_distance_ = new ::std::string;
  }
  feed_poi_distance_->assign(value);
}
inline void ZtcAdvInfo::set_feed_poi_distance(const void* value, size_t size) {
  _set_bit(11);
  if (feed_poi_distance_ == &_default_feed_poi_distance_) {
    feed_poi_distance_ = new ::std::string;
  }
  feed_poi_distance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZtcAdvInfo::mutable_feed_poi_distance() {
  _set_bit(11);
  if (feed_poi_distance_ == &_default_feed_poi_distance_) {
    feed_poi_distance_ = new ::std::string;
  }
  return feed_poi_distance_;
}

// -------------------------------------------------------------------

// ZtcCsInfo

// repeated .ztc.interface.CsSearchResults cs_search_results = 1;
inline int ZtcCsInfo::cs_search_results_size() const {
  return cs_search_results_.size();
}
inline void ZtcCsInfo::clear_cs_search_results() {
  cs_search_results_.Clear();
}
inline const ::ztc::interface::CsSearchResults& ZtcCsInfo::cs_search_results(int index) const {
  return cs_search_results_.Get(index);
}
inline ::ztc::interface::CsSearchResults* ZtcCsInfo::mutable_cs_search_results(int index) {
  return cs_search_results_.Mutable(index);
}
inline ::ztc::interface::CsSearchResults* ZtcCsInfo::add_cs_search_results() {
  return cs_search_results_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::CsSearchResults >&
ZtcCsInfo::cs_search_results() const {
  return cs_search_results_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::CsSearchResults >*
ZtcCsInfo::mutable_cs_search_results() {
  return &cs_search_results_;
}

// -------------------------------------------------------------------

// CsSearchResults

// optional uint64 service_id = 1;
inline bool CsSearchResults::has_service_id() const {
  return _has_bit(0);
}
inline void CsSearchResults::clear_service_id() {
  service_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 CsSearchResults::service_id() const {
  return service_id_;
}
inline void CsSearchResults::set_service_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  service_id_ = value;
}

// optional uint64 target_id = 2;
inline bool CsSearchResults::has_target_id() const {
  return _has_bit(1);
}
inline void CsSearchResults::clear_target_id() {
  target_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 CsSearchResults::target_id() const {
  return target_id_;
}
inline void CsSearchResults::set_target_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  target_id_ = value;
}

// optional int64 score = 3;
inline bool CsSearchResults::has_score() const {
  return _has_bit(2);
}
inline void CsSearchResults::clear_score() {
  score_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 CsSearchResults::score() const {
  return score_;
}
inline void CsSearchResults::set_score(::google::protobuf::int64 value) {
  _set_bit(2);
  score_ = value;
}

// optional uint64 service_id_resouce = 4;
inline bool CsSearchResults::has_service_id_resouce() const {
  return _has_bit(3);
}
inline void CsSearchResults::clear_service_id_resouce() {
  service_id_resouce_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 CsSearchResults::service_id_resouce() const {
  return service_id_resouce_;
}
inline void CsSearchResults::set_service_id_resouce(::google::protobuf::uint64 value) {
  _set_bit(3);
  service_id_resouce_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace interface
}  // namespace ztc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ztc_5finterface_2eproto__INCLUDED
