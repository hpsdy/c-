// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bs_advinfo.proto

#ifndef PROTOBUF_bs_5fadvinfo_2eproto__INCLUDED
#define PROTOBUF_bs_5fadvinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ztc {
namespace interface {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bs_5fadvinfo_2eproto();
void protobuf_AssignDesc_bs_5fadvinfo_2eproto();
void protobuf_ShutdownFile_bs_5fadvinfo_2eproto();

class BsAdvInfo;
class MerchantInfo;
class DealInfo;
class AppointmentInfo;
class ShopInfo;

// ===================================================================

class BsAdvInfo : public ::google::protobuf::Message {
 public:
  BsAdvInfo();
  virtual ~BsAdvInfo();
  
  BsAdvInfo(const BsAdvInfo& from);
  
  inline BsAdvInfo& operator=(const BsAdvInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BsAdvInfo& default_instance();
  
  void Swap(BsAdvInfo* other);
  
  // implements Message ----------------------------------------------
  
  BsAdvInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BsAdvInfo& from);
  void MergeFrom(const BsAdvInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 user_id = 1;
  inline bool has_user_id() const;
  inline void clear_user_id();
  static const int kUserIdFieldNumber = 1;
  inline ::google::protobuf::uint32 user_id() const;
  inline void set_user_id(::google::protobuf::uint32 value);
  
  // optional uint32 plan_id = 2;
  inline bool has_plan_id() const;
  inline void clear_plan_id();
  static const int kPlanIdFieldNumber = 2;
  inline ::google::protobuf::uint32 plan_id() const;
  inline void set_plan_id(::google::protobuf::uint32 value);
  
  // optional uint32 unit_id = 3;
  inline bool has_unit_id() const;
  inline void clear_unit_id();
  static const int kUnitIdFieldNumber = 3;
  inline ::google::protobuf::uint32 unit_id() const;
  inline void set_unit_id(::google::protobuf::uint32 value);
  
  // optional uint64 winfo_id = 4;
  inline bool has_winfo_id() const;
  inline void clear_winfo_id();
  static const int kWinfoIdFieldNumber = 4;
  inline ::google::protobuf::uint64 winfo_id() const;
  inline void set_winfo_id(::google::protobuf::uint64 value);
  
  // optional uint64 idea_id = 5;
  inline bool has_idea_id() const;
  inline void clear_idea_id();
  static const int kIdeaIdFieldNumber = 5;
  inline ::google::protobuf::uint64 idea_id() const;
  inline void set_idea_id(::google::protobuf::uint64 value);
  
  // optional uint32 wmatch = 6;
  inline bool has_wmatch() const;
  inline void clear_wmatch();
  static const int kWmatchFieldNumber = 6;
  inline ::google::protobuf::uint32 wmatch() const;
  inline void set_wmatch(::google::protobuf::uint32 value);
  
  // optional uint32 deal_id = 7;
  inline bool has_deal_id() const;
  inline void clear_deal_id();
  static const int kDealIdFieldNumber = 7;
  inline ::google::protobuf::uint32 deal_id() const;
  inline void set_deal_id(::google::protobuf::uint32 value);
  
  // optional uint32 bid = 8;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 8;
  inline ::google::protobuf::uint32 bid() const;
  inline void set_bid(::google::protobuf::uint32 value);
  
  // optional bytes na_url = 9;
  inline bool has_na_url() const;
  inline void clear_na_url();
  static const int kNaUrlFieldNumber = 9;
  inline const ::std::string& na_url() const;
  inline void set_na_url(const ::std::string& value);
  inline void set_na_url(const char* value);
  inline void set_na_url(const void* value, size_t size);
  inline ::std::string* mutable_na_url();
  
  // optional bytes wap_url = 10;
  inline bool has_wap_url() const;
  inline void clear_wap_url();
  static const int kWapUrlFieldNumber = 10;
  inline const ::std::string& wap_url() const;
  inline void set_wap_url(const ::std::string& value);
  inline void set_wap_url(const char* value);
  inline void set_wap_url(const void* value, size_t size);
  inline ::std::string* mutable_wap_url();
  
  // repeated .ztc.interface.MerchantInfo merchant = 11;
  inline int merchant_size() const;
  inline void clear_merchant();
  static const int kMerchantFieldNumber = 11;
  inline const ::ztc::interface::MerchantInfo& merchant(int index) const;
  inline ::ztc::interface::MerchantInfo* mutable_merchant(int index);
  inline ::ztc::interface::MerchantInfo* add_merchant();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::MerchantInfo >&
      merchant() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::MerchantInfo >*
      mutable_merchant();
  
  // optional uint32 cpa = 12;
  inline bool has_cpa() const;
  inline void clear_cpa();
  static const int kCpaFieldNumber = 12;
  inline ::google::protobuf::uint32 cpa() const;
  inline void set_cpa(::google::protobuf::uint32 value);
  
  // optional uint64 zd_id = 13;
  inline bool has_zd_id() const;
  inline void clear_zd_id();
  static const int kZdIdFieldNumber = 13;
  inline ::google::protobuf::uint64 zd_id() const;
  inline void set_zd_id(::google::protobuf::uint64 value);
  
  // optional .ztc.interface.DealInfo deal = 14;
  inline bool has_deal() const;
  inline void clear_deal();
  static const int kDealFieldNumber = 14;
  inline const ::ztc::interface::DealInfo& deal() const;
  inline ::ztc::interface::DealInfo* mutable_deal();
  
  // optional bytes title = 15;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 15;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  
  // optional bytes desc1 = 16;
  inline bool has_desc1() const;
  inline void clear_desc1();
  static const int kDesc1FieldNumber = 16;
  inline const ::std::string& desc1() const;
  inline void set_desc1(const ::std::string& value);
  inline void set_desc1(const char* value);
  inline void set_desc1(const void* value, size_t size);
  inline ::std::string* mutable_desc1();
  
  // optional bytes desc2 = 17;
  inline bool has_desc2() const;
  inline void clear_desc2();
  static const int kDesc2FieldNumber = 17;
  inline const ::std::string& desc2() const;
  inline void set_desc2(const ::std::string& value);
  inline void set_desc2(const char* value);
  inline void set_desc2(const void* value, size_t size);
  inline ::std::string* mutable_desc2();
  
  // optional bool cat_filter_pass = 18;
  inline bool has_cat_filter_pass() const;
  inline void clear_cat_filter_pass();
  static const int kCatFilterPassFieldNumber = 18;
  inline bool cat_filter_pass() const;
  inline void set_cat_filter_pass(bool value);
  
  // optional uint32 appointment_id = 19;
  inline bool has_appointment_id() const;
  inline void clear_appointment_id();
  static const int kAppointmentIdFieldNumber = 19;
  inline ::google::protobuf::uint32 appointment_id() const;
  inline void set_appointment_id(::google::protobuf::uint32 value);
  
  // optional uint64 shop_id = 20;
  inline bool has_shop_id() const;
  inline void clear_shop_id();
  static const int kShopIdFieldNumber = 20;
  inline ::google::protobuf::uint64 shop_id() const;
  inline void set_shop_id(::google::protobuf::uint64 value);
  
  // optional .ztc.interface.AppointmentInfo appointment = 21;
  inline bool has_appointment() const;
  inline void clear_appointment();
  static const int kAppointmentFieldNumber = 21;
  inline const ::ztc::interface::AppointmentInfo& appointment() const;
  inline ::ztc::interface::AppointmentInfo* mutable_appointment();
  
  // optional .ztc.interface.ShopInfo shop = 22;
  inline bool has_shop() const;
  inline void clear_shop();
  static const int kShopFieldNumber = 22;
  inline const ::ztc::interface::ShopInfo& shop() const;
  inline ::ztc::interface::ShopInfo* mutable_shop();
  
  // optional uint32 adv_type = 23;
  inline bool has_adv_type() const;
  inline void clear_adv_type();
  static const int kAdvTypeFieldNumber = 23;
  inline ::google::protobuf::uint32 adv_type() const;
  inline void set_adv_type(::google::protobuf::uint32 value);
  
  // optional uint32 adv_extend_tag = 24;
  inline bool has_adv_extend_tag() const;
  inline void clear_adv_extend_tag();
  static const int kAdvExtendTagFieldNumber = 24;
  inline ::google::protobuf::uint32 adv_extend_tag() const;
  inline void set_adv_extend_tag(::google::protobuf::uint32 value);
  
  // optional uint32 area_flag = 25;
  inline bool has_area_flag() const;
  inline void clear_area_flag();
  static const int kAreaFlagFieldNumber = 25;
  inline ::google::protobuf::uint32 area_flag() const;
  inline void set_area_flag(::google::protobuf::uint32 value);
  
  // optional bytes pc_url = 26;
  inline bool has_pc_url() const;
  inline void clear_pc_url();
  static const int kPcUrlFieldNumber = 26;
  inline const ::std::string& pc_url() const;
  inline void set_pc_url(const ::std::string& value);
  inline void set_pc_url(const char* value);
  inline void set_pc_url(const void* value, size_t size);
  inline ::std::string* mutable_pc_url();
  
  // optional bytes feed_strategy = 27;
  inline bool has_feed_strategy() const;
  inline void clear_feed_strategy();
  static const int kFeedStrategyFieldNumber = 27;
  inline const ::std::string& feed_strategy() const;
  inline void set_feed_strategy(const ::std::string& value);
  inline void set_feed_strategy(const char* value);
  inline void set_feed_strategy(const void* value, size_t size);
  inline ::std::string* mutable_feed_strategy();
  
  // repeated uint64 service_id = 28;
  inline int service_id_size() const;
  inline void clear_service_id();
  static const int kServiceIdFieldNumber = 28;
  inline ::google::protobuf::uint64 service_id(int index) const;
  inline void set_service_id(int index, ::google::protobuf::uint64 value);
  inline void add_service_id(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      service_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_service_id();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.BsAdvInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 user_id_;
  ::google::protobuf::uint32 plan_id_;
  ::google::protobuf::uint32 unit_id_;
  ::google::protobuf::uint64 winfo_id_;
  ::google::protobuf::uint64 idea_id_;
  ::google::protobuf::uint32 wmatch_;
  ::google::protobuf::uint32 deal_id_;
  ::google::protobuf::uint32 bid_;
  ::std::string* na_url_;
  static const ::std::string _default_na_url_;
  ::std::string* wap_url_;
  static const ::std::string _default_wap_url_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::MerchantInfo > merchant_;
  ::google::protobuf::uint32 cpa_;
  ::google::protobuf::uint64 zd_id_;
  ::ztc::interface::DealInfo* deal_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* desc1_;
  static const ::std::string _default_desc1_;
  ::std::string* desc2_;
  static const ::std::string _default_desc2_;
  bool cat_filter_pass_;
  ::google::protobuf::uint32 appointment_id_;
  ::google::protobuf::uint64 shop_id_;
  ::ztc::interface::AppointmentInfo* appointment_;
  ::ztc::interface::ShopInfo* shop_;
  ::google::protobuf::uint32 adv_type_;
  ::google::protobuf::uint32 adv_extend_tag_;
  ::google::protobuf::uint32 area_flag_;
  ::std::string* pc_url_;
  static const ::std::string _default_pc_url_;
  ::std::string* feed_strategy_;
  static const ::std::string _default_feed_strategy_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > service_id_;
  friend void  protobuf_AddDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_AssignDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_ShutdownFile_bs_5fadvinfo_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(28 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BsAdvInfo* default_instance_;
};
// -------------------------------------------------------------------

class MerchantInfo : public ::google::protobuf::Message {
 public:
  MerchantInfo();
  virtual ~MerchantInfo();
  
  MerchantInfo(const MerchantInfo& from);
  
  inline MerchantInfo& operator=(const MerchantInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MerchantInfo& default_instance();
  
  void Swap(MerchantInfo* other);
  
  // implements Message ----------------------------------------------
  
  MerchantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MerchantInfo& from);
  void MergeFrom(const MerchantInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 merchant_id = 1;
  inline bool has_merchant_id() const;
  inline void clear_merchant_id();
  static const int kMerchantIdFieldNumber = 1;
  inline ::google::protobuf::uint32 merchant_id() const;
  inline void set_merchant_id(::google::protobuf::uint32 value);
  
  // optional double latitude = 2;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 2;
  inline double latitude() const;
  inline void set_latitude(double value);
  
  // optional double longitude = 3;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 3;
  inline double longitude() const;
  inline void set_longitude(double value);
  
  // optional bytes na_url = 4;
  inline bool has_na_url() const;
  inline void clear_na_url();
  static const int kNaUrlFieldNumber = 4;
  inline const ::std::string& na_url() const;
  inline void set_na_url(const ::std::string& value);
  inline void set_na_url(const char* value);
  inline void set_na_url(const void* value, size_t size);
  inline ::std::string* mutable_na_url();
  
  // optional bytes wap_url = 5;
  inline bool has_wap_url() const;
  inline void clear_wap_url();
  static const int kWapUrlFieldNumber = 5;
  inline const ::std::string& wap_url() const;
  inline void set_wap_url(const ::std::string& value);
  inline void set_wap_url(const char* value);
  inline void set_wap_url(const void* value, size_t size);
  inline ::std::string* mutable_wap_url();
  
  // repeated uint32 deals = 6;
  inline int deals_size() const;
  inline void clear_deals();
  static const int kDealsFieldNumber = 6;
  inline ::google::protobuf::uint32 deals(int index) const;
  inline void set_deals(int index, ::google::protobuf::uint32 value);
  inline void add_deals(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      deals() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_deals();
  
  // optional bytes merchant_name = 7;
  inline bool has_merchant_name() const;
  inline void clear_merchant_name();
  static const int kMerchantNameFieldNumber = 7;
  inline const ::std::string& merchant_name() const;
  inline void set_merchant_name(const ::std::string& value);
  inline void set_merchant_name(const char* value);
  inline void set_merchant_name(const void* value, size_t size);
  inline ::std::string* mutable_merchant_name();
  
  // optional bytes biz_area_list = 8;
  inline bool has_biz_area_list() const;
  inline void clear_biz_area_list();
  static const int kBizAreaListFieldNumber = 8;
  inline const ::std::string& biz_area_list() const;
  inline void set_biz_area_list(const ::std::string& value);
  inline void set_biz_area_list(const char* value);
  inline void set_biz_area_list(const void* value, size_t size);
  inline ::std::string* mutable_biz_area_list();
  
  // optional bytes phone_list = 9;
  inline bool has_phone_list() const;
  inline void clear_phone_list();
  static const int kPhoneListFieldNumber = 9;
  inline const ::std::string& phone_list() const;
  inline void set_phone_list(const ::std::string& value);
  inline void set_phone_list(const char* value);
  inline void set_phone_list(const void* value, size_t size);
  inline ::std::string* mutable_phone_list();
  
  // optional uint32 merchant_distance = 10;
  inline bool has_merchant_distance() const;
  inline void clear_merchant_distance();
  static const int kMerchantDistanceFieldNumber = 10;
  inline ::google::protobuf::uint32 merchant_distance() const;
  inline void set_merchant_distance(::google::protobuf::uint32 value);
  
  // repeated bytes biz_area_id_list = 11;
  inline int biz_area_id_list_size() const;
  inline void clear_biz_area_id_list();
  static const int kBizAreaIdListFieldNumber = 11;
  inline const ::std::string& biz_area_id_list(int index) const;
  inline ::std::string* mutable_biz_area_id_list(int index);
  inline void set_biz_area_id_list(int index, const ::std::string& value);
  inline void set_biz_area_id_list(int index, const char* value);
  inline void set_biz_area_id_list(int index, const void* value, size_t size);
  inline ::std::string* add_biz_area_id_list();
  inline void add_biz_area_id_list(const ::std::string& value);
  inline void add_biz_area_id_list(const char* value);
  inline void add_biz_area_id_list(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& biz_area_id_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_biz_area_id_list();
  
  // optional uint64 nuomi_city_id = 12;
  inline bool has_nuomi_city_id() const;
  inline void clear_nuomi_city_id();
  static const int kNuomiCityIdFieldNumber = 12;
  inline ::google::protobuf::uint64 nuomi_city_id() const;
  inline void set_nuomi_city_id(::google::protobuf::uint64 value);
  
  // optional uint32 fc_prov_id = 13;
  inline bool has_fc_prov_id() const;
  inline void clear_fc_prov_id();
  static const int kFcProvIdFieldNumber = 13;
  inline ::google::protobuf::uint32 fc_prov_id() const;
  inline void set_fc_prov_id(::google::protobuf::uint32 value);
  
  // optional uint32 fc_city_id = 14;
  inline bool has_fc_city_id() const;
  inline void clear_fc_city_id();
  static const int kFcCityIdFieldNumber = 14;
  inline ::google::protobuf::uint32 fc_city_id() const;
  inline void set_fc_city_id(::google::protobuf::uint32 value);
  
  // optional bytes fc_city_name = 15;
  inline bool has_fc_city_name() const;
  inline void clear_fc_city_name();
  static const int kFcCityNameFieldNumber = 15;
  inline const ::std::string& fc_city_name() const;
  inline void set_fc_city_name(const ::std::string& value);
  inline void set_fc_city_name(const char* value);
  inline void set_fc_city_name(const void* value, size_t size);
  inline ::std::string* mutable_fc_city_name();
  
  // optional bytes business_hours = 16;
  inline bool has_business_hours() const;
  inline void clear_business_hours();
  static const int kBusinessHoursFieldNumber = 16;
  inline const ::std::string& business_hours() const;
  inline void set_business_hours(const ::std::string& value);
  inline void set_business_hours(const char* value);
  inline void set_business_hours(const void* value, size_t size);
  inline ::std::string* mutable_business_hours();
  
  // optional bytes address = 17;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 17;
  inline const ::std::string& address() const;
  inline void set_address(const ::std::string& value);
  inline void set_address(const char* value);
  inline void set_address(const void* value, size_t size);
  inline ::std::string* mutable_address();
  
  // repeated .ztc.interface.DealInfo deals_info = 18;
  inline int deals_info_size() const;
  inline void clear_deals_info();
  static const int kDealsInfoFieldNumber = 18;
  inline const ::ztc::interface::DealInfo& deals_info(int index) const;
  inline ::ztc::interface::DealInfo* mutable_deals_info(int index);
  inline ::ztc::interface::DealInfo* add_deals_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::DealInfo >&
      deals_info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::DealInfo >*
      mutable_deals_info();
  
  // optional uint64 map_bid = 19;
  inline bool has_map_bid() const;
  inline void clear_map_bid();
  static const int kMapBidFieldNumber = 19;
  inline ::google::protobuf::uint64 map_bid() const;
  inline void set_map_bid(::google::protobuf::uint64 value);
  
  // optional bytes map_trade = 20;
  inline bool has_map_trade() const;
  inline void clear_map_trade();
  static const int kMapTradeFieldNumber = 20;
  inline const ::std::string& map_trade() const;
  inline void set_map_trade(const ::std::string& value);
  inline void set_map_trade(const char* value);
  inline void set_map_trade(const void* value, size_t size);
  inline ::std::string* mutable_map_trade();
  
  // optional int32 map_brand_id = 21;
  inline bool has_map_brand_id() const;
  inline void clear_map_brand_id();
  static const int kMapBrandIdFieldNumber = 21;
  inline ::google::protobuf::int32 map_brand_id() const;
  inline void set_map_brand_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ztc.interface.MerchantInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 merchant_id_;
  double latitude_;
  double longitude_;
  ::std::string* na_url_;
  static const ::std::string _default_na_url_;
  ::std::string* wap_url_;
  static const ::std::string _default_wap_url_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > deals_;
  ::std::string* merchant_name_;
  static const ::std::string _default_merchant_name_;
  ::std::string* biz_area_list_;
  static const ::std::string _default_biz_area_list_;
  ::std::string* phone_list_;
  static const ::std::string _default_phone_list_;
  ::google::protobuf::uint32 merchant_distance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> biz_area_id_list_;
  ::google::protobuf::uint64 nuomi_city_id_;
  ::google::protobuf::uint32 fc_prov_id_;
  ::google::protobuf::uint32 fc_city_id_;
  ::std::string* fc_city_name_;
  static const ::std::string _default_fc_city_name_;
  ::std::string* business_hours_;
  static const ::std::string _default_business_hours_;
  ::std::string* address_;
  static const ::std::string _default_address_;
  ::google::protobuf::RepeatedPtrField< ::ztc::interface::DealInfo > deals_info_;
  ::google::protobuf::uint64 map_bid_;
  ::std::string* map_trade_;
  static const ::std::string _default_map_trade_;
  ::google::protobuf::int32 map_brand_id_;
  friend void  protobuf_AddDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_AssignDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_ShutdownFile_bs_5fadvinfo_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static MerchantInfo* default_instance_;
};
// -------------------------------------------------------------------

class DealInfo : public ::google::protobuf::Message {
 public:
  DealInfo();
  virtual ~DealInfo();
  
  DealInfo(const DealInfo& from);
  
  inline DealInfo& operator=(const DealInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DealInfo& default_instance();
  
  void Swap(DealInfo* other);
  
  // implements Message ----------------------------------------------
  
  DealInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DealInfo& from);
  void MergeFrom(const DealInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 bought = 1;
  inline bool has_bought() const;
  inline void clear_bought();
  static const int kBoughtFieldNumber = 1;
  inline ::google::protobuf::uint32 bought() const;
  inline void set_bought(::google::protobuf::uint32 value);
  
  // optional bytes market_price = 2;
  inline bool has_market_price() const;
  inline void clear_market_price();
  static const int kMarketPriceFieldNumber = 2;
  inline const ::std::string& market_price() const;
  inline void set_market_price(const ::std::string& value);
  inline void set_market_price(const char* value);
  inline void set_market_price(const void* value, size_t size);
  inline ::std::string* mutable_market_price();
  
  // optional bytes current_price = 3;
  inline bool has_current_price() const;
  inline void clear_current_price();
  static const int kCurrentPriceFieldNumber = 3;
  inline const ::std::string& current_price() const;
  inline void set_current_price(const ::std::string& value);
  inline void set_current_price(const char* value);
  inline void set_current_price(const void* value, size_t size);
  inline ::std::string* mutable_current_price();
  
  // optional uint32 free_appointment = 4;
  inline bool has_free_appointment() const;
  inline void clear_free_appointment();
  static const int kFreeAppointmentFieldNumber = 4;
  inline ::google::protobuf::uint32 free_appointment() const;
  inline void set_free_appointment(::google::protobuf::uint32 value);
  
  // optional uint32 refund_strategy_type = 5;
  inline bool has_refund_strategy_type() const;
  inline void clear_refund_strategy_type();
  static const int kRefundStrategyTypeFieldNumber = 5;
  inline ::google::protobuf::uint32 refund_strategy_type() const;
  inline void set_refund_strategy_type(::google::protobuf::uint32 value);
  
  // optional uint32 comment_num = 6;
  inline bool has_comment_num() const;
  inline void clear_comment_num();
  static const int kCommentNumFieldNumber = 6;
  inline ::google::protobuf::uint32 comment_num() const;
  inline void set_comment_num(::google::protobuf::uint32 value);
  
  // optional bytes comment_score = 7;
  inline bool has_comment_score() const;
  inline void clear_comment_score();
  static const int kCommentScoreFieldNumber = 7;
  inline const ::std::string& comment_score() const;
  inline void set_comment_score(const ::std::string& value);
  inline void set_comment_score(const char* value);
  inline void set_comment_score(const void* value, size_t size);
  inline ::std::string* mutable_comment_score();
  
  // optional bytes comment_mini = 8;
  inline bool has_comment_mini() const;
  inline void clear_comment_mini();
  static const int kCommentMiniFieldNumber = 8;
  inline const ::std::string& comment_mini() const;
  inline void set_comment_mini(const ::std::string& value);
  inline void set_comment_mini(const char* value);
  inline void set_comment_mini(const void* value, size_t size);
  inline ::std::string* mutable_comment_mini();
  
  // optional bytes image = 9;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 9;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const void* value, size_t size);
  inline ::std::string* mutable_image();
  
  // optional bytes business_title = 10;
  inline bool has_business_title() const;
  inline void clear_business_title();
  static const int kBusinessTitleFieldNumber = 10;
  inline const ::std::string& business_title() const;
  inline void set_business_title(const ::std::string& value);
  inline void set_business_title(const char* value);
  inline void set_business_title(const void* value, size_t size);
  inline ::std::string* mutable_business_title();
  
  // optional bytes title = 11;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 11;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  
  // optional bytes mini_title = 12;
  inline bool has_mini_title() const;
  inline void clear_mini_title();
  static const int kMiniTitleFieldNumber = 12;
  inline const ::std::string& mini_title() const;
  inline void set_mini_title(const ::std::string& value);
  inline void set_mini_title(const char* value);
  inline void set_mini_title(const void* value, size_t size);
  inline ::std::string* mutable_mini_title();
  
  // optional uint32 deal_type = 13;
  inline bool has_deal_type() const;
  inline void clear_deal_type();
  static const int kDealTypeFieldNumber = 13;
  inline ::google::protobuf::uint32 deal_type() const;
  inline void set_deal_type(::google::protobuf::uint32 value);
  
  // repeated uint32 merchant_ids = 14;
  inline int merchant_ids_size() const;
  inline void clear_merchant_ids();
  static const int kMerchantIdsFieldNumber = 14;
  inline ::google::protobuf::uint32 merchant_ids(int index) const;
  inline void set_merchant_ids(int index, ::google::protobuf::uint32 value);
  inline void add_merchant_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      merchant_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_merchant_ids();
  
  // repeated uint32 cate1_ids = 15;
  inline int cate1_ids_size() const;
  inline void clear_cate1_ids();
  static const int kCate1IdsFieldNumber = 15;
  inline ::google::protobuf::uint32 cate1_ids(int index) const;
  inline void set_cate1_ids(int index, ::google::protobuf::uint32 value);
  inline void add_cate1_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cate1_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cate1_ids();
  
  // repeated bytes cate1_names = 16;
  inline int cate1_names_size() const;
  inline void clear_cate1_names();
  static const int kCate1NamesFieldNumber = 16;
  inline const ::std::string& cate1_names(int index) const;
  inline ::std::string* mutable_cate1_names(int index);
  inline void set_cate1_names(int index, const ::std::string& value);
  inline void set_cate1_names(int index, const char* value);
  inline void set_cate1_names(int index, const void* value, size_t size);
  inline ::std::string* add_cate1_names();
  inline void add_cate1_names(const ::std::string& value);
  inline void add_cate1_names(const char* value);
  inline void add_cate1_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cate1_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cate1_names();
  
  // repeated uint32 cate2_ids = 17;
  inline int cate2_ids_size() const;
  inline void clear_cate2_ids();
  static const int kCate2IdsFieldNumber = 17;
  inline ::google::protobuf::uint32 cate2_ids(int index) const;
  inline void set_cate2_ids(int index, ::google::protobuf::uint32 value);
  inline void add_cate2_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cate2_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cate2_ids();
  
  // repeated bytes cate2_names = 18;
  inline int cate2_names_size() const;
  inline void clear_cate2_names();
  static const int kCate2NamesFieldNumber = 18;
  inline const ::std::string& cate2_names(int index) const;
  inline ::std::string* mutable_cate2_names(int index);
  inline void set_cate2_names(int index, const ::std::string& value);
  inline void set_cate2_names(int index, const char* value);
  inline void set_cate2_names(int index, const void* value, size_t size);
  inline ::std::string* add_cate2_names();
  inline void add_cate2_names(const ::std::string& value);
  inline void add_cate2_names(const char* value);
  inline void add_cate2_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cate2_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cate2_names();
  
  // repeated uint32 cate3_ids = 19;
  inline int cate3_ids_size() const;
  inline void clear_cate3_ids();
  static const int kCate3IdsFieldNumber = 19;
  inline ::google::protobuf::uint32 cate3_ids(int index) const;
  inline void set_cate3_ids(int index, ::google::protobuf::uint32 value);
  inline void add_cate3_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cate3_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cate3_ids();
  
  // repeated bytes cate3_names = 20;
  inline int cate3_names_size() const;
  inline void clear_cate3_names();
  static const int kCate3NamesFieldNumber = 20;
  inline const ::std::string& cate3_names(int index) const;
  inline ::std::string* mutable_cate3_names(int index);
  inline void set_cate3_names(int index, const ::std::string& value);
  inline void set_cate3_names(int index, const char* value);
  inline void set_cate3_names(int index, const void* value, size_t size);
  inline ::std::string* add_cate3_names();
  inline void add_cate3_names(const ::std::string& value);
  inline void add_cate3_names(const char* value);
  inline void add_cate3_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cate3_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cate3_names();
  
  // optional bytes na_url = 21;
  inline bool has_na_url() const;
  inline void clear_na_url();
  static const int kNaUrlFieldNumber = 21;
  inline const ::std::string& na_url() const;
  inline void set_na_url(const ::std::string& value);
  inline void set_na_url(const char* value);
  inline void set_na_url(const void* value, size_t size);
  inline ::std::string* mutable_na_url();
  
  // optional bytes wap_url = 22;
  inline bool has_wap_url() const;
  inline void clear_wap_url();
  static const int kWapUrlFieldNumber = 22;
  inline const ::std::string& wap_url() const;
  inline void set_wap_url(const ::std::string& value);
  inline void set_wap_url(const char* value);
  inline void set_wap_url(const void* value, size_t size);
  inline ::std::string* mutable_wap_url();
  
  // optional bytes redirect_url = 23;
  inline bool has_redirect_url() const;
  inline void clear_redirect_url();
  static const int kRedirectUrlFieldNumber = 23;
  inline const ::std::string& redirect_url() const;
  inline void set_redirect_url(const ::std::string& value);
  inline void set_redirect_url(const char* value);
  inline void set_redirect_url(const void* value, size_t size);
  inline ::std::string* mutable_redirect_url();
  
  // optional bytes free_pay_discount = 24;
  inline bool has_free_pay_discount() const;
  inline void clear_free_pay_discount();
  static const int kFreePayDiscountFieldNumber = 24;
  inline const ::std::string& free_pay_discount() const;
  inline void set_free_pay_discount(const ::std::string& value);
  inline void set_free_pay_discount(const char* value);
  inline void set_free_pay_discount(const void* value, size_t size);
  inline ::std::string* mutable_free_pay_discount();
  
  // optional bytes start_time = 25;
  inline bool has_start_time() const;
  inline void clear_start_time();
  static const int kStartTimeFieldNumber = 25;
  inline const ::std::string& start_time() const;
  inline void set_start_time(const ::std::string& value);
  inline void set_start_time(const char* value);
  inline void set_start_time(const void* value, size_t size);
  inline ::std::string* mutable_start_time();
  
  // optional bytes end_time = 26;
  inline bool has_end_time() const;
  inline void clear_end_time();
  static const int kEndTimeFieldNumber = 26;
  inline const ::std::string& end_time() const;
  inline void set_end_time(const ::std::string& value);
  inline void set_end_time(const char* value);
  inline void set_end_time(const void* value, size_t size);
  inline ::std::string* mutable_end_time();
  
  // optional uint32 deal_id = 27;
  inline bool has_deal_id() const;
  inline void clear_deal_id();
  static const int kDealIdFieldNumber = 27;
  inline ::google::protobuf::uint32 deal_id() const;
  inline void set_deal_id(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ztc.interface.DealInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 bought_;
  ::std::string* market_price_;
  static const ::std::string _default_market_price_;
  ::std::string* current_price_;
  static const ::std::string _default_current_price_;
  ::google::protobuf::uint32 free_appointment_;
  ::google::protobuf::uint32 refund_strategy_type_;
  ::google::protobuf::uint32 comment_num_;
  ::std::string* comment_score_;
  static const ::std::string _default_comment_score_;
  ::std::string* comment_mini_;
  static const ::std::string _default_comment_mini_;
  ::std::string* image_;
  static const ::std::string _default_image_;
  ::std::string* business_title_;
  static const ::std::string _default_business_title_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* mini_title_;
  static const ::std::string _default_mini_title_;
  ::google::protobuf::uint32 deal_type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > merchant_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cate1_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cate1_names_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cate2_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cate2_names_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cate3_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cate3_names_;
  ::std::string* na_url_;
  static const ::std::string _default_na_url_;
  ::std::string* wap_url_;
  static const ::std::string _default_wap_url_;
  ::std::string* redirect_url_;
  static const ::std::string _default_redirect_url_;
  ::std::string* free_pay_discount_;
  static const ::std::string _default_free_pay_discount_;
  ::std::string* start_time_;
  static const ::std::string _default_start_time_;
  ::std::string* end_time_;
  static const ::std::string _default_end_time_;
  ::google::protobuf::uint32 deal_id_;
  friend void  protobuf_AddDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_AssignDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_ShutdownFile_bs_5fadvinfo_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(27 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DealInfo* default_instance_;
};
// -------------------------------------------------------------------

class AppointmentInfo : public ::google::protobuf::Message {
 public:
  AppointmentInfo();
  virtual ~AppointmentInfo();
  
  AppointmentInfo(const AppointmentInfo& from);
  
  inline AppointmentInfo& operator=(const AppointmentInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppointmentInfo& default_instance();
  
  void Swap(AppointmentInfo* other);
  
  // implements Message ----------------------------------------------
  
  AppointmentInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AppointmentInfo& from);
  void MergeFrom(const AppointmentInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint32 count = 1;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 1;
  inline ::google::protobuf::uint32 count() const;
  inline void set_count(::google::protobuf::uint32 value);
  
  // optional bytes title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  
  // optional bytes image = 3;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 3;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const void* value, size_t size);
  inline ::std::string* mutable_image();
  
  // repeated uint32 cate1_ids = 4;
  inline int cate1_ids_size() const;
  inline void clear_cate1_ids();
  static const int kCate1IdsFieldNumber = 4;
  inline ::google::protobuf::uint32 cate1_ids(int index) const;
  inline void set_cate1_ids(int index, ::google::protobuf::uint32 value);
  inline void add_cate1_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cate1_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cate1_ids();
  
  // repeated uint32 cate2_ids = 5;
  inline int cate2_ids_size() const;
  inline void clear_cate2_ids();
  static const int kCate2IdsFieldNumber = 5;
  inline ::google::protobuf::uint32 cate2_ids(int index) const;
  inline void set_cate2_ids(int index, ::google::protobuf::uint32 value);
  inline void add_cate2_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cate2_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cate2_ids();
  
  // repeated uint32 cate3_ids = 6;
  inline int cate3_ids_size() const;
  inline void clear_cate3_ids();
  static const int kCate3IdsFieldNumber = 6;
  inline ::google::protobuf::uint32 cate3_ids(int index) const;
  inline void set_cate3_ids(int index, ::google::protobuf::uint32 value);
  inline void add_cate3_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cate3_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cate3_ids();
  
  // repeated bytes cate1_names = 7;
  inline int cate1_names_size() const;
  inline void clear_cate1_names();
  static const int kCate1NamesFieldNumber = 7;
  inline const ::std::string& cate1_names(int index) const;
  inline ::std::string* mutable_cate1_names(int index);
  inline void set_cate1_names(int index, const ::std::string& value);
  inline void set_cate1_names(int index, const char* value);
  inline void set_cate1_names(int index, const void* value, size_t size);
  inline ::std::string* add_cate1_names();
  inline void add_cate1_names(const ::std::string& value);
  inline void add_cate1_names(const char* value);
  inline void add_cate1_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cate1_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cate1_names();
  
  // repeated bytes cate2_names = 8;
  inline int cate2_names_size() const;
  inline void clear_cate2_names();
  static const int kCate2NamesFieldNumber = 8;
  inline const ::std::string& cate2_names(int index) const;
  inline ::std::string* mutable_cate2_names(int index);
  inline void set_cate2_names(int index, const ::std::string& value);
  inline void set_cate2_names(int index, const char* value);
  inline void set_cate2_names(int index, const void* value, size_t size);
  inline ::std::string* add_cate2_names();
  inline void add_cate2_names(const ::std::string& value);
  inline void add_cate2_names(const char* value);
  inline void add_cate2_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cate2_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cate2_names();
  
  // repeated bytes cate3_names = 9;
  inline int cate3_names_size() const;
  inline void clear_cate3_names();
  static const int kCate3NamesFieldNumber = 9;
  inline const ::std::string& cate3_names(int index) const;
  inline ::std::string* mutable_cate3_names(int index);
  inline void set_cate3_names(int index, const ::std::string& value);
  inline void set_cate3_names(int index, const char* value);
  inline void set_cate3_names(int index, const void* value, size_t size);
  inline ::std::string* add_cate3_names();
  inline void add_cate3_names(const ::std::string& value);
  inline void add_cate3_names(const char* value);
  inline void add_cate3_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cate3_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cate3_names();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.AppointmentInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint32 count_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* image_;
  static const ::std::string _default_image_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cate1_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cate2_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cate3_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cate1_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cate2_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cate3_names_;
  friend void  protobuf_AddDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_AssignDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_ShutdownFile_bs_5fadvinfo_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AppointmentInfo* default_instance_;
};
// -------------------------------------------------------------------

class ShopInfo : public ::google::protobuf::Message {
 public:
  ShopInfo();
  virtual ~ShopInfo();
  
  ShopInfo(const ShopInfo& from);
  
  inline ShopInfo& operator=(const ShopInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ShopInfo& default_instance();
  
  void Swap(ShopInfo* other);
  
  // implements Message ----------------------------------------------
  
  ShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShopInfo& from);
  void MergeFrom(const ShopInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes comment_score = 1;
  inline bool has_comment_score() const;
  inline void clear_comment_score();
  static const int kCommentScoreFieldNumber = 1;
  inline const ::std::string& comment_score() const;
  inline void set_comment_score(const ::std::string& value);
  inline void set_comment_score(const char* value);
  inline void set_comment_score(const void* value, size_t size);
  inline ::std::string* mutable_comment_score();
  
  // optional uint32 comment_num = 2;
  inline bool has_comment_num() const;
  inline void clear_comment_num();
  static const int kCommentNumFieldNumber = 2;
  inline ::google::protobuf::uint32 comment_num() const;
  inline void set_comment_num(::google::protobuf::uint32 value);
  
  // optional bytes title = 3;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 3;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const void* value, size_t size);
  inline ::std::string* mutable_title();
  
  // optional bytes image = 4;
  inline bool has_image() const;
  inline void clear_image();
  static const int kImageFieldNumber = 4;
  inline const ::std::string& image() const;
  inline void set_image(const ::std::string& value);
  inline void set_image(const char* value);
  inline void set_image(const void* value, size_t size);
  inline ::std::string* mutable_image();
  
  // repeated uint32 cate1_ids = 5;
  inline int cate1_ids_size() const;
  inline void clear_cate1_ids();
  static const int kCate1IdsFieldNumber = 5;
  inline ::google::protobuf::uint32 cate1_ids(int index) const;
  inline void set_cate1_ids(int index, ::google::protobuf::uint32 value);
  inline void add_cate1_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cate1_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cate1_ids();
  
  // repeated uint32 cate2_ids = 6;
  inline int cate2_ids_size() const;
  inline void clear_cate2_ids();
  static const int kCate2IdsFieldNumber = 6;
  inline ::google::protobuf::uint32 cate2_ids(int index) const;
  inline void set_cate2_ids(int index, ::google::protobuf::uint32 value);
  inline void add_cate2_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cate2_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cate2_ids();
  
  // repeated uint32 cate3_ids = 7;
  inline int cate3_ids_size() const;
  inline void clear_cate3_ids();
  static const int kCate3IdsFieldNumber = 7;
  inline ::google::protobuf::uint32 cate3_ids(int index) const;
  inline void set_cate3_ids(int index, ::google::protobuf::uint32 value);
  inline void add_cate3_ids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      cate3_ids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_cate3_ids();
  
  // repeated bytes cate1_names = 8;
  inline int cate1_names_size() const;
  inline void clear_cate1_names();
  static const int kCate1NamesFieldNumber = 8;
  inline const ::std::string& cate1_names(int index) const;
  inline ::std::string* mutable_cate1_names(int index);
  inline void set_cate1_names(int index, const ::std::string& value);
  inline void set_cate1_names(int index, const char* value);
  inline void set_cate1_names(int index, const void* value, size_t size);
  inline ::std::string* add_cate1_names();
  inline void add_cate1_names(const ::std::string& value);
  inline void add_cate1_names(const char* value);
  inline void add_cate1_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cate1_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cate1_names();
  
  // repeated bytes cate2_names = 9;
  inline int cate2_names_size() const;
  inline void clear_cate2_names();
  static const int kCate2NamesFieldNumber = 9;
  inline const ::std::string& cate2_names(int index) const;
  inline ::std::string* mutable_cate2_names(int index);
  inline void set_cate2_names(int index, const ::std::string& value);
  inline void set_cate2_names(int index, const char* value);
  inline void set_cate2_names(int index, const void* value, size_t size);
  inline ::std::string* add_cate2_names();
  inline void add_cate2_names(const ::std::string& value);
  inline void add_cate2_names(const char* value);
  inline void add_cate2_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cate2_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cate2_names();
  
  // repeated bytes cate3_names = 10;
  inline int cate3_names_size() const;
  inline void clear_cate3_names();
  static const int kCate3NamesFieldNumber = 10;
  inline const ::std::string& cate3_names(int index) const;
  inline ::std::string* mutable_cate3_names(int index);
  inline void set_cate3_names(int index, const ::std::string& value);
  inline void set_cate3_names(int index, const char* value);
  inline void set_cate3_names(int index, const void* value, size_t size);
  inline ::std::string* add_cate3_names();
  inline void add_cate3_names(const ::std::string& value);
  inline void add_cate3_names(const char* value);
  inline void add_cate3_names(const void* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& cate3_names() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_cate3_names();
  
  // @@protoc_insertion_point(class_scope:ztc.interface.ShopInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* comment_score_;
  static const ::std::string _default_comment_score_;
  ::google::protobuf::uint32 comment_num_;
  ::std::string* title_;
  static const ::std::string _default_title_;
  ::std::string* image_;
  static const ::std::string _default_image_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cate1_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cate2_ids_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > cate3_ids_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cate1_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cate2_names_;
  ::google::protobuf::RepeatedPtrField< ::std::string> cate3_names_;
  friend void  protobuf_AddDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_AssignDesc_bs_5fadvinfo_2eproto();
  friend void protobuf_ShutdownFile_bs_5fadvinfo_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static ShopInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// BsAdvInfo

// optional uint32 user_id = 1;
inline bool BsAdvInfo::has_user_id() const {
  return _has_bit(0);
}
inline void BsAdvInfo::clear_user_id() {
  user_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 BsAdvInfo::user_id() const {
  return user_id_;
}
inline void BsAdvInfo::set_user_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  user_id_ = value;
}

// optional uint32 plan_id = 2;
inline bool BsAdvInfo::has_plan_id() const {
  return _has_bit(1);
}
inline void BsAdvInfo::clear_plan_id() {
  plan_id_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 BsAdvInfo::plan_id() const {
  return plan_id_;
}
inline void BsAdvInfo::set_plan_id(::google::protobuf::uint32 value) {
  _set_bit(1);
  plan_id_ = value;
}

// optional uint32 unit_id = 3;
inline bool BsAdvInfo::has_unit_id() const {
  return _has_bit(2);
}
inline void BsAdvInfo::clear_unit_id() {
  unit_id_ = 0u;
  _clear_bit(2);
}
inline ::google::protobuf::uint32 BsAdvInfo::unit_id() const {
  return unit_id_;
}
inline void BsAdvInfo::set_unit_id(::google::protobuf::uint32 value) {
  _set_bit(2);
  unit_id_ = value;
}

// optional uint64 winfo_id = 4;
inline bool BsAdvInfo::has_winfo_id() const {
  return _has_bit(3);
}
inline void BsAdvInfo::clear_winfo_id() {
  winfo_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(3);
}
inline ::google::protobuf::uint64 BsAdvInfo::winfo_id() const {
  return winfo_id_;
}
inline void BsAdvInfo::set_winfo_id(::google::protobuf::uint64 value) {
  _set_bit(3);
  winfo_id_ = value;
}

// optional uint64 idea_id = 5;
inline bool BsAdvInfo::has_idea_id() const {
  return _has_bit(4);
}
inline void BsAdvInfo::clear_idea_id() {
  idea_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(4);
}
inline ::google::protobuf::uint64 BsAdvInfo::idea_id() const {
  return idea_id_;
}
inline void BsAdvInfo::set_idea_id(::google::protobuf::uint64 value) {
  _set_bit(4);
  idea_id_ = value;
}

// optional uint32 wmatch = 6;
inline bool BsAdvInfo::has_wmatch() const {
  return _has_bit(5);
}
inline void BsAdvInfo::clear_wmatch() {
  wmatch_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 BsAdvInfo::wmatch() const {
  return wmatch_;
}
inline void BsAdvInfo::set_wmatch(::google::protobuf::uint32 value) {
  _set_bit(5);
  wmatch_ = value;
}

// optional uint32 deal_id = 7;
inline bool BsAdvInfo::has_deal_id() const {
  return _has_bit(6);
}
inline void BsAdvInfo::clear_deal_id() {
  deal_id_ = 0u;
  _clear_bit(6);
}
inline ::google::protobuf::uint32 BsAdvInfo::deal_id() const {
  return deal_id_;
}
inline void BsAdvInfo::set_deal_id(::google::protobuf::uint32 value) {
  _set_bit(6);
  deal_id_ = value;
}

// optional uint32 bid = 8;
inline bool BsAdvInfo::has_bid() const {
  return _has_bit(7);
}
inline void BsAdvInfo::clear_bid() {
  bid_ = 0u;
  _clear_bit(7);
}
inline ::google::protobuf::uint32 BsAdvInfo::bid() const {
  return bid_;
}
inline void BsAdvInfo::set_bid(::google::protobuf::uint32 value) {
  _set_bit(7);
  bid_ = value;
}

// optional bytes na_url = 9;
inline bool BsAdvInfo::has_na_url() const {
  return _has_bit(8);
}
inline void BsAdvInfo::clear_na_url() {
  if (na_url_ != &_default_na_url_) {
    na_url_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& BsAdvInfo::na_url() const {
  return *na_url_;
}
inline void BsAdvInfo::set_na_url(const ::std::string& value) {
  _set_bit(8);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  na_url_->assign(value);
}
inline void BsAdvInfo::set_na_url(const char* value) {
  _set_bit(8);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  na_url_->assign(value);
}
inline void BsAdvInfo::set_na_url(const void* value, size_t size) {
  _set_bit(8);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  na_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BsAdvInfo::mutable_na_url() {
  _set_bit(8);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  return na_url_;
}

// optional bytes wap_url = 10;
inline bool BsAdvInfo::has_wap_url() const {
  return _has_bit(9);
}
inline void BsAdvInfo::clear_wap_url() {
  if (wap_url_ != &_default_wap_url_) {
    wap_url_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& BsAdvInfo::wap_url() const {
  return *wap_url_;
}
inline void BsAdvInfo::set_wap_url(const ::std::string& value) {
  _set_bit(9);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  wap_url_->assign(value);
}
inline void BsAdvInfo::set_wap_url(const char* value) {
  _set_bit(9);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  wap_url_->assign(value);
}
inline void BsAdvInfo::set_wap_url(const void* value, size_t size) {
  _set_bit(9);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  wap_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BsAdvInfo::mutable_wap_url() {
  _set_bit(9);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  return wap_url_;
}

// repeated .ztc.interface.MerchantInfo merchant = 11;
inline int BsAdvInfo::merchant_size() const {
  return merchant_.size();
}
inline void BsAdvInfo::clear_merchant() {
  merchant_.Clear();
}
inline const ::ztc::interface::MerchantInfo& BsAdvInfo::merchant(int index) const {
  return merchant_.Get(index);
}
inline ::ztc::interface::MerchantInfo* BsAdvInfo::mutable_merchant(int index) {
  return merchant_.Mutable(index);
}
inline ::ztc::interface::MerchantInfo* BsAdvInfo::add_merchant() {
  return merchant_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::MerchantInfo >&
BsAdvInfo::merchant() const {
  return merchant_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::MerchantInfo >*
BsAdvInfo::mutable_merchant() {
  return &merchant_;
}

// optional uint32 cpa = 12;
inline bool BsAdvInfo::has_cpa() const {
  return _has_bit(11);
}
inline void BsAdvInfo::clear_cpa() {
  cpa_ = 0u;
  _clear_bit(11);
}
inline ::google::protobuf::uint32 BsAdvInfo::cpa() const {
  return cpa_;
}
inline void BsAdvInfo::set_cpa(::google::protobuf::uint32 value) {
  _set_bit(11);
  cpa_ = value;
}

// optional uint64 zd_id = 13;
inline bool BsAdvInfo::has_zd_id() const {
  return _has_bit(12);
}
inline void BsAdvInfo::clear_zd_id() {
  zd_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(12);
}
inline ::google::protobuf::uint64 BsAdvInfo::zd_id() const {
  return zd_id_;
}
inline void BsAdvInfo::set_zd_id(::google::protobuf::uint64 value) {
  _set_bit(12);
  zd_id_ = value;
}

// optional .ztc.interface.DealInfo deal = 14;
inline bool BsAdvInfo::has_deal() const {
  return _has_bit(13);
}
inline void BsAdvInfo::clear_deal() {
  if (deal_ != NULL) deal_->::ztc::interface::DealInfo::Clear();
  _clear_bit(13);
}
inline const ::ztc::interface::DealInfo& BsAdvInfo::deal() const {
  return deal_ != NULL ? *deal_ : *default_instance_->deal_;
}
inline ::ztc::interface::DealInfo* BsAdvInfo::mutable_deal() {
  _set_bit(13);
  if (deal_ == NULL) deal_ = new ::ztc::interface::DealInfo;
  return deal_;
}

// optional bytes title = 15;
inline bool BsAdvInfo::has_title() const {
  return _has_bit(14);
}
inline void BsAdvInfo::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& BsAdvInfo::title() const {
  return *title_;
}
inline void BsAdvInfo::set_title(const ::std::string& value) {
  _set_bit(14);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void BsAdvInfo::set_title(const char* value) {
  _set_bit(14);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void BsAdvInfo::set_title(const void* value, size_t size) {
  _set_bit(14);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BsAdvInfo::mutable_title() {
  _set_bit(14);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional bytes desc1 = 16;
inline bool BsAdvInfo::has_desc1() const {
  return _has_bit(15);
}
inline void BsAdvInfo::clear_desc1() {
  if (desc1_ != &_default_desc1_) {
    desc1_->clear();
  }
  _clear_bit(15);
}
inline const ::std::string& BsAdvInfo::desc1() const {
  return *desc1_;
}
inline void BsAdvInfo::set_desc1(const ::std::string& value) {
  _set_bit(15);
  if (desc1_ == &_default_desc1_) {
    desc1_ = new ::std::string;
  }
  desc1_->assign(value);
}
inline void BsAdvInfo::set_desc1(const char* value) {
  _set_bit(15);
  if (desc1_ == &_default_desc1_) {
    desc1_ = new ::std::string;
  }
  desc1_->assign(value);
}
inline void BsAdvInfo::set_desc1(const void* value, size_t size) {
  _set_bit(15);
  if (desc1_ == &_default_desc1_) {
    desc1_ = new ::std::string;
  }
  desc1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BsAdvInfo::mutable_desc1() {
  _set_bit(15);
  if (desc1_ == &_default_desc1_) {
    desc1_ = new ::std::string;
  }
  return desc1_;
}

// optional bytes desc2 = 17;
inline bool BsAdvInfo::has_desc2() const {
  return _has_bit(16);
}
inline void BsAdvInfo::clear_desc2() {
  if (desc2_ != &_default_desc2_) {
    desc2_->clear();
  }
  _clear_bit(16);
}
inline const ::std::string& BsAdvInfo::desc2() const {
  return *desc2_;
}
inline void BsAdvInfo::set_desc2(const ::std::string& value) {
  _set_bit(16);
  if (desc2_ == &_default_desc2_) {
    desc2_ = new ::std::string;
  }
  desc2_->assign(value);
}
inline void BsAdvInfo::set_desc2(const char* value) {
  _set_bit(16);
  if (desc2_ == &_default_desc2_) {
    desc2_ = new ::std::string;
  }
  desc2_->assign(value);
}
inline void BsAdvInfo::set_desc2(const void* value, size_t size) {
  _set_bit(16);
  if (desc2_ == &_default_desc2_) {
    desc2_ = new ::std::string;
  }
  desc2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BsAdvInfo::mutable_desc2() {
  _set_bit(16);
  if (desc2_ == &_default_desc2_) {
    desc2_ = new ::std::string;
  }
  return desc2_;
}

// optional bool cat_filter_pass = 18;
inline bool BsAdvInfo::has_cat_filter_pass() const {
  return _has_bit(17);
}
inline void BsAdvInfo::clear_cat_filter_pass() {
  cat_filter_pass_ = false;
  _clear_bit(17);
}
inline bool BsAdvInfo::cat_filter_pass() const {
  return cat_filter_pass_;
}
inline void BsAdvInfo::set_cat_filter_pass(bool value) {
  _set_bit(17);
  cat_filter_pass_ = value;
}

// optional uint32 appointment_id = 19;
inline bool BsAdvInfo::has_appointment_id() const {
  return _has_bit(18);
}
inline void BsAdvInfo::clear_appointment_id() {
  appointment_id_ = 0u;
  _clear_bit(18);
}
inline ::google::protobuf::uint32 BsAdvInfo::appointment_id() const {
  return appointment_id_;
}
inline void BsAdvInfo::set_appointment_id(::google::protobuf::uint32 value) {
  _set_bit(18);
  appointment_id_ = value;
}

// optional uint64 shop_id = 20;
inline bool BsAdvInfo::has_shop_id() const {
  return _has_bit(19);
}
inline void BsAdvInfo::clear_shop_id() {
  shop_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(19);
}
inline ::google::protobuf::uint64 BsAdvInfo::shop_id() const {
  return shop_id_;
}
inline void BsAdvInfo::set_shop_id(::google::protobuf::uint64 value) {
  _set_bit(19);
  shop_id_ = value;
}

// optional .ztc.interface.AppointmentInfo appointment = 21;
inline bool BsAdvInfo::has_appointment() const {
  return _has_bit(20);
}
inline void BsAdvInfo::clear_appointment() {
  if (appointment_ != NULL) appointment_->::ztc::interface::AppointmentInfo::Clear();
  _clear_bit(20);
}
inline const ::ztc::interface::AppointmentInfo& BsAdvInfo::appointment() const {
  return appointment_ != NULL ? *appointment_ : *default_instance_->appointment_;
}
inline ::ztc::interface::AppointmentInfo* BsAdvInfo::mutable_appointment() {
  _set_bit(20);
  if (appointment_ == NULL) appointment_ = new ::ztc::interface::AppointmentInfo;
  return appointment_;
}

// optional .ztc.interface.ShopInfo shop = 22;
inline bool BsAdvInfo::has_shop() const {
  return _has_bit(21);
}
inline void BsAdvInfo::clear_shop() {
  if (shop_ != NULL) shop_->::ztc::interface::ShopInfo::Clear();
  _clear_bit(21);
}
inline const ::ztc::interface::ShopInfo& BsAdvInfo::shop() const {
  return shop_ != NULL ? *shop_ : *default_instance_->shop_;
}
inline ::ztc::interface::ShopInfo* BsAdvInfo::mutable_shop() {
  _set_bit(21);
  if (shop_ == NULL) shop_ = new ::ztc::interface::ShopInfo;
  return shop_;
}

// optional uint32 adv_type = 23;
inline bool BsAdvInfo::has_adv_type() const {
  return _has_bit(22);
}
inline void BsAdvInfo::clear_adv_type() {
  adv_type_ = 0u;
  _clear_bit(22);
}
inline ::google::protobuf::uint32 BsAdvInfo::adv_type() const {
  return adv_type_;
}
inline void BsAdvInfo::set_adv_type(::google::protobuf::uint32 value) {
  _set_bit(22);
  adv_type_ = value;
}

// optional uint32 adv_extend_tag = 24;
inline bool BsAdvInfo::has_adv_extend_tag() const {
  return _has_bit(23);
}
inline void BsAdvInfo::clear_adv_extend_tag() {
  adv_extend_tag_ = 0u;
  _clear_bit(23);
}
inline ::google::protobuf::uint32 BsAdvInfo::adv_extend_tag() const {
  return adv_extend_tag_;
}
inline void BsAdvInfo::set_adv_extend_tag(::google::protobuf::uint32 value) {
  _set_bit(23);
  adv_extend_tag_ = value;
}

// optional uint32 area_flag = 25;
inline bool BsAdvInfo::has_area_flag() const {
  return _has_bit(24);
}
inline void BsAdvInfo::clear_area_flag() {
  area_flag_ = 0u;
  _clear_bit(24);
}
inline ::google::protobuf::uint32 BsAdvInfo::area_flag() const {
  return area_flag_;
}
inline void BsAdvInfo::set_area_flag(::google::protobuf::uint32 value) {
  _set_bit(24);
  area_flag_ = value;
}

// optional bytes pc_url = 26;
inline bool BsAdvInfo::has_pc_url() const {
  return _has_bit(25);
}
inline void BsAdvInfo::clear_pc_url() {
  if (pc_url_ != &_default_pc_url_) {
    pc_url_->clear();
  }
  _clear_bit(25);
}
inline const ::std::string& BsAdvInfo::pc_url() const {
  return *pc_url_;
}
inline void BsAdvInfo::set_pc_url(const ::std::string& value) {
  _set_bit(25);
  if (pc_url_ == &_default_pc_url_) {
    pc_url_ = new ::std::string;
  }
  pc_url_->assign(value);
}
inline void BsAdvInfo::set_pc_url(const char* value) {
  _set_bit(25);
  if (pc_url_ == &_default_pc_url_) {
    pc_url_ = new ::std::string;
  }
  pc_url_->assign(value);
}
inline void BsAdvInfo::set_pc_url(const void* value, size_t size) {
  _set_bit(25);
  if (pc_url_ == &_default_pc_url_) {
    pc_url_ = new ::std::string;
  }
  pc_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BsAdvInfo::mutable_pc_url() {
  _set_bit(25);
  if (pc_url_ == &_default_pc_url_) {
    pc_url_ = new ::std::string;
  }
  return pc_url_;
}

// optional bytes feed_strategy = 27;
inline bool BsAdvInfo::has_feed_strategy() const {
  return _has_bit(26);
}
inline void BsAdvInfo::clear_feed_strategy() {
  if (feed_strategy_ != &_default_feed_strategy_) {
    feed_strategy_->clear();
  }
  _clear_bit(26);
}
inline const ::std::string& BsAdvInfo::feed_strategy() const {
  return *feed_strategy_;
}
inline void BsAdvInfo::set_feed_strategy(const ::std::string& value) {
  _set_bit(26);
  if (feed_strategy_ == &_default_feed_strategy_) {
    feed_strategy_ = new ::std::string;
  }
  feed_strategy_->assign(value);
}
inline void BsAdvInfo::set_feed_strategy(const char* value) {
  _set_bit(26);
  if (feed_strategy_ == &_default_feed_strategy_) {
    feed_strategy_ = new ::std::string;
  }
  feed_strategy_->assign(value);
}
inline void BsAdvInfo::set_feed_strategy(const void* value, size_t size) {
  _set_bit(26);
  if (feed_strategy_ == &_default_feed_strategy_) {
    feed_strategy_ = new ::std::string;
  }
  feed_strategy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BsAdvInfo::mutable_feed_strategy() {
  _set_bit(26);
  if (feed_strategy_ == &_default_feed_strategy_) {
    feed_strategy_ = new ::std::string;
  }
  return feed_strategy_;
}

// repeated uint64 service_id = 28;
inline int BsAdvInfo::service_id_size() const {
  return service_id_.size();
}
inline void BsAdvInfo::clear_service_id() {
  service_id_.Clear();
}
inline ::google::protobuf::uint64 BsAdvInfo::service_id(int index) const {
  return service_id_.Get(index);
}
inline void BsAdvInfo::set_service_id(int index, ::google::protobuf::uint64 value) {
  service_id_.Set(index, value);
}
inline void BsAdvInfo::add_service_id(::google::protobuf::uint64 value) {
  service_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
BsAdvInfo::service_id() const {
  return service_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
BsAdvInfo::mutable_service_id() {
  return &service_id_;
}

// -------------------------------------------------------------------

// MerchantInfo

// optional uint32 merchant_id = 1;
inline bool MerchantInfo::has_merchant_id() const {
  return _has_bit(0);
}
inline void MerchantInfo::clear_merchant_id() {
  merchant_id_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 MerchantInfo::merchant_id() const {
  return merchant_id_;
}
inline void MerchantInfo::set_merchant_id(::google::protobuf::uint32 value) {
  _set_bit(0);
  merchant_id_ = value;
}

// optional double latitude = 2;
inline bool MerchantInfo::has_latitude() const {
  return _has_bit(1);
}
inline void MerchantInfo::clear_latitude() {
  latitude_ = 0;
  _clear_bit(1);
}
inline double MerchantInfo::latitude() const {
  return latitude_;
}
inline void MerchantInfo::set_latitude(double value) {
  _set_bit(1);
  latitude_ = value;
}

// optional double longitude = 3;
inline bool MerchantInfo::has_longitude() const {
  return _has_bit(2);
}
inline void MerchantInfo::clear_longitude() {
  longitude_ = 0;
  _clear_bit(2);
}
inline double MerchantInfo::longitude() const {
  return longitude_;
}
inline void MerchantInfo::set_longitude(double value) {
  _set_bit(2);
  longitude_ = value;
}

// optional bytes na_url = 4;
inline bool MerchantInfo::has_na_url() const {
  return _has_bit(3);
}
inline void MerchantInfo::clear_na_url() {
  if (na_url_ != &_default_na_url_) {
    na_url_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& MerchantInfo::na_url() const {
  return *na_url_;
}
inline void MerchantInfo::set_na_url(const ::std::string& value) {
  _set_bit(3);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  na_url_->assign(value);
}
inline void MerchantInfo::set_na_url(const char* value) {
  _set_bit(3);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  na_url_->assign(value);
}
inline void MerchantInfo::set_na_url(const void* value, size_t size) {
  _set_bit(3);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  na_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::mutable_na_url() {
  _set_bit(3);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  return na_url_;
}

// optional bytes wap_url = 5;
inline bool MerchantInfo::has_wap_url() const {
  return _has_bit(4);
}
inline void MerchantInfo::clear_wap_url() {
  if (wap_url_ != &_default_wap_url_) {
    wap_url_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& MerchantInfo::wap_url() const {
  return *wap_url_;
}
inline void MerchantInfo::set_wap_url(const ::std::string& value) {
  _set_bit(4);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  wap_url_->assign(value);
}
inline void MerchantInfo::set_wap_url(const char* value) {
  _set_bit(4);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  wap_url_->assign(value);
}
inline void MerchantInfo::set_wap_url(const void* value, size_t size) {
  _set_bit(4);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  wap_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::mutable_wap_url() {
  _set_bit(4);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  return wap_url_;
}

// repeated uint32 deals = 6;
inline int MerchantInfo::deals_size() const {
  return deals_.size();
}
inline void MerchantInfo::clear_deals() {
  deals_.Clear();
}
inline ::google::protobuf::uint32 MerchantInfo::deals(int index) const {
  return deals_.Get(index);
}
inline void MerchantInfo::set_deals(int index, ::google::protobuf::uint32 value) {
  deals_.Set(index, value);
}
inline void MerchantInfo::add_deals(::google::protobuf::uint32 value) {
  deals_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MerchantInfo::deals() const {
  return deals_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MerchantInfo::mutable_deals() {
  return &deals_;
}

// optional bytes merchant_name = 7;
inline bool MerchantInfo::has_merchant_name() const {
  return _has_bit(6);
}
inline void MerchantInfo::clear_merchant_name() {
  if (merchant_name_ != &_default_merchant_name_) {
    merchant_name_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& MerchantInfo::merchant_name() const {
  return *merchant_name_;
}
inline void MerchantInfo::set_merchant_name(const ::std::string& value) {
  _set_bit(6);
  if (merchant_name_ == &_default_merchant_name_) {
    merchant_name_ = new ::std::string;
  }
  merchant_name_->assign(value);
}
inline void MerchantInfo::set_merchant_name(const char* value) {
  _set_bit(6);
  if (merchant_name_ == &_default_merchant_name_) {
    merchant_name_ = new ::std::string;
  }
  merchant_name_->assign(value);
}
inline void MerchantInfo::set_merchant_name(const void* value, size_t size) {
  _set_bit(6);
  if (merchant_name_ == &_default_merchant_name_) {
    merchant_name_ = new ::std::string;
  }
  merchant_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::mutable_merchant_name() {
  _set_bit(6);
  if (merchant_name_ == &_default_merchant_name_) {
    merchant_name_ = new ::std::string;
  }
  return merchant_name_;
}

// optional bytes biz_area_list = 8;
inline bool MerchantInfo::has_biz_area_list() const {
  return _has_bit(7);
}
inline void MerchantInfo::clear_biz_area_list() {
  if (biz_area_list_ != &_default_biz_area_list_) {
    biz_area_list_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& MerchantInfo::biz_area_list() const {
  return *biz_area_list_;
}
inline void MerchantInfo::set_biz_area_list(const ::std::string& value) {
  _set_bit(7);
  if (biz_area_list_ == &_default_biz_area_list_) {
    biz_area_list_ = new ::std::string;
  }
  biz_area_list_->assign(value);
}
inline void MerchantInfo::set_biz_area_list(const char* value) {
  _set_bit(7);
  if (biz_area_list_ == &_default_biz_area_list_) {
    biz_area_list_ = new ::std::string;
  }
  biz_area_list_->assign(value);
}
inline void MerchantInfo::set_biz_area_list(const void* value, size_t size) {
  _set_bit(7);
  if (biz_area_list_ == &_default_biz_area_list_) {
    biz_area_list_ = new ::std::string;
  }
  biz_area_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::mutable_biz_area_list() {
  _set_bit(7);
  if (biz_area_list_ == &_default_biz_area_list_) {
    biz_area_list_ = new ::std::string;
  }
  return biz_area_list_;
}

// optional bytes phone_list = 9;
inline bool MerchantInfo::has_phone_list() const {
  return _has_bit(8);
}
inline void MerchantInfo::clear_phone_list() {
  if (phone_list_ != &_default_phone_list_) {
    phone_list_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& MerchantInfo::phone_list() const {
  return *phone_list_;
}
inline void MerchantInfo::set_phone_list(const ::std::string& value) {
  _set_bit(8);
  if (phone_list_ == &_default_phone_list_) {
    phone_list_ = new ::std::string;
  }
  phone_list_->assign(value);
}
inline void MerchantInfo::set_phone_list(const char* value) {
  _set_bit(8);
  if (phone_list_ == &_default_phone_list_) {
    phone_list_ = new ::std::string;
  }
  phone_list_->assign(value);
}
inline void MerchantInfo::set_phone_list(const void* value, size_t size) {
  _set_bit(8);
  if (phone_list_ == &_default_phone_list_) {
    phone_list_ = new ::std::string;
  }
  phone_list_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::mutable_phone_list() {
  _set_bit(8);
  if (phone_list_ == &_default_phone_list_) {
    phone_list_ = new ::std::string;
  }
  return phone_list_;
}

// optional uint32 merchant_distance = 10;
inline bool MerchantInfo::has_merchant_distance() const {
  return _has_bit(9);
}
inline void MerchantInfo::clear_merchant_distance() {
  merchant_distance_ = 0u;
  _clear_bit(9);
}
inline ::google::protobuf::uint32 MerchantInfo::merchant_distance() const {
  return merchant_distance_;
}
inline void MerchantInfo::set_merchant_distance(::google::protobuf::uint32 value) {
  _set_bit(9);
  merchant_distance_ = value;
}

// repeated bytes biz_area_id_list = 11;
inline int MerchantInfo::biz_area_id_list_size() const {
  return biz_area_id_list_.size();
}
inline void MerchantInfo::clear_biz_area_id_list() {
  biz_area_id_list_.Clear();
}
inline const ::std::string& MerchantInfo::biz_area_id_list(int index) const {
  return biz_area_id_list_.Get(index);
}
inline ::std::string* MerchantInfo::mutable_biz_area_id_list(int index) {
  return biz_area_id_list_.Mutable(index);
}
inline void MerchantInfo::set_biz_area_id_list(int index, const ::std::string& value) {
  biz_area_id_list_.Mutable(index)->assign(value);
}
inline void MerchantInfo::set_biz_area_id_list(int index, const char* value) {
  biz_area_id_list_.Mutable(index)->assign(value);
}
inline void MerchantInfo::set_biz_area_id_list(int index, const void* value, size_t size) {
  biz_area_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::add_biz_area_id_list() {
  return biz_area_id_list_.Add();
}
inline void MerchantInfo::add_biz_area_id_list(const ::std::string& value) {
  biz_area_id_list_.Add()->assign(value);
}
inline void MerchantInfo::add_biz_area_id_list(const char* value) {
  biz_area_id_list_.Add()->assign(value);
}
inline void MerchantInfo::add_biz_area_id_list(const void* value, size_t size) {
  biz_area_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MerchantInfo::biz_area_id_list() const {
  return biz_area_id_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MerchantInfo::mutable_biz_area_id_list() {
  return &biz_area_id_list_;
}

// optional uint64 nuomi_city_id = 12;
inline bool MerchantInfo::has_nuomi_city_id() const {
  return _has_bit(11);
}
inline void MerchantInfo::clear_nuomi_city_id() {
  nuomi_city_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(11);
}
inline ::google::protobuf::uint64 MerchantInfo::nuomi_city_id() const {
  return nuomi_city_id_;
}
inline void MerchantInfo::set_nuomi_city_id(::google::protobuf::uint64 value) {
  _set_bit(11);
  nuomi_city_id_ = value;
}

// optional uint32 fc_prov_id = 13;
inline bool MerchantInfo::has_fc_prov_id() const {
  return _has_bit(12);
}
inline void MerchantInfo::clear_fc_prov_id() {
  fc_prov_id_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 MerchantInfo::fc_prov_id() const {
  return fc_prov_id_;
}
inline void MerchantInfo::set_fc_prov_id(::google::protobuf::uint32 value) {
  _set_bit(12);
  fc_prov_id_ = value;
}

// optional uint32 fc_city_id = 14;
inline bool MerchantInfo::has_fc_city_id() const {
  return _has_bit(13);
}
inline void MerchantInfo::clear_fc_city_id() {
  fc_city_id_ = 0u;
  _clear_bit(13);
}
inline ::google::protobuf::uint32 MerchantInfo::fc_city_id() const {
  return fc_city_id_;
}
inline void MerchantInfo::set_fc_city_id(::google::protobuf::uint32 value) {
  _set_bit(13);
  fc_city_id_ = value;
}

// optional bytes fc_city_name = 15;
inline bool MerchantInfo::has_fc_city_name() const {
  return _has_bit(14);
}
inline void MerchantInfo::clear_fc_city_name() {
  if (fc_city_name_ != &_default_fc_city_name_) {
    fc_city_name_->clear();
  }
  _clear_bit(14);
}
inline const ::std::string& MerchantInfo::fc_city_name() const {
  return *fc_city_name_;
}
inline void MerchantInfo::set_fc_city_name(const ::std::string& value) {
  _set_bit(14);
  if (fc_city_name_ == &_default_fc_city_name_) {
    fc_city_name_ = new ::std::string;
  }
  fc_city_name_->assign(value);
}
inline void MerchantInfo::set_fc_city_name(const char* value) {
  _set_bit(14);
  if (fc_city_name_ == &_default_fc_city_name_) {
    fc_city_name_ = new ::std::string;
  }
  fc_city_name_->assign(value);
}
inline void MerchantInfo::set_fc_city_name(const void* value, size_t size) {
  _set_bit(14);
  if (fc_city_name_ == &_default_fc_city_name_) {
    fc_city_name_ = new ::std::string;
  }
  fc_city_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::mutable_fc_city_name() {
  _set_bit(14);
  if (fc_city_name_ == &_default_fc_city_name_) {
    fc_city_name_ = new ::std::string;
  }
  return fc_city_name_;
}

// optional bytes business_hours = 16;
inline bool MerchantInfo::has_business_hours() const {
  return _has_bit(15);
}
inline void MerchantInfo::clear_business_hours() {
  if (business_hours_ != &_default_business_hours_) {
    business_hours_->clear();
  }
  _clear_bit(15);
}
inline const ::std::string& MerchantInfo::business_hours() const {
  return *business_hours_;
}
inline void MerchantInfo::set_business_hours(const ::std::string& value) {
  _set_bit(15);
  if (business_hours_ == &_default_business_hours_) {
    business_hours_ = new ::std::string;
  }
  business_hours_->assign(value);
}
inline void MerchantInfo::set_business_hours(const char* value) {
  _set_bit(15);
  if (business_hours_ == &_default_business_hours_) {
    business_hours_ = new ::std::string;
  }
  business_hours_->assign(value);
}
inline void MerchantInfo::set_business_hours(const void* value, size_t size) {
  _set_bit(15);
  if (business_hours_ == &_default_business_hours_) {
    business_hours_ = new ::std::string;
  }
  business_hours_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::mutable_business_hours() {
  _set_bit(15);
  if (business_hours_ == &_default_business_hours_) {
    business_hours_ = new ::std::string;
  }
  return business_hours_;
}

// optional bytes address = 17;
inline bool MerchantInfo::has_address() const {
  return _has_bit(16);
}
inline void MerchantInfo::clear_address() {
  if (address_ != &_default_address_) {
    address_->clear();
  }
  _clear_bit(16);
}
inline const ::std::string& MerchantInfo::address() const {
  return *address_;
}
inline void MerchantInfo::set_address(const ::std::string& value) {
  _set_bit(16);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void MerchantInfo::set_address(const char* value) {
  _set_bit(16);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(value);
}
inline void MerchantInfo::set_address(const void* value, size_t size) {
  _set_bit(16);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  address_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::mutable_address() {
  _set_bit(16);
  if (address_ == &_default_address_) {
    address_ = new ::std::string;
  }
  return address_;
}

// repeated .ztc.interface.DealInfo deals_info = 18;
inline int MerchantInfo::deals_info_size() const {
  return deals_info_.size();
}
inline void MerchantInfo::clear_deals_info() {
  deals_info_.Clear();
}
inline const ::ztc::interface::DealInfo& MerchantInfo::deals_info(int index) const {
  return deals_info_.Get(index);
}
inline ::ztc::interface::DealInfo* MerchantInfo::mutable_deals_info(int index) {
  return deals_info_.Mutable(index);
}
inline ::ztc::interface::DealInfo* MerchantInfo::add_deals_info() {
  return deals_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ztc::interface::DealInfo >&
MerchantInfo::deals_info() const {
  return deals_info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ztc::interface::DealInfo >*
MerchantInfo::mutable_deals_info() {
  return &deals_info_;
}

// optional uint64 map_bid = 19;
inline bool MerchantInfo::has_map_bid() const {
  return _has_bit(18);
}
inline void MerchantInfo::clear_map_bid() {
  map_bid_ = GOOGLE_ULONGLONG(0);
  _clear_bit(18);
}
inline ::google::protobuf::uint64 MerchantInfo::map_bid() const {
  return map_bid_;
}
inline void MerchantInfo::set_map_bid(::google::protobuf::uint64 value) {
  _set_bit(18);
  map_bid_ = value;
}

// optional bytes map_trade = 20;
inline bool MerchantInfo::has_map_trade() const {
  return _has_bit(19);
}
inline void MerchantInfo::clear_map_trade() {
  if (map_trade_ != &_default_map_trade_) {
    map_trade_->clear();
  }
  _clear_bit(19);
}
inline const ::std::string& MerchantInfo::map_trade() const {
  return *map_trade_;
}
inline void MerchantInfo::set_map_trade(const ::std::string& value) {
  _set_bit(19);
  if (map_trade_ == &_default_map_trade_) {
    map_trade_ = new ::std::string;
  }
  map_trade_->assign(value);
}
inline void MerchantInfo::set_map_trade(const char* value) {
  _set_bit(19);
  if (map_trade_ == &_default_map_trade_) {
    map_trade_ = new ::std::string;
  }
  map_trade_->assign(value);
}
inline void MerchantInfo::set_map_trade(const void* value, size_t size) {
  _set_bit(19);
  if (map_trade_ == &_default_map_trade_) {
    map_trade_ = new ::std::string;
  }
  map_trade_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MerchantInfo::mutable_map_trade() {
  _set_bit(19);
  if (map_trade_ == &_default_map_trade_) {
    map_trade_ = new ::std::string;
  }
  return map_trade_;
}

// optional int32 map_brand_id = 21;
inline bool MerchantInfo::has_map_brand_id() const {
  return _has_bit(20);
}
inline void MerchantInfo::clear_map_brand_id() {
  map_brand_id_ = 0;
  _clear_bit(20);
}
inline ::google::protobuf::int32 MerchantInfo::map_brand_id() const {
  return map_brand_id_;
}
inline void MerchantInfo::set_map_brand_id(::google::protobuf::int32 value) {
  _set_bit(20);
  map_brand_id_ = value;
}

// -------------------------------------------------------------------

// DealInfo

// optional uint32 bought = 1;
inline bool DealInfo::has_bought() const {
  return _has_bit(0);
}
inline void DealInfo::clear_bought() {
  bought_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 DealInfo::bought() const {
  return bought_;
}
inline void DealInfo::set_bought(::google::protobuf::uint32 value) {
  _set_bit(0);
  bought_ = value;
}

// optional bytes market_price = 2;
inline bool DealInfo::has_market_price() const {
  return _has_bit(1);
}
inline void DealInfo::clear_market_price() {
  if (market_price_ != &_default_market_price_) {
    market_price_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& DealInfo::market_price() const {
  return *market_price_;
}
inline void DealInfo::set_market_price(const ::std::string& value) {
  _set_bit(1);
  if (market_price_ == &_default_market_price_) {
    market_price_ = new ::std::string;
  }
  market_price_->assign(value);
}
inline void DealInfo::set_market_price(const char* value) {
  _set_bit(1);
  if (market_price_ == &_default_market_price_) {
    market_price_ = new ::std::string;
  }
  market_price_->assign(value);
}
inline void DealInfo::set_market_price(const void* value, size_t size) {
  _set_bit(1);
  if (market_price_ == &_default_market_price_) {
    market_price_ = new ::std::string;
  }
  market_price_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_market_price() {
  _set_bit(1);
  if (market_price_ == &_default_market_price_) {
    market_price_ = new ::std::string;
  }
  return market_price_;
}

// optional bytes current_price = 3;
inline bool DealInfo::has_current_price() const {
  return _has_bit(2);
}
inline void DealInfo::clear_current_price() {
  if (current_price_ != &_default_current_price_) {
    current_price_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& DealInfo::current_price() const {
  return *current_price_;
}
inline void DealInfo::set_current_price(const ::std::string& value) {
  _set_bit(2);
  if (current_price_ == &_default_current_price_) {
    current_price_ = new ::std::string;
  }
  current_price_->assign(value);
}
inline void DealInfo::set_current_price(const char* value) {
  _set_bit(2);
  if (current_price_ == &_default_current_price_) {
    current_price_ = new ::std::string;
  }
  current_price_->assign(value);
}
inline void DealInfo::set_current_price(const void* value, size_t size) {
  _set_bit(2);
  if (current_price_ == &_default_current_price_) {
    current_price_ = new ::std::string;
  }
  current_price_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_current_price() {
  _set_bit(2);
  if (current_price_ == &_default_current_price_) {
    current_price_ = new ::std::string;
  }
  return current_price_;
}

// optional uint32 free_appointment = 4;
inline bool DealInfo::has_free_appointment() const {
  return _has_bit(3);
}
inline void DealInfo::clear_free_appointment() {
  free_appointment_ = 0u;
  _clear_bit(3);
}
inline ::google::protobuf::uint32 DealInfo::free_appointment() const {
  return free_appointment_;
}
inline void DealInfo::set_free_appointment(::google::protobuf::uint32 value) {
  _set_bit(3);
  free_appointment_ = value;
}

// optional uint32 refund_strategy_type = 5;
inline bool DealInfo::has_refund_strategy_type() const {
  return _has_bit(4);
}
inline void DealInfo::clear_refund_strategy_type() {
  refund_strategy_type_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 DealInfo::refund_strategy_type() const {
  return refund_strategy_type_;
}
inline void DealInfo::set_refund_strategy_type(::google::protobuf::uint32 value) {
  _set_bit(4);
  refund_strategy_type_ = value;
}

// optional uint32 comment_num = 6;
inline bool DealInfo::has_comment_num() const {
  return _has_bit(5);
}
inline void DealInfo::clear_comment_num() {
  comment_num_ = 0u;
  _clear_bit(5);
}
inline ::google::protobuf::uint32 DealInfo::comment_num() const {
  return comment_num_;
}
inline void DealInfo::set_comment_num(::google::protobuf::uint32 value) {
  _set_bit(5);
  comment_num_ = value;
}

// optional bytes comment_score = 7;
inline bool DealInfo::has_comment_score() const {
  return _has_bit(6);
}
inline void DealInfo::clear_comment_score() {
  if (comment_score_ != &_default_comment_score_) {
    comment_score_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& DealInfo::comment_score() const {
  return *comment_score_;
}
inline void DealInfo::set_comment_score(const ::std::string& value) {
  _set_bit(6);
  if (comment_score_ == &_default_comment_score_) {
    comment_score_ = new ::std::string;
  }
  comment_score_->assign(value);
}
inline void DealInfo::set_comment_score(const char* value) {
  _set_bit(6);
  if (comment_score_ == &_default_comment_score_) {
    comment_score_ = new ::std::string;
  }
  comment_score_->assign(value);
}
inline void DealInfo::set_comment_score(const void* value, size_t size) {
  _set_bit(6);
  if (comment_score_ == &_default_comment_score_) {
    comment_score_ = new ::std::string;
  }
  comment_score_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_comment_score() {
  _set_bit(6);
  if (comment_score_ == &_default_comment_score_) {
    comment_score_ = new ::std::string;
  }
  return comment_score_;
}

// optional bytes comment_mini = 8;
inline bool DealInfo::has_comment_mini() const {
  return _has_bit(7);
}
inline void DealInfo::clear_comment_mini() {
  if (comment_mini_ != &_default_comment_mini_) {
    comment_mini_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& DealInfo::comment_mini() const {
  return *comment_mini_;
}
inline void DealInfo::set_comment_mini(const ::std::string& value) {
  _set_bit(7);
  if (comment_mini_ == &_default_comment_mini_) {
    comment_mini_ = new ::std::string;
  }
  comment_mini_->assign(value);
}
inline void DealInfo::set_comment_mini(const char* value) {
  _set_bit(7);
  if (comment_mini_ == &_default_comment_mini_) {
    comment_mini_ = new ::std::string;
  }
  comment_mini_->assign(value);
}
inline void DealInfo::set_comment_mini(const void* value, size_t size) {
  _set_bit(7);
  if (comment_mini_ == &_default_comment_mini_) {
    comment_mini_ = new ::std::string;
  }
  comment_mini_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_comment_mini() {
  _set_bit(7);
  if (comment_mini_ == &_default_comment_mini_) {
    comment_mini_ = new ::std::string;
  }
  return comment_mini_;
}

// optional bytes image = 9;
inline bool DealInfo::has_image() const {
  return _has_bit(8);
}
inline void DealInfo::clear_image() {
  if (image_ != &_default_image_) {
    image_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& DealInfo::image() const {
  return *image_;
}
inline void DealInfo::set_image(const ::std::string& value) {
  _set_bit(8);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void DealInfo::set_image(const char* value) {
  _set_bit(8);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void DealInfo::set_image(const void* value, size_t size) {
  _set_bit(8);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_image() {
  _set_bit(8);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  return image_;
}

// optional bytes business_title = 10;
inline bool DealInfo::has_business_title() const {
  return _has_bit(9);
}
inline void DealInfo::clear_business_title() {
  if (business_title_ != &_default_business_title_) {
    business_title_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& DealInfo::business_title() const {
  return *business_title_;
}
inline void DealInfo::set_business_title(const ::std::string& value) {
  _set_bit(9);
  if (business_title_ == &_default_business_title_) {
    business_title_ = new ::std::string;
  }
  business_title_->assign(value);
}
inline void DealInfo::set_business_title(const char* value) {
  _set_bit(9);
  if (business_title_ == &_default_business_title_) {
    business_title_ = new ::std::string;
  }
  business_title_->assign(value);
}
inline void DealInfo::set_business_title(const void* value, size_t size) {
  _set_bit(9);
  if (business_title_ == &_default_business_title_) {
    business_title_ = new ::std::string;
  }
  business_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_business_title() {
  _set_bit(9);
  if (business_title_ == &_default_business_title_) {
    business_title_ = new ::std::string;
  }
  return business_title_;
}

// optional bytes title = 11;
inline bool DealInfo::has_title() const {
  return _has_bit(10);
}
inline void DealInfo::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& DealInfo::title() const {
  return *title_;
}
inline void DealInfo::set_title(const ::std::string& value) {
  _set_bit(10);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void DealInfo::set_title(const char* value) {
  _set_bit(10);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void DealInfo::set_title(const void* value, size_t size) {
  _set_bit(10);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_title() {
  _set_bit(10);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional bytes mini_title = 12;
inline bool DealInfo::has_mini_title() const {
  return _has_bit(11);
}
inline void DealInfo::clear_mini_title() {
  if (mini_title_ != &_default_mini_title_) {
    mini_title_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& DealInfo::mini_title() const {
  return *mini_title_;
}
inline void DealInfo::set_mini_title(const ::std::string& value) {
  _set_bit(11);
  if (mini_title_ == &_default_mini_title_) {
    mini_title_ = new ::std::string;
  }
  mini_title_->assign(value);
}
inline void DealInfo::set_mini_title(const char* value) {
  _set_bit(11);
  if (mini_title_ == &_default_mini_title_) {
    mini_title_ = new ::std::string;
  }
  mini_title_->assign(value);
}
inline void DealInfo::set_mini_title(const void* value, size_t size) {
  _set_bit(11);
  if (mini_title_ == &_default_mini_title_) {
    mini_title_ = new ::std::string;
  }
  mini_title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_mini_title() {
  _set_bit(11);
  if (mini_title_ == &_default_mini_title_) {
    mini_title_ = new ::std::string;
  }
  return mini_title_;
}

// optional uint32 deal_type = 13;
inline bool DealInfo::has_deal_type() const {
  return _has_bit(12);
}
inline void DealInfo::clear_deal_type() {
  deal_type_ = 0u;
  _clear_bit(12);
}
inline ::google::protobuf::uint32 DealInfo::deal_type() const {
  return deal_type_;
}
inline void DealInfo::set_deal_type(::google::protobuf::uint32 value) {
  _set_bit(12);
  deal_type_ = value;
}

// repeated uint32 merchant_ids = 14;
inline int DealInfo::merchant_ids_size() const {
  return merchant_ids_.size();
}
inline void DealInfo::clear_merchant_ids() {
  merchant_ids_.Clear();
}
inline ::google::protobuf::uint32 DealInfo::merchant_ids(int index) const {
  return merchant_ids_.Get(index);
}
inline void DealInfo::set_merchant_ids(int index, ::google::protobuf::uint32 value) {
  merchant_ids_.Set(index, value);
}
inline void DealInfo::add_merchant_ids(::google::protobuf::uint32 value) {
  merchant_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DealInfo::merchant_ids() const {
  return merchant_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DealInfo::mutable_merchant_ids() {
  return &merchant_ids_;
}

// repeated uint32 cate1_ids = 15;
inline int DealInfo::cate1_ids_size() const {
  return cate1_ids_.size();
}
inline void DealInfo::clear_cate1_ids() {
  cate1_ids_.Clear();
}
inline ::google::protobuf::uint32 DealInfo::cate1_ids(int index) const {
  return cate1_ids_.Get(index);
}
inline void DealInfo::set_cate1_ids(int index, ::google::protobuf::uint32 value) {
  cate1_ids_.Set(index, value);
}
inline void DealInfo::add_cate1_ids(::google::protobuf::uint32 value) {
  cate1_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DealInfo::cate1_ids() const {
  return cate1_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DealInfo::mutable_cate1_ids() {
  return &cate1_ids_;
}

// repeated bytes cate1_names = 16;
inline int DealInfo::cate1_names_size() const {
  return cate1_names_.size();
}
inline void DealInfo::clear_cate1_names() {
  cate1_names_.Clear();
}
inline const ::std::string& DealInfo::cate1_names(int index) const {
  return cate1_names_.Get(index);
}
inline ::std::string* DealInfo::mutable_cate1_names(int index) {
  return cate1_names_.Mutable(index);
}
inline void DealInfo::set_cate1_names(int index, const ::std::string& value) {
  cate1_names_.Mutable(index)->assign(value);
}
inline void DealInfo::set_cate1_names(int index, const char* value) {
  cate1_names_.Mutable(index)->assign(value);
}
inline void DealInfo::set_cate1_names(int index, const void* value, size_t size) {
  cate1_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::add_cate1_names() {
  return cate1_names_.Add();
}
inline void DealInfo::add_cate1_names(const ::std::string& value) {
  cate1_names_.Add()->assign(value);
}
inline void DealInfo::add_cate1_names(const char* value) {
  cate1_names_.Add()->assign(value);
}
inline void DealInfo::add_cate1_names(const void* value, size_t size) {
  cate1_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DealInfo::cate1_names() const {
  return cate1_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DealInfo::mutable_cate1_names() {
  return &cate1_names_;
}

// repeated uint32 cate2_ids = 17;
inline int DealInfo::cate2_ids_size() const {
  return cate2_ids_.size();
}
inline void DealInfo::clear_cate2_ids() {
  cate2_ids_.Clear();
}
inline ::google::protobuf::uint32 DealInfo::cate2_ids(int index) const {
  return cate2_ids_.Get(index);
}
inline void DealInfo::set_cate2_ids(int index, ::google::protobuf::uint32 value) {
  cate2_ids_.Set(index, value);
}
inline void DealInfo::add_cate2_ids(::google::protobuf::uint32 value) {
  cate2_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DealInfo::cate2_ids() const {
  return cate2_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DealInfo::mutable_cate2_ids() {
  return &cate2_ids_;
}

// repeated bytes cate2_names = 18;
inline int DealInfo::cate2_names_size() const {
  return cate2_names_.size();
}
inline void DealInfo::clear_cate2_names() {
  cate2_names_.Clear();
}
inline const ::std::string& DealInfo::cate2_names(int index) const {
  return cate2_names_.Get(index);
}
inline ::std::string* DealInfo::mutable_cate2_names(int index) {
  return cate2_names_.Mutable(index);
}
inline void DealInfo::set_cate2_names(int index, const ::std::string& value) {
  cate2_names_.Mutable(index)->assign(value);
}
inline void DealInfo::set_cate2_names(int index, const char* value) {
  cate2_names_.Mutable(index)->assign(value);
}
inline void DealInfo::set_cate2_names(int index, const void* value, size_t size) {
  cate2_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::add_cate2_names() {
  return cate2_names_.Add();
}
inline void DealInfo::add_cate2_names(const ::std::string& value) {
  cate2_names_.Add()->assign(value);
}
inline void DealInfo::add_cate2_names(const char* value) {
  cate2_names_.Add()->assign(value);
}
inline void DealInfo::add_cate2_names(const void* value, size_t size) {
  cate2_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DealInfo::cate2_names() const {
  return cate2_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DealInfo::mutable_cate2_names() {
  return &cate2_names_;
}

// repeated uint32 cate3_ids = 19;
inline int DealInfo::cate3_ids_size() const {
  return cate3_ids_.size();
}
inline void DealInfo::clear_cate3_ids() {
  cate3_ids_.Clear();
}
inline ::google::protobuf::uint32 DealInfo::cate3_ids(int index) const {
  return cate3_ids_.Get(index);
}
inline void DealInfo::set_cate3_ids(int index, ::google::protobuf::uint32 value) {
  cate3_ids_.Set(index, value);
}
inline void DealInfo::add_cate3_ids(::google::protobuf::uint32 value) {
  cate3_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DealInfo::cate3_ids() const {
  return cate3_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DealInfo::mutable_cate3_ids() {
  return &cate3_ids_;
}

// repeated bytes cate3_names = 20;
inline int DealInfo::cate3_names_size() const {
  return cate3_names_.size();
}
inline void DealInfo::clear_cate3_names() {
  cate3_names_.Clear();
}
inline const ::std::string& DealInfo::cate3_names(int index) const {
  return cate3_names_.Get(index);
}
inline ::std::string* DealInfo::mutable_cate3_names(int index) {
  return cate3_names_.Mutable(index);
}
inline void DealInfo::set_cate3_names(int index, const ::std::string& value) {
  cate3_names_.Mutable(index)->assign(value);
}
inline void DealInfo::set_cate3_names(int index, const char* value) {
  cate3_names_.Mutable(index)->assign(value);
}
inline void DealInfo::set_cate3_names(int index, const void* value, size_t size) {
  cate3_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::add_cate3_names() {
  return cate3_names_.Add();
}
inline void DealInfo::add_cate3_names(const ::std::string& value) {
  cate3_names_.Add()->assign(value);
}
inline void DealInfo::add_cate3_names(const char* value) {
  cate3_names_.Add()->assign(value);
}
inline void DealInfo::add_cate3_names(const void* value, size_t size) {
  cate3_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
DealInfo::cate3_names() const {
  return cate3_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
DealInfo::mutable_cate3_names() {
  return &cate3_names_;
}

// optional bytes na_url = 21;
inline bool DealInfo::has_na_url() const {
  return _has_bit(20);
}
inline void DealInfo::clear_na_url() {
  if (na_url_ != &_default_na_url_) {
    na_url_->clear();
  }
  _clear_bit(20);
}
inline const ::std::string& DealInfo::na_url() const {
  return *na_url_;
}
inline void DealInfo::set_na_url(const ::std::string& value) {
  _set_bit(20);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  na_url_->assign(value);
}
inline void DealInfo::set_na_url(const char* value) {
  _set_bit(20);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  na_url_->assign(value);
}
inline void DealInfo::set_na_url(const void* value, size_t size) {
  _set_bit(20);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  na_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_na_url() {
  _set_bit(20);
  if (na_url_ == &_default_na_url_) {
    na_url_ = new ::std::string;
  }
  return na_url_;
}

// optional bytes wap_url = 22;
inline bool DealInfo::has_wap_url() const {
  return _has_bit(21);
}
inline void DealInfo::clear_wap_url() {
  if (wap_url_ != &_default_wap_url_) {
    wap_url_->clear();
  }
  _clear_bit(21);
}
inline const ::std::string& DealInfo::wap_url() const {
  return *wap_url_;
}
inline void DealInfo::set_wap_url(const ::std::string& value) {
  _set_bit(21);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  wap_url_->assign(value);
}
inline void DealInfo::set_wap_url(const char* value) {
  _set_bit(21);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  wap_url_->assign(value);
}
inline void DealInfo::set_wap_url(const void* value, size_t size) {
  _set_bit(21);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  wap_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_wap_url() {
  _set_bit(21);
  if (wap_url_ == &_default_wap_url_) {
    wap_url_ = new ::std::string;
  }
  return wap_url_;
}

// optional bytes redirect_url = 23;
inline bool DealInfo::has_redirect_url() const {
  return _has_bit(22);
}
inline void DealInfo::clear_redirect_url() {
  if (redirect_url_ != &_default_redirect_url_) {
    redirect_url_->clear();
  }
  _clear_bit(22);
}
inline const ::std::string& DealInfo::redirect_url() const {
  return *redirect_url_;
}
inline void DealInfo::set_redirect_url(const ::std::string& value) {
  _set_bit(22);
  if (redirect_url_ == &_default_redirect_url_) {
    redirect_url_ = new ::std::string;
  }
  redirect_url_->assign(value);
}
inline void DealInfo::set_redirect_url(const char* value) {
  _set_bit(22);
  if (redirect_url_ == &_default_redirect_url_) {
    redirect_url_ = new ::std::string;
  }
  redirect_url_->assign(value);
}
inline void DealInfo::set_redirect_url(const void* value, size_t size) {
  _set_bit(22);
  if (redirect_url_ == &_default_redirect_url_) {
    redirect_url_ = new ::std::string;
  }
  redirect_url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_redirect_url() {
  _set_bit(22);
  if (redirect_url_ == &_default_redirect_url_) {
    redirect_url_ = new ::std::string;
  }
  return redirect_url_;
}

// optional bytes free_pay_discount = 24;
inline bool DealInfo::has_free_pay_discount() const {
  return _has_bit(23);
}
inline void DealInfo::clear_free_pay_discount() {
  if (free_pay_discount_ != &_default_free_pay_discount_) {
    free_pay_discount_->clear();
  }
  _clear_bit(23);
}
inline const ::std::string& DealInfo::free_pay_discount() const {
  return *free_pay_discount_;
}
inline void DealInfo::set_free_pay_discount(const ::std::string& value) {
  _set_bit(23);
  if (free_pay_discount_ == &_default_free_pay_discount_) {
    free_pay_discount_ = new ::std::string;
  }
  free_pay_discount_->assign(value);
}
inline void DealInfo::set_free_pay_discount(const char* value) {
  _set_bit(23);
  if (free_pay_discount_ == &_default_free_pay_discount_) {
    free_pay_discount_ = new ::std::string;
  }
  free_pay_discount_->assign(value);
}
inline void DealInfo::set_free_pay_discount(const void* value, size_t size) {
  _set_bit(23);
  if (free_pay_discount_ == &_default_free_pay_discount_) {
    free_pay_discount_ = new ::std::string;
  }
  free_pay_discount_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_free_pay_discount() {
  _set_bit(23);
  if (free_pay_discount_ == &_default_free_pay_discount_) {
    free_pay_discount_ = new ::std::string;
  }
  return free_pay_discount_;
}

// optional bytes start_time = 25;
inline bool DealInfo::has_start_time() const {
  return _has_bit(24);
}
inline void DealInfo::clear_start_time() {
  if (start_time_ != &_default_start_time_) {
    start_time_->clear();
  }
  _clear_bit(24);
}
inline const ::std::string& DealInfo::start_time() const {
  return *start_time_;
}
inline void DealInfo::set_start_time(const ::std::string& value) {
  _set_bit(24);
  if (start_time_ == &_default_start_time_) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
}
inline void DealInfo::set_start_time(const char* value) {
  _set_bit(24);
  if (start_time_ == &_default_start_time_) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(value);
}
inline void DealInfo::set_start_time(const void* value, size_t size) {
  _set_bit(24);
  if (start_time_ == &_default_start_time_) {
    start_time_ = new ::std::string;
  }
  start_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_start_time() {
  _set_bit(24);
  if (start_time_ == &_default_start_time_) {
    start_time_ = new ::std::string;
  }
  return start_time_;
}

// optional bytes end_time = 26;
inline bool DealInfo::has_end_time() const {
  return _has_bit(25);
}
inline void DealInfo::clear_end_time() {
  if (end_time_ != &_default_end_time_) {
    end_time_->clear();
  }
  _clear_bit(25);
}
inline const ::std::string& DealInfo::end_time() const {
  return *end_time_;
}
inline void DealInfo::set_end_time(const ::std::string& value) {
  _set_bit(25);
  if (end_time_ == &_default_end_time_) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void DealInfo::set_end_time(const char* value) {
  _set_bit(25);
  if (end_time_ == &_default_end_time_) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(value);
}
inline void DealInfo::set_end_time(const void* value, size_t size) {
  _set_bit(25);
  if (end_time_ == &_default_end_time_) {
    end_time_ = new ::std::string;
  }
  end_time_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DealInfo::mutable_end_time() {
  _set_bit(25);
  if (end_time_ == &_default_end_time_) {
    end_time_ = new ::std::string;
  }
  return end_time_;
}

// optional uint32 deal_id = 27;
inline bool DealInfo::has_deal_id() const {
  return _has_bit(26);
}
inline void DealInfo::clear_deal_id() {
  deal_id_ = 0u;
  _clear_bit(26);
}
inline ::google::protobuf::uint32 DealInfo::deal_id() const {
  return deal_id_;
}
inline void DealInfo::set_deal_id(::google::protobuf::uint32 value) {
  _set_bit(26);
  deal_id_ = value;
}

// -------------------------------------------------------------------

// AppointmentInfo

// optional uint32 count = 1;
inline bool AppointmentInfo::has_count() const {
  return _has_bit(0);
}
inline void AppointmentInfo::clear_count() {
  count_ = 0u;
  _clear_bit(0);
}
inline ::google::protobuf::uint32 AppointmentInfo::count() const {
  return count_;
}
inline void AppointmentInfo::set_count(::google::protobuf::uint32 value) {
  _set_bit(0);
  count_ = value;
}

// optional bytes title = 2;
inline bool AppointmentInfo::has_title() const {
  return _has_bit(1);
}
inline void AppointmentInfo::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& AppointmentInfo::title() const {
  return *title_;
}
inline void AppointmentInfo::set_title(const ::std::string& value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void AppointmentInfo::set_title(const char* value) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void AppointmentInfo::set_title(const void* value, size_t size) {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppointmentInfo::mutable_title() {
  _set_bit(1);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional bytes image = 3;
inline bool AppointmentInfo::has_image() const {
  return _has_bit(2);
}
inline void AppointmentInfo::clear_image() {
  if (image_ != &_default_image_) {
    image_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& AppointmentInfo::image() const {
  return *image_;
}
inline void AppointmentInfo::set_image(const ::std::string& value) {
  _set_bit(2);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void AppointmentInfo::set_image(const char* value) {
  _set_bit(2);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void AppointmentInfo::set_image(const void* value, size_t size) {
  _set_bit(2);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppointmentInfo::mutable_image() {
  _set_bit(2);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  return image_;
}

// repeated uint32 cate1_ids = 4;
inline int AppointmentInfo::cate1_ids_size() const {
  return cate1_ids_.size();
}
inline void AppointmentInfo::clear_cate1_ids() {
  cate1_ids_.Clear();
}
inline ::google::protobuf::uint32 AppointmentInfo::cate1_ids(int index) const {
  return cate1_ids_.Get(index);
}
inline void AppointmentInfo::set_cate1_ids(int index, ::google::protobuf::uint32 value) {
  cate1_ids_.Set(index, value);
}
inline void AppointmentInfo::add_cate1_ids(::google::protobuf::uint32 value) {
  cate1_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AppointmentInfo::cate1_ids() const {
  return cate1_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AppointmentInfo::mutable_cate1_ids() {
  return &cate1_ids_;
}

// repeated uint32 cate2_ids = 5;
inline int AppointmentInfo::cate2_ids_size() const {
  return cate2_ids_.size();
}
inline void AppointmentInfo::clear_cate2_ids() {
  cate2_ids_.Clear();
}
inline ::google::protobuf::uint32 AppointmentInfo::cate2_ids(int index) const {
  return cate2_ids_.Get(index);
}
inline void AppointmentInfo::set_cate2_ids(int index, ::google::protobuf::uint32 value) {
  cate2_ids_.Set(index, value);
}
inline void AppointmentInfo::add_cate2_ids(::google::protobuf::uint32 value) {
  cate2_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AppointmentInfo::cate2_ids() const {
  return cate2_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AppointmentInfo::mutable_cate2_ids() {
  return &cate2_ids_;
}

// repeated uint32 cate3_ids = 6;
inline int AppointmentInfo::cate3_ids_size() const {
  return cate3_ids_.size();
}
inline void AppointmentInfo::clear_cate3_ids() {
  cate3_ids_.Clear();
}
inline ::google::protobuf::uint32 AppointmentInfo::cate3_ids(int index) const {
  return cate3_ids_.Get(index);
}
inline void AppointmentInfo::set_cate3_ids(int index, ::google::protobuf::uint32 value) {
  cate3_ids_.Set(index, value);
}
inline void AppointmentInfo::add_cate3_ids(::google::protobuf::uint32 value) {
  cate3_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AppointmentInfo::cate3_ids() const {
  return cate3_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AppointmentInfo::mutable_cate3_ids() {
  return &cate3_ids_;
}

// repeated bytes cate1_names = 7;
inline int AppointmentInfo::cate1_names_size() const {
  return cate1_names_.size();
}
inline void AppointmentInfo::clear_cate1_names() {
  cate1_names_.Clear();
}
inline const ::std::string& AppointmentInfo::cate1_names(int index) const {
  return cate1_names_.Get(index);
}
inline ::std::string* AppointmentInfo::mutable_cate1_names(int index) {
  return cate1_names_.Mutable(index);
}
inline void AppointmentInfo::set_cate1_names(int index, const ::std::string& value) {
  cate1_names_.Mutable(index)->assign(value);
}
inline void AppointmentInfo::set_cate1_names(int index, const char* value) {
  cate1_names_.Mutable(index)->assign(value);
}
inline void AppointmentInfo::set_cate1_names(int index, const void* value, size_t size) {
  cate1_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppointmentInfo::add_cate1_names() {
  return cate1_names_.Add();
}
inline void AppointmentInfo::add_cate1_names(const ::std::string& value) {
  cate1_names_.Add()->assign(value);
}
inline void AppointmentInfo::add_cate1_names(const char* value) {
  cate1_names_.Add()->assign(value);
}
inline void AppointmentInfo::add_cate1_names(const void* value, size_t size) {
  cate1_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AppointmentInfo::cate1_names() const {
  return cate1_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AppointmentInfo::mutable_cate1_names() {
  return &cate1_names_;
}

// repeated bytes cate2_names = 8;
inline int AppointmentInfo::cate2_names_size() const {
  return cate2_names_.size();
}
inline void AppointmentInfo::clear_cate2_names() {
  cate2_names_.Clear();
}
inline const ::std::string& AppointmentInfo::cate2_names(int index) const {
  return cate2_names_.Get(index);
}
inline ::std::string* AppointmentInfo::mutable_cate2_names(int index) {
  return cate2_names_.Mutable(index);
}
inline void AppointmentInfo::set_cate2_names(int index, const ::std::string& value) {
  cate2_names_.Mutable(index)->assign(value);
}
inline void AppointmentInfo::set_cate2_names(int index, const char* value) {
  cate2_names_.Mutable(index)->assign(value);
}
inline void AppointmentInfo::set_cate2_names(int index, const void* value, size_t size) {
  cate2_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppointmentInfo::add_cate2_names() {
  return cate2_names_.Add();
}
inline void AppointmentInfo::add_cate2_names(const ::std::string& value) {
  cate2_names_.Add()->assign(value);
}
inline void AppointmentInfo::add_cate2_names(const char* value) {
  cate2_names_.Add()->assign(value);
}
inline void AppointmentInfo::add_cate2_names(const void* value, size_t size) {
  cate2_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AppointmentInfo::cate2_names() const {
  return cate2_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AppointmentInfo::mutable_cate2_names() {
  return &cate2_names_;
}

// repeated bytes cate3_names = 9;
inline int AppointmentInfo::cate3_names_size() const {
  return cate3_names_.size();
}
inline void AppointmentInfo::clear_cate3_names() {
  cate3_names_.Clear();
}
inline const ::std::string& AppointmentInfo::cate3_names(int index) const {
  return cate3_names_.Get(index);
}
inline ::std::string* AppointmentInfo::mutable_cate3_names(int index) {
  return cate3_names_.Mutable(index);
}
inline void AppointmentInfo::set_cate3_names(int index, const ::std::string& value) {
  cate3_names_.Mutable(index)->assign(value);
}
inline void AppointmentInfo::set_cate3_names(int index, const char* value) {
  cate3_names_.Mutable(index)->assign(value);
}
inline void AppointmentInfo::set_cate3_names(int index, const void* value, size_t size) {
  cate3_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AppointmentInfo::add_cate3_names() {
  return cate3_names_.Add();
}
inline void AppointmentInfo::add_cate3_names(const ::std::string& value) {
  cate3_names_.Add()->assign(value);
}
inline void AppointmentInfo::add_cate3_names(const char* value) {
  cate3_names_.Add()->assign(value);
}
inline void AppointmentInfo::add_cate3_names(const void* value, size_t size) {
  cate3_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AppointmentInfo::cate3_names() const {
  return cate3_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AppointmentInfo::mutable_cate3_names() {
  return &cate3_names_;
}

// -------------------------------------------------------------------

// ShopInfo

// optional bytes comment_score = 1;
inline bool ShopInfo::has_comment_score() const {
  return _has_bit(0);
}
inline void ShopInfo::clear_comment_score() {
  if (comment_score_ != &_default_comment_score_) {
    comment_score_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& ShopInfo::comment_score() const {
  return *comment_score_;
}
inline void ShopInfo::set_comment_score(const ::std::string& value) {
  _set_bit(0);
  if (comment_score_ == &_default_comment_score_) {
    comment_score_ = new ::std::string;
  }
  comment_score_->assign(value);
}
inline void ShopInfo::set_comment_score(const char* value) {
  _set_bit(0);
  if (comment_score_ == &_default_comment_score_) {
    comment_score_ = new ::std::string;
  }
  comment_score_->assign(value);
}
inline void ShopInfo::set_comment_score(const void* value, size_t size) {
  _set_bit(0);
  if (comment_score_ == &_default_comment_score_) {
    comment_score_ = new ::std::string;
  }
  comment_score_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShopInfo::mutable_comment_score() {
  _set_bit(0);
  if (comment_score_ == &_default_comment_score_) {
    comment_score_ = new ::std::string;
  }
  return comment_score_;
}

// optional uint32 comment_num = 2;
inline bool ShopInfo::has_comment_num() const {
  return _has_bit(1);
}
inline void ShopInfo::clear_comment_num() {
  comment_num_ = 0u;
  _clear_bit(1);
}
inline ::google::protobuf::uint32 ShopInfo::comment_num() const {
  return comment_num_;
}
inline void ShopInfo::set_comment_num(::google::protobuf::uint32 value) {
  _set_bit(1);
  comment_num_ = value;
}

// optional bytes title = 3;
inline bool ShopInfo::has_title() const {
  return _has_bit(2);
}
inline void ShopInfo::clear_title() {
  if (title_ != &_default_title_) {
    title_->clear();
  }
  _clear_bit(2);
}
inline const ::std::string& ShopInfo::title() const {
  return *title_;
}
inline void ShopInfo::set_title(const ::std::string& value) {
  _set_bit(2);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ShopInfo::set_title(const char* value) {
  _set_bit(2);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ShopInfo::set_title(const void* value, size_t size) {
  _set_bit(2);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShopInfo::mutable_title() {
  _set_bit(2);
  if (title_ == &_default_title_) {
    title_ = new ::std::string;
  }
  return title_;
}

// optional bytes image = 4;
inline bool ShopInfo::has_image() const {
  return _has_bit(3);
}
inline void ShopInfo::clear_image() {
  if (image_ != &_default_image_) {
    image_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& ShopInfo::image() const {
  return *image_;
}
inline void ShopInfo::set_image(const ::std::string& value) {
  _set_bit(3);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void ShopInfo::set_image(const char* value) {
  _set_bit(3);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(value);
}
inline void ShopInfo::set_image(const void* value, size_t size) {
  _set_bit(3);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  image_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShopInfo::mutable_image() {
  _set_bit(3);
  if (image_ == &_default_image_) {
    image_ = new ::std::string;
  }
  return image_;
}

// repeated uint32 cate1_ids = 5;
inline int ShopInfo::cate1_ids_size() const {
  return cate1_ids_.size();
}
inline void ShopInfo::clear_cate1_ids() {
  cate1_ids_.Clear();
}
inline ::google::protobuf::uint32 ShopInfo::cate1_ids(int index) const {
  return cate1_ids_.Get(index);
}
inline void ShopInfo::set_cate1_ids(int index, ::google::protobuf::uint32 value) {
  cate1_ids_.Set(index, value);
}
inline void ShopInfo::add_cate1_ids(::google::protobuf::uint32 value) {
  cate1_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ShopInfo::cate1_ids() const {
  return cate1_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ShopInfo::mutable_cate1_ids() {
  return &cate1_ids_;
}

// repeated uint32 cate2_ids = 6;
inline int ShopInfo::cate2_ids_size() const {
  return cate2_ids_.size();
}
inline void ShopInfo::clear_cate2_ids() {
  cate2_ids_.Clear();
}
inline ::google::protobuf::uint32 ShopInfo::cate2_ids(int index) const {
  return cate2_ids_.Get(index);
}
inline void ShopInfo::set_cate2_ids(int index, ::google::protobuf::uint32 value) {
  cate2_ids_.Set(index, value);
}
inline void ShopInfo::add_cate2_ids(::google::protobuf::uint32 value) {
  cate2_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ShopInfo::cate2_ids() const {
  return cate2_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ShopInfo::mutable_cate2_ids() {
  return &cate2_ids_;
}

// repeated uint32 cate3_ids = 7;
inline int ShopInfo::cate3_ids_size() const {
  return cate3_ids_.size();
}
inline void ShopInfo::clear_cate3_ids() {
  cate3_ids_.Clear();
}
inline ::google::protobuf::uint32 ShopInfo::cate3_ids(int index) const {
  return cate3_ids_.Get(index);
}
inline void ShopInfo::set_cate3_ids(int index, ::google::protobuf::uint32 value) {
  cate3_ids_.Set(index, value);
}
inline void ShopInfo::add_cate3_ids(::google::protobuf::uint32 value) {
  cate3_ids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ShopInfo::cate3_ids() const {
  return cate3_ids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ShopInfo::mutable_cate3_ids() {
  return &cate3_ids_;
}

// repeated bytes cate1_names = 8;
inline int ShopInfo::cate1_names_size() const {
  return cate1_names_.size();
}
inline void ShopInfo::clear_cate1_names() {
  cate1_names_.Clear();
}
inline const ::std::string& ShopInfo::cate1_names(int index) const {
  return cate1_names_.Get(index);
}
inline ::std::string* ShopInfo::mutable_cate1_names(int index) {
  return cate1_names_.Mutable(index);
}
inline void ShopInfo::set_cate1_names(int index, const ::std::string& value) {
  cate1_names_.Mutable(index)->assign(value);
}
inline void ShopInfo::set_cate1_names(int index, const char* value) {
  cate1_names_.Mutable(index)->assign(value);
}
inline void ShopInfo::set_cate1_names(int index, const void* value, size_t size) {
  cate1_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShopInfo::add_cate1_names() {
  return cate1_names_.Add();
}
inline void ShopInfo::add_cate1_names(const ::std::string& value) {
  cate1_names_.Add()->assign(value);
}
inline void ShopInfo::add_cate1_names(const char* value) {
  cate1_names_.Add()->assign(value);
}
inline void ShopInfo::add_cate1_names(const void* value, size_t size) {
  cate1_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShopInfo::cate1_names() const {
  return cate1_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ShopInfo::mutable_cate1_names() {
  return &cate1_names_;
}

// repeated bytes cate2_names = 9;
inline int ShopInfo::cate2_names_size() const {
  return cate2_names_.size();
}
inline void ShopInfo::clear_cate2_names() {
  cate2_names_.Clear();
}
inline const ::std::string& ShopInfo::cate2_names(int index) const {
  return cate2_names_.Get(index);
}
inline ::std::string* ShopInfo::mutable_cate2_names(int index) {
  return cate2_names_.Mutable(index);
}
inline void ShopInfo::set_cate2_names(int index, const ::std::string& value) {
  cate2_names_.Mutable(index)->assign(value);
}
inline void ShopInfo::set_cate2_names(int index, const char* value) {
  cate2_names_.Mutable(index)->assign(value);
}
inline void ShopInfo::set_cate2_names(int index, const void* value, size_t size) {
  cate2_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShopInfo::add_cate2_names() {
  return cate2_names_.Add();
}
inline void ShopInfo::add_cate2_names(const ::std::string& value) {
  cate2_names_.Add()->assign(value);
}
inline void ShopInfo::add_cate2_names(const char* value) {
  cate2_names_.Add()->assign(value);
}
inline void ShopInfo::add_cate2_names(const void* value, size_t size) {
  cate2_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShopInfo::cate2_names() const {
  return cate2_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ShopInfo::mutable_cate2_names() {
  return &cate2_names_;
}

// repeated bytes cate3_names = 10;
inline int ShopInfo::cate3_names_size() const {
  return cate3_names_.size();
}
inline void ShopInfo::clear_cate3_names() {
  cate3_names_.Clear();
}
inline const ::std::string& ShopInfo::cate3_names(int index) const {
  return cate3_names_.Get(index);
}
inline ::std::string* ShopInfo::mutable_cate3_names(int index) {
  return cate3_names_.Mutable(index);
}
inline void ShopInfo::set_cate3_names(int index, const ::std::string& value) {
  cate3_names_.Mutable(index)->assign(value);
}
inline void ShopInfo::set_cate3_names(int index, const char* value) {
  cate3_names_.Mutable(index)->assign(value);
}
inline void ShopInfo::set_cate3_names(int index, const void* value, size_t size) {
  cate3_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ShopInfo::add_cate3_names() {
  return cate3_names_.Add();
}
inline void ShopInfo::add_cate3_names(const ::std::string& value) {
  cate3_names_.Add()->assign(value);
}
inline void ShopInfo::add_cate3_names(const char* value) {
  cate3_names_.Add()->assign(value);
}
inline void ShopInfo::add_cate3_names(const void* value, size_t size) {
  cate3_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShopInfo::cate3_names() const {
  return cate3_names_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ShopInfo::mutable_cate3_names() {
  return &cate3_names_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace interface
}  // namespace ztc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bs_5fadvinfo_2eproto__INCLUDED
