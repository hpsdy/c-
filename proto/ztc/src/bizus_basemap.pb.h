// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bizus_basemap.proto

#ifndef PROTOBUF_bizus_5fbasemap_2eproto__INCLUDED
#define PROTOBUF_bizus_5fbasemap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace bizus_basemap {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();

class RecommendPoi;
class RecommendMainPoi;
class SearchPoi;
class QueryInfo;
class Request;
class BoundRank;
class AdvPoiInfo;
class AdvRes;
class DebugInfo;
class DebugList;
class BasemapOpInfo;
class Response;

// ===================================================================

class RecommendPoi : public ::google::protobuf::Message {
 public:
  RecommendPoi();
  virtual ~RecommendPoi();
  
  RecommendPoi(const RecommendPoi& from);
  
  inline RecommendPoi& operator=(const RecommendPoi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecommendPoi& default_instance();
  
  void Swap(RecommendPoi* other);
  
  // implements Message ----------------------------------------------
  
  RecommendPoi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecommendPoi& from);
  void MergeFrom(const RecommendPoi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline ::google::protobuf::uint64 bid() const;
  inline void set_bid(::google::protobuf::uint64 value);
  
  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 point_x = 3;
  inline bool has_point_x() const;
  inline void clear_point_x();
  static const int kPointXFieldNumber = 3;
  inline ::google::protobuf::int32 point_x() const;
  inline void set_point_x(::google::protobuf::int32 value);
  
  // optional int32 point_y = 4;
  inline bool has_point_y() const;
  inline void clear_point_y();
  static const int kPointYFieldNumber = 4;
  inline ::google::protobuf::int32 point_y() const;
  inline void set_point_y(::google::protobuf::int32 value);
  
  // optional bytes tag = 5;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 5;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const void* value, size_t size);
  inline ::std::string* mutable_tag();
  
  // optional int32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 leve = 7;
  inline bool has_leve() const;
  inline void clear_leve();
  static const int kLeveFieldNumber = 7;
  inline ::google::protobuf::int32 leve() const;
  inline void set_leve(::google::protobuf::int32 value);
  
  // optional bytes state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline const ::std::string& state() const;
  inline void set_state(const ::std::string& value);
  inline void set_state(const char* value);
  inline void set_state(const void* value, size_t size);
  inline ::std::string* mutable_state();
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.RecommendPoi)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 bid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 point_x_;
  ::google::protobuf::int32 point_y_;
  ::std::string* tag_;
  static const ::std::string _default_tag_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 leve_;
  ::std::string* state_;
  static const ::std::string _default_state_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RecommendPoi* default_instance_;
};
// -------------------------------------------------------------------

class RecommendMainPoi : public ::google::protobuf::Message {
 public:
  RecommendMainPoi();
  virtual ~RecommendMainPoi();
  
  RecommendMainPoi(const RecommendMainPoi& from);
  
  inline RecommendMainPoi& operator=(const RecommendMainPoi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RecommendMainPoi& default_instance();
  
  void Swap(RecommendMainPoi* other);
  
  // implements Message ----------------------------------------------
  
  RecommendMainPoi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecommendMainPoi& from);
  void MergeFrom(const RecommendMainPoi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bizus_basemap.RecommendPoi recommend_pois = 1;
  inline int recommend_pois_size() const;
  inline void clear_recommend_pois();
  static const int kRecommendPoisFieldNumber = 1;
  inline const ::bizus_basemap::RecommendPoi& recommend_pois(int index) const;
  inline ::bizus_basemap::RecommendPoi* mutable_recommend_pois(int index);
  inline ::bizus_basemap::RecommendPoi* add_recommend_pois();
  inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::RecommendPoi >&
      recommend_pois() const;
  inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::RecommendPoi >*
      mutable_recommend_pois();
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.RecommendMainPoi)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::bizus_basemap::RecommendPoi > recommend_pois_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static RecommendMainPoi* default_instance_;
};
// -------------------------------------------------------------------

class SearchPoi : public ::google::protobuf::Message {
 public:
  SearchPoi();
  virtual ~SearchPoi();
  
  SearchPoi(const SearchPoi& from);
  
  inline SearchPoi& operator=(const SearchPoi& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SearchPoi& default_instance();
  
  void Swap(SearchPoi* other);
  
  // implements Message ----------------------------------------------
  
  SearchPoi* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SearchPoi& from);
  void MergeFrom(const SearchPoi& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline ::google::protobuf::uint64 bid() const;
  inline void set_bid(::google::protobuf::uint64 value);
  
  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 point_x = 3;
  inline bool has_point_x() const;
  inline void clear_point_x();
  static const int kPointXFieldNumber = 3;
  inline ::google::protobuf::int32 point_x() const;
  inline void set_point_x(::google::protobuf::int32 value);
  
  // optional int32 point_y = 4;
  inline bool has_point_y() const;
  inline void clear_point_y();
  static const int kPointYFieldNumber = 4;
  inline ::google::protobuf::int32 point_y() const;
  inline void set_point_y(::google::protobuf::int32 value);
  
  // optional bytes tag = 5;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 5;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const void* value, size_t size);
  inline ::std::string* mutable_tag();
  
  // optional int32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // repeated int32 level = 7;
  inline int level_size() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::int32 level(int index) const;
  inline void set_level(int index, ::google::protobuf::int32 value);
  inline void add_level(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      level() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_level();
  
  // optional bytes recommend_pois = 8;
  inline bool has_recommend_pois() const;
  inline void clear_recommend_pois();
  static const int kRecommendPoisFieldNumber = 8;
  inline const ::std::string& recommend_pois() const;
  inline void set_recommend_pois(const ::std::string& value);
  inline void set_recommend_pois(const char* value);
  inline void set_recommend_pois(const void* value, size_t size);
  inline ::std::string* mutable_recommend_pois();
  
  // optional int32 brand_id = 9;
  inline bool has_brand_id() const;
  inline void clear_brand_id();
  static const int kBrandIdFieldNumber = 9;
  inline ::google::protobuf::int32 brand_id() const;
  inline void set_brand_id(::google::protobuf::int32 value);
  
  // optional bool acc_flag = 10;
  inline bool has_acc_flag() const;
  inline void clear_acc_flag();
  static const int kAccFlagFieldNumber = 10;
  inline bool acc_flag() const;
  inline void set_acc_flag(bool value);
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.SearchPoi)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 bid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 point_x_;
  ::google::protobuf::int32 point_y_;
  ::std::string* tag_;
  static const ::std::string _default_tag_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > level_;
  ::std::string* recommend_pois_;
  static const ::std::string _default_recommend_pois_;
  ::google::protobuf::int32 brand_id_;
  bool acc_flag_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SearchPoi* default_instance_;
};
// -------------------------------------------------------------------

class QueryInfo : public ::google::protobuf::Message {
 public:
  QueryInfo();
  virtual ~QueryInfo();
  
  QueryInfo(const QueryInfo& from);
  
  inline QueryInfo& operator=(const QueryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryInfo& default_instance();
  
  void Swap(QueryInfo* other);
  
  // implements Message ----------------------------------------------
  
  QueryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryInfo& from);
  void MergeFrom(const QueryInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 op_gel = 1;
  inline bool has_op_gel() const;
  inline void clear_op_gel();
  static const int kOpGelFieldNumber = 1;
  inline ::google::protobuf::int32 op_gel() const;
  inline void set_op_gel(::google::protobuf::int32 value);
  
  // optional int32 brand_id = 2;
  inline bool has_brand_id() const;
  inline void clear_brand_id();
  static const int kBrandIdFieldNumber = 2;
  inline ::google::protobuf::int32 brand_id() const;
  inline void set_brand_id(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.QueryInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 op_gel_;
  ::google::protobuf::int32 brand_id_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static QueryInfo* default_instance_;
};
// -------------------------------------------------------------------

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();
  
  Request(const Request& from);
  
  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();
  
  void Swap(Request* other);
  
  // implements Message ----------------------------------------------
  
  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes ctm = 1;
  inline bool has_ctm() const;
  inline void clear_ctm();
  static const int kCtmFieldNumber = 1;
  inline const ::std::string& ctm() const;
  inline void set_ctm(const ::std::string& value);
  inline void set_ctm(const char* value);
  inline void set_ctm(const void* value, size_t size);
  inline ::std::string* mutable_ctm();
  
  // optional bytes cuid = 2;
  inline bool has_cuid() const;
  inline void clear_cuid();
  static const int kCuidFieldNumber = 2;
  inline const ::std::string& cuid() const;
  inline void set_cuid(const ::std::string& value);
  inline void set_cuid(const char* value);
  inline void set_cuid(const void* value, size_t size);
  inline ::std::string* mutable_cuid();
  
  // optional int64 log_id = 3;
  inline bool has_log_id() const;
  inline void clear_log_id();
  static const int kLogIdFieldNumber = 3;
  inline ::google::protobuf::int64 log_id() const;
  inline void set_log_id(::google::protobuf::int64 value);
  
  // optional bytes os = 4;
  inline bool has_os() const;
  inline void clear_os();
  static const int kOsFieldNumber = 4;
  inline const ::std::string& os() const;
  inline void set_os(const ::std::string& value);
  inline void set_os(const char* value);
  inline void set_os(const void* value, size_t size);
  inline ::std::string* mutable_os();
  
  // optional bytes sv = 5;
  inline bool has_sv() const;
  inline void clear_sv();
  static const int kSvFieldNumber = 5;
  inline const ::std::string& sv() const;
  inline void set_sv(const ::std::string& value);
  inline void set_sv(const char* value);
  inline void set_sv(const void* value, size_t size);
  inline ::std::string* mutable_sv();
  
  // optional bytes word = 6;
  inline bool has_word() const;
  inline void clear_word();
  static const int kWordFieldNumber = 6;
  inline const ::std::string& word() const;
  inline void set_word(const ::std::string& value);
  inline void set_word(const char* value);
  inline void set_word(const void* value, size_t size);
  inline ::std::string* mutable_word();
  
  // optional int32 city = 7;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 7;
  inline ::google::protobuf::int32 city() const;
  inline void set_city(::google::protobuf::int32 value);
  
  // optional int32 level = 8;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 8;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional bytes bound = 9;
  inline bool has_bound() const;
  inline void clear_bound();
  static const int kBoundFieldNumber = 9;
  inline const ::std::string& bound() const;
  inline void set_bound(const ::std::string& value);
  inline void set_bound(const char* value);
  inline void set_bound(const void* value, size_t size);
  inline ::std::string* mutable_bound();
  
  // optional bytes business_name = 10;
  inline bool has_business_name() const;
  inline void clear_business_name();
  static const int kBusinessNameFieldNumber = 10;
  inline const ::std::string& business_name() const;
  inline void set_business_name(const ::std::string& value);
  inline void set_business_name(const char* value);
  inline void set_business_name(const void* value, size_t size);
  inline ::std::string* mutable_business_name();
  
  // optional bytes baiduid = 11;
  inline bool has_baiduid() const;
  inline void clear_baiduid();
  static const int kBaiduidFieldNumber = 11;
  inline const ::std::string& baiduid() const;
  inline void set_baiduid(const ::std::string& value);
  inline void set_baiduid(const char* value);
  inline void set_baiduid(const void* value, size_t size);
  inline ::std::string* mutable_baiduid();
  
  // optional bytes from = 12;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 12;
  inline const ::std::string& from() const;
  inline void set_from(const ::std::string& value);
  inline void set_from(const char* value);
  inline void set_from(const void* value, size_t size);
  inline ::std::string* mutable_from();
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.Request)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* ctm_;
  static const ::std::string _default_ctm_;
  ::std::string* cuid_;
  static const ::std::string _default_cuid_;
  ::google::protobuf::int64 log_id_;
  ::std::string* os_;
  static const ::std::string _default_os_;
  ::std::string* sv_;
  static const ::std::string _default_sv_;
  ::std::string* word_;
  static const ::std::string _default_word_;
  ::google::protobuf::int32 city_;
  ::google::protobuf::int32 level_;
  ::std::string* bound_;
  static const ::std::string _default_bound_;
  ::std::string* business_name_;
  static const ::std::string _default_business_name_;
  ::std::string* baiduid_;
  static const ::std::string _default_baiduid_;
  ::std::string* from_;
  static const ::std::string _default_from_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// -------------------------------------------------------------------

class BoundRank : public ::google::protobuf::Message {
 public:
  BoundRank();
  virtual ~BoundRank();
  
  BoundRank(const BoundRank& from);
  
  inline BoundRank& operator=(const BoundRank& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundRank& default_instance();
  
  void Swap(BoundRank* other);
  
  // implements Message ----------------------------------------------
  
  BoundRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoundRank& from);
  void MergeFrom(const BoundRank& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bizus_basemap.SearchPoi poi_list = 1;
  inline int poi_list_size() const;
  inline void clear_poi_list();
  static const int kPoiListFieldNumber = 1;
  inline const ::bizus_basemap::SearchPoi& poi_list(int index) const;
  inline ::bizus_basemap::SearchPoi* mutable_poi_list(int index);
  inline ::bizus_basemap::SearchPoi* add_poi_list();
  inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >&
      poi_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >*
      mutable_poi_list();
  
  // optional .bizus_basemap.QueryInfo query = 2;
  inline bool has_query() const;
  inline void clear_query();
  static const int kQueryFieldNumber = 2;
  inline const ::bizus_basemap::QueryInfo& query() const;
  inline ::bizus_basemap::QueryInfo* mutable_query();
  
  // optional .bizus_basemap.Request request = 3;
  inline bool has_request() const;
  inline void clear_request();
  static const int kRequestFieldNumber = 3;
  inline const ::bizus_basemap::Request& request() const;
  inline ::bizus_basemap::Request* mutable_request();
  
  // optional int32 code = 4;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 4;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);
  
  // optional int32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);
  
  // optional bytes res_bound = 6;
  inline bool has_res_bound() const;
  inline void clear_res_bound();
  static const int kResBoundFieldNumber = 6;
  inline const ::std::string& res_bound() const;
  inline void set_res_bound(const ::std::string& value);
  inline void set_res_bound(const char* value);
  inline void set_res_bound(const void* value, size_t size);
  inline ::std::string* mutable_res_bound();
  
  // optional bytes exp_info = 7;
  inline bool has_exp_info() const;
  inline void clear_exp_info();
  static const int kExpInfoFieldNumber = 7;
  inline const ::std::string& exp_info() const;
  inline void set_exp_info(const ::std::string& value);
  inline void set_exp_info(const char* value);
  inline void set_exp_info(const void* value, size_t size);
  inline ::std::string* mutable_exp_info();
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.BoundRank)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi > poi_list_;
  ::bizus_basemap::QueryInfo* query_;
  ::bizus_basemap::Request* request_;
  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 level_;
  ::std::string* res_bound_;
  static const ::std::string _default_res_bound_;
  ::std::string* exp_info_;
  static const ::std::string _default_exp_info_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BoundRank* default_instance_;
};
// -------------------------------------------------------------------

class AdvPoiInfo : public ::google::protobuf::Message {
 public:
  AdvPoiInfo();
  virtual ~AdvPoiInfo();
  
  AdvPoiInfo(const AdvPoiInfo& from);
  
  inline AdvPoiInfo& operator=(const AdvPoiInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvPoiInfo& default_instance();
  
  void Swap(AdvPoiInfo* other);
  
  // implements Message ----------------------------------------------
  
  AdvPoiInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdvPoiInfo& from);
  void MergeFrom(const AdvPoiInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional uint64 bid = 1;
  inline bool has_bid() const;
  inline void clear_bid();
  static const int kBidFieldNumber = 1;
  inline ::google::protobuf::uint64 bid() const;
  inline void set_bid(::google::protobuf::uint64 value);
  
  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  
  // optional int32 point_x = 3;
  inline bool has_point_x() const;
  inline void clear_point_x();
  static const int kPointXFieldNumber = 3;
  inline ::google::protobuf::int32 point_x() const;
  inline void set_point_x(::google::protobuf::int32 value);
  
  // optional int32 point_y = 4;
  inline bool has_point_y() const;
  inline void clear_point_y();
  static const int kPointYFieldNumber = 4;
  inline ::google::protobuf::int32 point_y() const;
  inline void set_point_y(::google::protobuf::int32 value);
  
  // optional bytes tag = 5;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 5;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const void* value, size_t size);
  inline ::std::string* mutable_tag();
  
  // optional int32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 brand_id = 7;
  inline bool has_brand_id() const;
  inline void clear_brand_id();
  static const int kBrandIdFieldNumber = 7;
  inline ::google::protobuf::int32 brand_id() const;
  inline void set_brand_id(::google::protobuf::int32 value);
  
  // optional bool vip_flag = 8;
  inline bool has_vip_flag() const;
  inline void clear_vip_flag();
  static const int kVipFlagFieldNumber = 8;
  inline bool vip_flag() const;
  inline void set_vip_flag(bool value);
  
  // optional bytes character = 9;
  inline bool has_character() const;
  inline void clear_character();
  static const int kCharacterFieldNumber = 9;
  inline const ::std::string& character() const;
  inline void set_character(const ::std::string& value);
  inline void set_character(const char* value);
  inline void set_character(const void* value, size_t size);
  inline ::std::string* mutable_character();
  
  // optional int32 from = 10;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 10;
  inline ::google::protobuf::int32 from() const;
  inline void set_from(::google::protobuf::int32 value);
  
  // optional int32 to = 11;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 11;
  inline ::google::protobuf::int32 to() const;
  inline void set_to(::google::protobuf::int32 value);
  
  // optional bytes stat_log = 12;
  inline bool has_stat_log() const;
  inline void clear_stat_log();
  static const int kStatLogFieldNumber = 12;
  inline const ::std::string& stat_log() const;
  inline void set_stat_log(const ::std::string& value);
  inline void set_stat_log(const char* value);
  inline void set_stat_log(const void* value, size_t size);
  inline ::std::string* mutable_stat_log();
  
  // optional int64 strategy = 13;
  inline bool has_strategy() const;
  inline void clear_strategy();
  static const int kStrategyFieldNumber = 13;
  inline ::google::protobuf::int64 strategy() const;
  inline void set_strategy(::google::protobuf::int64 value);
  
  // optional int32 source = 14;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 14;
  inline ::google::protobuf::int32 source() const;
  inline void set_source(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.AdvPoiInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 bid_;
  ::std::string* name_;
  static const ::std::string _default_name_;
  ::google::protobuf::int32 point_x_;
  ::google::protobuf::int32 point_y_;
  ::std::string* tag_;
  static const ::std::string _default_tag_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 brand_id_;
  bool vip_flag_;
  ::std::string* character_;
  static const ::std::string _default_character_;
  ::google::protobuf::int32 from_;
  ::google::protobuf::int32 to_;
  ::std::string* stat_log_;
  static const ::std::string _default_stat_log_;
  ::google::protobuf::int64 strategy_;
  ::google::protobuf::int32 source_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AdvPoiInfo* default_instance_;
};
// -------------------------------------------------------------------

class AdvRes : public ::google::protobuf::Message {
 public:
  AdvRes();
  virtual ~AdvRes();
  
  AdvRes(const AdvRes& from);
  
  inline AdvRes& operator=(const AdvRes& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AdvRes& default_instance();
  
  void Swap(AdvRes* other);
  
  // implements Message ----------------------------------------------
  
  AdvRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AdvRes& from);
  void MergeFrom(const AdvRes& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bizus_basemap.AdvPoiInfo poi_list = 1;
  inline int poi_list_size() const;
  inline void clear_poi_list();
  static const int kPoiListFieldNumber = 1;
  inline const ::bizus_basemap::AdvPoiInfo& poi_list(int index) const;
  inline ::bizus_basemap::AdvPoiInfo* mutable_poi_list(int index);
  inline ::bizus_basemap::AdvPoiInfo* add_poi_list();
  inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::AdvPoiInfo >&
      poi_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::AdvPoiInfo >*
      mutable_poi_list();
  
  // optional bytes strategy = 2;
  inline bool has_strategy() const;
  inline void clear_strategy();
  static const int kStrategyFieldNumber = 2;
  inline const ::std::string& strategy() const;
  inline void set_strategy(const ::std::string& value);
  inline void set_strategy(const char* value);
  inline void set_strategy(const void* value, size_t size);
  inline ::std::string* mutable_strategy();
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.AdvRes)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::bizus_basemap::AdvPoiInfo > poi_list_;
  ::std::string* strategy_;
  static const ::std::string _default_strategy_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static AdvRes* default_instance_;
};
// -------------------------------------------------------------------

class DebugInfo : public ::google::protobuf::Message {
 public:
  DebugInfo();
  virtual ~DebugInfo();
  
  DebugInfo(const DebugInfo& from);
  
  inline DebugInfo& operator=(const DebugInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugInfo& default_instance();
  
  void Swap(DebugInfo* other);
  
  // implements Message ----------------------------------------------
  
  DebugInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugInfo& from);
  void MergeFrom(const DebugInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 ad_id = 1;
  inline bool has_ad_id() const;
  inline void clear_ad_id();
  static const int kAdIdFieldNumber = 1;
  inline ::google::protobuf::uint64 ad_id() const;
  inline void set_ad_id(::google::protobuf::uint64 value);
  
  // required uint64 adp_id = 2;
  inline bool has_adp_id() const;
  inline void clear_adp_id();
  static const int kAdpIdFieldNumber = 2;
  inline ::google::protobuf::uint64 adp_id() const;
  inline void set_adp_id(::google::protobuf::uint64 value);
  
  // required int32 scale_max = 3;
  inline bool has_scale_max() const;
  inline void clear_scale_max();
  static const int kScaleMaxFieldNumber = 3;
  inline ::google::protobuf::int32 scale_max() const;
  inline void set_scale_max(::google::protobuf::int32 value);
  
  // required int32 scale_min = 4;
  inline bool has_scale_min() const;
  inline void clear_scale_min();
  static const int kScaleMinFieldNumber = 4;
  inline ::google::protobuf::int32 scale_min() const;
  inline void set_scale_min(::google::protobuf::int32 value);
  
  // required uint32 cus_id = 5;
  inline bool has_cus_id() const;
  inline void clear_cus_id();
  static const int kCusIdFieldNumber = 5;
  inline ::google::protobuf::uint32 cus_id() const;
  inline void set_cus_id(::google::protobuf::uint32 value);
  
  // required double ad_bidprice = 6;
  inline bool has_ad_bidprice() const;
  inline void clear_ad_bidprice();
  static const int kAdBidpriceFieldNumber = 6;
  inline double ad_bidprice() const;
  inline void set_ad_bidprice(double value);
  
  // required bytes tag = 7;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 7;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const void* value, size_t size);
  inline ::std::string* mutable_tag();
  
  // required uint64 poi_id = 8;
  inline bool has_poi_id() const;
  inline void clear_poi_id();
  static const int kPoiIdFieldNumber = 8;
  inline ::google::protobuf::uint64 poi_id() const;
  inline void set_poi_id(::google::protobuf::uint64 value);
  
  // required uint64 geohash = 9;
  inline bool has_geohash() const;
  inline void clear_geohash();
  static const int kGeohashFieldNumber = 9;
  inline ::google::protobuf::uint64 geohash() const;
  inline void set_geohash(::google::protobuf::uint64 value);
  
  // required double distance = 10;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 10;
  inline double distance() const;
  inline void set_distance(double value);
  
  // required int32 poi_x = 11;
  inline bool has_poi_x() const;
  inline void clear_poi_x();
  static const int kPoiXFieldNumber = 11;
  inline ::google::protobuf::int32 poi_x() const;
  inline void set_poi_x(::google::protobuf::int32 value);
  
  // required int32 poi_y = 12;
  inline bool has_poi_y() const;
  inline void clear_poi_y();
  static const int kPoiYFieldNumber = 12;
  inline ::google::protobuf::int32 poi_y() const;
  inline void set_poi_y(::google::protobuf::int32 value);
  
  // required int32 grade = 13;
  inline bool has_grade() const;
  inline void clear_grade();
  static const int kGradeFieldNumber = 13;
  inline ::google::protobuf::int32 grade() const;
  inline void set_grade(::google::protobuf::int32 value);
  
  // required uint32 comment = 14;
  inline bool has_comment() const;
  inline void clear_comment();
  static const int kCommentFieldNumber = 14;
  inline ::google::protobuf::uint32 comment() const;
  inline void set_comment(::google::protobuf::uint32 value);
  
  // required bool is_valid = 15;
  inline bool has_is_valid() const;
  inline void clear_is_valid();
  static const int kIsValidFieldNumber = 15;
  inline bool is_valid() const;
  inline void set_is_valid(bool value);
  
  // required bool is_current_level = 16;
  inline bool has_is_current_level() const;
  inline void clear_is_current_level();
  static const int kIsCurrentLevelFieldNumber = 16;
  inline bool is_current_level() const;
  inline void set_is_current_level(bool value);
  
  // required bool is_current_bound = 17;
  inline bool has_is_current_bound() const;
  inline void clear_is_current_bound();
  static const int kIsCurrentBoundFieldNumber = 17;
  inline bool is_current_bound() const;
  inline void set_is_current_bound(bool value);
  
  // required int32 strategy = 18;
  inline bool has_strategy() const;
  inline void clear_strategy();
  static const int kStrategyFieldNumber = 18;
  inline ::google::protobuf::int32 strategy() const;
  inline void set_strategy(::google::protobuf::int32 value);
  
  // optional bytes tag2 = 19;
  inline bool has_tag2() const;
  inline void clear_tag2();
  static const int kTag2FieldNumber = 19;
  inline const ::std::string& tag2() const;
  inline void set_tag2(const ::std::string& value);
  inline void set_tag2(const char* value);
  inline void set_tag2(const void* value, size_t size);
  inline ::std::string* mutable_tag2();
  
  // optional int32 poi_hot = 20;
  inline bool has_poi_hot() const;
  inline void clear_poi_hot();
  static const int kPoiHotFieldNumber = 20;
  inline ::google::protobuf::int32 poi_hot() const;
  inline void set_poi_hot(::google::protobuf::int32 value);
  
  // optional bytes geohash_str = 21;
  inline bool has_geohash_str() const;
  inline void clear_geohash_str();
  static const int kGeohashStrFieldNumber = 21;
  inline const ::std::string& geohash_str() const;
  inline void set_geohash_str(const ::std::string& value);
  inline void set_geohash_str(const char* value);
  inline void set_geohash_str(const void* value, size_t size);
  inline ::std::string* mutable_geohash_str();
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.DebugInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::uint64 ad_id_;
  ::google::protobuf::uint64 adp_id_;
  ::google::protobuf::int32 scale_max_;
  ::google::protobuf::int32 scale_min_;
  ::google::protobuf::uint32 cus_id_;
  double ad_bidprice_;
  ::std::string* tag_;
  static const ::std::string _default_tag_;
  ::google::protobuf::uint64 poi_id_;
  ::google::protobuf::uint64 geohash_;
  double distance_;
  ::google::protobuf::int32 poi_x_;
  ::google::protobuf::int32 poi_y_;
  ::google::protobuf::int32 grade_;
  ::google::protobuf::uint32 comment_;
  bool is_valid_;
  bool is_current_level_;
  bool is_current_bound_;
  ::google::protobuf::int32 strategy_;
  ::std::string* tag2_;
  static const ::std::string _default_tag2_;
  ::google::protobuf::int32 poi_hot_;
  ::std::string* geohash_str_;
  static const ::std::string _default_geohash_str_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(21 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DebugInfo* default_instance_;
};
// -------------------------------------------------------------------

class DebugList : public ::google::protobuf::Message {
 public:
  DebugList();
  virtual ~DebugList();
  
  DebugList(const DebugList& from);
  
  inline DebugList& operator=(const DebugList& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DebugList& default_instance();
  
  void Swap(DebugList* other);
  
  // implements Message ----------------------------------------------
  
  DebugList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DebugList& from);
  void MergeFrom(const DebugList& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .bizus_basemap.DebugInfo debug_list = 1;
  inline int debug_list_size() const;
  inline void clear_debug_list();
  static const int kDebugListFieldNumber = 1;
  inline const ::bizus_basemap::DebugInfo& debug_list(int index) const;
  inline ::bizus_basemap::DebugInfo* mutable_debug_list(int index);
  inline ::bizus_basemap::DebugInfo* add_debug_list();
  inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::DebugInfo >&
      debug_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::DebugInfo >*
      mutable_debug_list();
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.DebugList)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::bizus_basemap::DebugInfo > debug_list_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DebugList* default_instance_;
};
// -------------------------------------------------------------------

class BasemapOpInfo : public ::google::protobuf::Message {
 public:
  BasemapOpInfo();
  virtual ~BasemapOpInfo();
  
  BasemapOpInfo(const BasemapOpInfo& from);
  
  inline BasemapOpInfo& operator=(const BasemapOpInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BasemapOpInfo& default_instance();
  
  void Swap(BasemapOpInfo* other);
  
  // implements Message ----------------------------------------------
  
  BasemapOpInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BasemapOpInfo& from);
  void MergeFrom(const BasemapOpInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline const ::std::string& tag() const;
  inline void set_tag(const ::std::string& value);
  inline void set_tag(const char* value);
  inline void set_tag(const void* value, size_t size);
  inline ::std::string* mutable_tag();
  
  // optional int32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::int32 rank() const;
  inline void set_rank(::google::protobuf::int32 value);
  
  // optional int32 brand_id = 3;
  inline bool has_brand_id() const;
  inline void clear_brand_id();
  static const int kBrandIdFieldNumber = 3;
  inline ::google::protobuf::int32 brand_id() const;
  inline void set_brand_id(::google::protobuf::int32 value);
  
  // optional bool vip_flag = 4;
  inline bool has_vip_flag() const;
  inline void clear_vip_flag();
  static const int kVipFlagFieldNumber = 4;
  inline bool vip_flag() const;
  inline void set_vip_flag(bool value);
  
  // optional bytes character = 5;
  inline bool has_character() const;
  inline void clear_character();
  static const int kCharacterFieldNumber = 5;
  inline const ::std::string& character() const;
  inline void set_character(const ::std::string& value);
  inline void set_character(const char* value);
  inline void set_character(const void* value, size_t size);
  inline ::std::string* mutable_character();
  
  // optional int32 from = 6;
  inline bool has_from() const;
  inline void clear_from();
  static const int kFromFieldNumber = 6;
  inline ::google::protobuf::int32 from() const;
  inline void set_from(::google::protobuf::int32 value);
  
  // optional int32 to = 7;
  inline bool has_to() const;
  inline void clear_to();
  static const int kToFieldNumber = 7;
  inline ::google::protobuf::int32 to() const;
  inline void set_to(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.BasemapOpInfo)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::std::string* tag_;
  static const ::std::string _default_tag_;
  ::google::protobuf::int32 rank_;
  ::google::protobuf::int32 brand_id_;
  bool vip_flag_;
  ::std::string* character_;
  static const ::std::string _default_character_;
  ::google::protobuf::int32 from_;
  ::google::protobuf::int32 to_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BasemapOpInfo* default_instance_;
};
// -------------------------------------------------------------------

class Response : public ::google::protobuf::Message {
 public:
  Response();
  virtual ~Response();
  
  Response(const Response& from);
  
  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();
  
  void Swap(Response* other);
  
  // implements Message ----------------------------------------------
  
  Response* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Response& from);
  void MergeFrom(const Response& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 status = 1;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 1;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);
  
  // required .bizus_basemap.AdvRes ads = 2;
  inline bool has_ads() const;
  inline void clear_ads();
  static const int kAdsFieldNumber = 2;
  inline const ::bizus_basemap::AdvRes& ads() const;
  inline ::bizus_basemap::AdvRes* mutable_ads();
  
  // @@protoc_insertion_point(class_scope:bizus_basemap.Response)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 status_;
  ::bizus_basemap::AdvRes* ads_;
  friend void  protobuf_AddDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_AssignDesc_bizus_5fbasemap_2eproto();
  friend void protobuf_ShutdownFile_bizus_5fbasemap_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// ===================================================================


// ===================================================================

// RecommendPoi

// optional uint64 bid = 1;
inline bool RecommendPoi::has_bid() const {
  return _has_bit(0);
}
inline void RecommendPoi::clear_bid() {
  bid_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 RecommendPoi::bid() const {
  return bid_;
}
inline void RecommendPoi::set_bid(::google::protobuf::uint64 value) {
  _set_bit(0);
  bid_ = value;
}

// optional bytes name = 2;
inline bool RecommendPoi::has_name() const {
  return _has_bit(1);
}
inline void RecommendPoi::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& RecommendPoi::name() const {
  return *name_;
}
inline void RecommendPoi::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RecommendPoi::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void RecommendPoi::set_name(const void* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecommendPoi::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 point_x = 3;
inline bool RecommendPoi::has_point_x() const {
  return _has_bit(2);
}
inline void RecommendPoi::clear_point_x() {
  point_x_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 RecommendPoi::point_x() const {
  return point_x_;
}
inline void RecommendPoi::set_point_x(::google::protobuf::int32 value) {
  _set_bit(2);
  point_x_ = value;
}

// optional int32 point_y = 4;
inline bool RecommendPoi::has_point_y() const {
  return _has_bit(3);
}
inline void RecommendPoi::clear_point_y() {
  point_y_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 RecommendPoi::point_y() const {
  return point_y_;
}
inline void RecommendPoi::set_point_y(::google::protobuf::int32 value) {
  _set_bit(3);
  point_y_ = value;
}

// optional bytes tag = 5;
inline bool RecommendPoi::has_tag() const {
  return _has_bit(4);
}
inline void RecommendPoi::clear_tag() {
  if (tag_ != &_default_tag_) {
    tag_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& RecommendPoi::tag() const {
  return *tag_;
}
inline void RecommendPoi::set_tag(const ::std::string& value) {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void RecommendPoi::set_tag(const char* value) {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void RecommendPoi::set_tag(const void* value, size_t size) {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecommendPoi::mutable_tag() {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  return tag_;
}

// optional int32 rank = 6;
inline bool RecommendPoi::has_rank() const {
  return _has_bit(5);
}
inline void RecommendPoi::clear_rank() {
  rank_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 RecommendPoi::rank() const {
  return rank_;
}
inline void RecommendPoi::set_rank(::google::protobuf::int32 value) {
  _set_bit(5);
  rank_ = value;
}

// optional int32 leve = 7;
inline bool RecommendPoi::has_leve() const {
  return _has_bit(6);
}
inline void RecommendPoi::clear_leve() {
  leve_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 RecommendPoi::leve() const {
  return leve_;
}
inline void RecommendPoi::set_leve(::google::protobuf::int32 value) {
  _set_bit(6);
  leve_ = value;
}

// optional bytes state = 8;
inline bool RecommendPoi::has_state() const {
  return _has_bit(7);
}
inline void RecommendPoi::clear_state() {
  if (state_ != &_default_state_) {
    state_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& RecommendPoi::state() const {
  return *state_;
}
inline void RecommendPoi::set_state(const ::std::string& value) {
  _set_bit(7);
  if (state_ == &_default_state_) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void RecommendPoi::set_state(const char* value) {
  _set_bit(7);
  if (state_ == &_default_state_) {
    state_ = new ::std::string;
  }
  state_->assign(value);
}
inline void RecommendPoi::set_state(const void* value, size_t size) {
  _set_bit(7);
  if (state_ == &_default_state_) {
    state_ = new ::std::string;
  }
  state_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RecommendPoi::mutable_state() {
  _set_bit(7);
  if (state_ == &_default_state_) {
    state_ = new ::std::string;
  }
  return state_;
}

// -------------------------------------------------------------------

// RecommendMainPoi

// repeated .bizus_basemap.RecommendPoi recommend_pois = 1;
inline int RecommendMainPoi::recommend_pois_size() const {
  return recommend_pois_.size();
}
inline void RecommendMainPoi::clear_recommend_pois() {
  recommend_pois_.Clear();
}
inline const ::bizus_basemap::RecommendPoi& RecommendMainPoi::recommend_pois(int index) const {
  return recommend_pois_.Get(index);
}
inline ::bizus_basemap::RecommendPoi* RecommendMainPoi::mutable_recommend_pois(int index) {
  return recommend_pois_.Mutable(index);
}
inline ::bizus_basemap::RecommendPoi* RecommendMainPoi::add_recommend_pois() {
  return recommend_pois_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::RecommendPoi >&
RecommendMainPoi::recommend_pois() const {
  return recommend_pois_;
}
inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::RecommendPoi >*
RecommendMainPoi::mutable_recommend_pois() {
  return &recommend_pois_;
}

// -------------------------------------------------------------------

// SearchPoi

// optional uint64 bid = 1;
inline bool SearchPoi::has_bid() const {
  return _has_bit(0);
}
inline void SearchPoi::clear_bid() {
  bid_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 SearchPoi::bid() const {
  return bid_;
}
inline void SearchPoi::set_bid(::google::protobuf::uint64 value) {
  _set_bit(0);
  bid_ = value;
}

// optional bytes name = 2;
inline bool SearchPoi::has_name() const {
  return _has_bit(1);
}
inline void SearchPoi::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& SearchPoi::name() const {
  return *name_;
}
inline void SearchPoi::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SearchPoi::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SearchPoi::set_name(const void* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPoi::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 point_x = 3;
inline bool SearchPoi::has_point_x() const {
  return _has_bit(2);
}
inline void SearchPoi::clear_point_x() {
  point_x_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 SearchPoi::point_x() const {
  return point_x_;
}
inline void SearchPoi::set_point_x(::google::protobuf::int32 value) {
  _set_bit(2);
  point_x_ = value;
}

// optional int32 point_y = 4;
inline bool SearchPoi::has_point_y() const {
  return _has_bit(3);
}
inline void SearchPoi::clear_point_y() {
  point_y_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 SearchPoi::point_y() const {
  return point_y_;
}
inline void SearchPoi::set_point_y(::google::protobuf::int32 value) {
  _set_bit(3);
  point_y_ = value;
}

// optional bytes tag = 5;
inline bool SearchPoi::has_tag() const {
  return _has_bit(4);
}
inline void SearchPoi::clear_tag() {
  if (tag_ != &_default_tag_) {
    tag_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& SearchPoi::tag() const {
  return *tag_;
}
inline void SearchPoi::set_tag(const ::std::string& value) {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void SearchPoi::set_tag(const char* value) {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void SearchPoi::set_tag(const void* value, size_t size) {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPoi::mutable_tag() {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  return tag_;
}

// optional int32 rank = 6;
inline bool SearchPoi::has_rank() const {
  return _has_bit(5);
}
inline void SearchPoi::clear_rank() {
  rank_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 SearchPoi::rank() const {
  return rank_;
}
inline void SearchPoi::set_rank(::google::protobuf::int32 value) {
  _set_bit(5);
  rank_ = value;
}

// repeated int32 level = 7;
inline int SearchPoi::level_size() const {
  return level_.size();
}
inline void SearchPoi::clear_level() {
  level_.Clear();
}
inline ::google::protobuf::int32 SearchPoi::level(int index) const {
  return level_.Get(index);
}
inline void SearchPoi::set_level(int index, ::google::protobuf::int32 value) {
  level_.Set(index, value);
}
inline void SearchPoi::add_level(::google::protobuf::int32 value) {
  level_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SearchPoi::level() const {
  return level_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SearchPoi::mutable_level() {
  return &level_;
}

// optional bytes recommend_pois = 8;
inline bool SearchPoi::has_recommend_pois() const {
  return _has_bit(7);
}
inline void SearchPoi::clear_recommend_pois() {
  if (recommend_pois_ != &_default_recommend_pois_) {
    recommend_pois_->clear();
  }
  _clear_bit(7);
}
inline const ::std::string& SearchPoi::recommend_pois() const {
  return *recommend_pois_;
}
inline void SearchPoi::set_recommend_pois(const ::std::string& value) {
  _set_bit(7);
  if (recommend_pois_ == &_default_recommend_pois_) {
    recommend_pois_ = new ::std::string;
  }
  recommend_pois_->assign(value);
}
inline void SearchPoi::set_recommend_pois(const char* value) {
  _set_bit(7);
  if (recommend_pois_ == &_default_recommend_pois_) {
    recommend_pois_ = new ::std::string;
  }
  recommend_pois_->assign(value);
}
inline void SearchPoi::set_recommend_pois(const void* value, size_t size) {
  _set_bit(7);
  if (recommend_pois_ == &_default_recommend_pois_) {
    recommend_pois_ = new ::std::string;
  }
  recommend_pois_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SearchPoi::mutable_recommend_pois() {
  _set_bit(7);
  if (recommend_pois_ == &_default_recommend_pois_) {
    recommend_pois_ = new ::std::string;
  }
  return recommend_pois_;
}

// optional int32 brand_id = 9;
inline bool SearchPoi::has_brand_id() const {
  return _has_bit(8);
}
inline void SearchPoi::clear_brand_id() {
  brand_id_ = 0;
  _clear_bit(8);
}
inline ::google::protobuf::int32 SearchPoi::brand_id() const {
  return brand_id_;
}
inline void SearchPoi::set_brand_id(::google::protobuf::int32 value) {
  _set_bit(8);
  brand_id_ = value;
}

// optional bool acc_flag = 10;
inline bool SearchPoi::has_acc_flag() const {
  return _has_bit(9);
}
inline void SearchPoi::clear_acc_flag() {
  acc_flag_ = false;
  _clear_bit(9);
}
inline bool SearchPoi::acc_flag() const {
  return acc_flag_;
}
inline void SearchPoi::set_acc_flag(bool value) {
  _set_bit(9);
  acc_flag_ = value;
}

// -------------------------------------------------------------------

// QueryInfo

// optional int32 op_gel = 1;
inline bool QueryInfo::has_op_gel() const {
  return _has_bit(0);
}
inline void QueryInfo::clear_op_gel() {
  op_gel_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 QueryInfo::op_gel() const {
  return op_gel_;
}
inline void QueryInfo::set_op_gel(::google::protobuf::int32 value) {
  _set_bit(0);
  op_gel_ = value;
}

// optional int32 brand_id = 2;
inline bool QueryInfo::has_brand_id() const {
  return _has_bit(1);
}
inline void QueryInfo::clear_brand_id() {
  brand_id_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 QueryInfo::brand_id() const {
  return brand_id_;
}
inline void QueryInfo::set_brand_id(::google::protobuf::int32 value) {
  _set_bit(1);
  brand_id_ = value;
}

// -------------------------------------------------------------------

// Request

// optional bytes ctm = 1;
inline bool Request::has_ctm() const {
  return _has_bit(0);
}
inline void Request::clear_ctm() {
  if (ctm_ != &_default_ctm_) {
    ctm_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& Request::ctm() const {
  return *ctm_;
}
inline void Request::set_ctm(const ::std::string& value) {
  _set_bit(0);
  if (ctm_ == &_default_ctm_) {
    ctm_ = new ::std::string;
  }
  ctm_->assign(value);
}
inline void Request::set_ctm(const char* value) {
  _set_bit(0);
  if (ctm_ == &_default_ctm_) {
    ctm_ = new ::std::string;
  }
  ctm_->assign(value);
}
inline void Request::set_ctm(const void* value, size_t size) {
  _set_bit(0);
  if (ctm_ == &_default_ctm_) {
    ctm_ = new ::std::string;
  }
  ctm_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_ctm() {
  _set_bit(0);
  if (ctm_ == &_default_ctm_) {
    ctm_ = new ::std::string;
  }
  return ctm_;
}

// optional bytes cuid = 2;
inline bool Request::has_cuid() const {
  return _has_bit(1);
}
inline void Request::clear_cuid() {
  if (cuid_ != &_default_cuid_) {
    cuid_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& Request::cuid() const {
  return *cuid_;
}
inline void Request::set_cuid(const ::std::string& value) {
  _set_bit(1);
  if (cuid_ == &_default_cuid_) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void Request::set_cuid(const char* value) {
  _set_bit(1);
  if (cuid_ == &_default_cuid_) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(value);
}
inline void Request::set_cuid(const void* value, size_t size) {
  _set_bit(1);
  if (cuid_ == &_default_cuid_) {
    cuid_ = new ::std::string;
  }
  cuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_cuid() {
  _set_bit(1);
  if (cuid_ == &_default_cuid_) {
    cuid_ = new ::std::string;
  }
  return cuid_;
}

// optional int64 log_id = 3;
inline bool Request::has_log_id() const {
  return _has_bit(2);
}
inline void Request::clear_log_id() {
  log_id_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 Request::log_id() const {
  return log_id_;
}
inline void Request::set_log_id(::google::protobuf::int64 value) {
  _set_bit(2);
  log_id_ = value;
}

// optional bytes os = 4;
inline bool Request::has_os() const {
  return _has_bit(3);
}
inline void Request::clear_os() {
  if (os_ != &_default_os_) {
    os_->clear();
  }
  _clear_bit(3);
}
inline const ::std::string& Request::os() const {
  return *os_;
}
inline void Request::set_os(const ::std::string& value) {
  _set_bit(3);
  if (os_ == &_default_os_) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void Request::set_os(const char* value) {
  _set_bit(3);
  if (os_ == &_default_os_) {
    os_ = new ::std::string;
  }
  os_->assign(value);
}
inline void Request::set_os(const void* value, size_t size) {
  _set_bit(3);
  if (os_ == &_default_os_) {
    os_ = new ::std::string;
  }
  os_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_os() {
  _set_bit(3);
  if (os_ == &_default_os_) {
    os_ = new ::std::string;
  }
  return os_;
}

// optional bytes sv = 5;
inline bool Request::has_sv() const {
  return _has_bit(4);
}
inline void Request::clear_sv() {
  if (sv_ != &_default_sv_) {
    sv_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& Request::sv() const {
  return *sv_;
}
inline void Request::set_sv(const ::std::string& value) {
  _set_bit(4);
  if (sv_ == &_default_sv_) {
    sv_ = new ::std::string;
  }
  sv_->assign(value);
}
inline void Request::set_sv(const char* value) {
  _set_bit(4);
  if (sv_ == &_default_sv_) {
    sv_ = new ::std::string;
  }
  sv_->assign(value);
}
inline void Request::set_sv(const void* value, size_t size) {
  _set_bit(4);
  if (sv_ == &_default_sv_) {
    sv_ = new ::std::string;
  }
  sv_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_sv() {
  _set_bit(4);
  if (sv_ == &_default_sv_) {
    sv_ = new ::std::string;
  }
  return sv_;
}

// optional bytes word = 6;
inline bool Request::has_word() const {
  return _has_bit(5);
}
inline void Request::clear_word() {
  if (word_ != &_default_word_) {
    word_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& Request::word() const {
  return *word_;
}
inline void Request::set_word(const ::std::string& value) {
  _set_bit(5);
  if (word_ == &_default_word_) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void Request::set_word(const char* value) {
  _set_bit(5);
  if (word_ == &_default_word_) {
    word_ = new ::std::string;
  }
  word_->assign(value);
}
inline void Request::set_word(const void* value, size_t size) {
  _set_bit(5);
  if (word_ == &_default_word_) {
    word_ = new ::std::string;
  }
  word_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_word() {
  _set_bit(5);
  if (word_ == &_default_word_) {
    word_ = new ::std::string;
  }
  return word_;
}

// optional int32 city = 7;
inline bool Request::has_city() const {
  return _has_bit(6);
}
inline void Request::clear_city() {
  city_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 Request::city() const {
  return city_;
}
inline void Request::set_city(::google::protobuf::int32 value) {
  _set_bit(6);
  city_ = value;
}

// optional int32 level = 8;
inline bool Request::has_level() const {
  return _has_bit(7);
}
inline void Request::clear_level() {
  level_ = 0;
  _clear_bit(7);
}
inline ::google::protobuf::int32 Request::level() const {
  return level_;
}
inline void Request::set_level(::google::protobuf::int32 value) {
  _set_bit(7);
  level_ = value;
}

// optional bytes bound = 9;
inline bool Request::has_bound() const {
  return _has_bit(8);
}
inline void Request::clear_bound() {
  if (bound_ != &_default_bound_) {
    bound_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& Request::bound() const {
  return *bound_;
}
inline void Request::set_bound(const ::std::string& value) {
  _set_bit(8);
  if (bound_ == &_default_bound_) {
    bound_ = new ::std::string;
  }
  bound_->assign(value);
}
inline void Request::set_bound(const char* value) {
  _set_bit(8);
  if (bound_ == &_default_bound_) {
    bound_ = new ::std::string;
  }
  bound_->assign(value);
}
inline void Request::set_bound(const void* value, size_t size) {
  _set_bit(8);
  if (bound_ == &_default_bound_) {
    bound_ = new ::std::string;
  }
  bound_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_bound() {
  _set_bit(8);
  if (bound_ == &_default_bound_) {
    bound_ = new ::std::string;
  }
  return bound_;
}

// optional bytes business_name = 10;
inline bool Request::has_business_name() const {
  return _has_bit(9);
}
inline void Request::clear_business_name() {
  if (business_name_ != &_default_business_name_) {
    business_name_->clear();
  }
  _clear_bit(9);
}
inline const ::std::string& Request::business_name() const {
  return *business_name_;
}
inline void Request::set_business_name(const ::std::string& value) {
  _set_bit(9);
  if (business_name_ == &_default_business_name_) {
    business_name_ = new ::std::string;
  }
  business_name_->assign(value);
}
inline void Request::set_business_name(const char* value) {
  _set_bit(9);
  if (business_name_ == &_default_business_name_) {
    business_name_ = new ::std::string;
  }
  business_name_->assign(value);
}
inline void Request::set_business_name(const void* value, size_t size) {
  _set_bit(9);
  if (business_name_ == &_default_business_name_) {
    business_name_ = new ::std::string;
  }
  business_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_business_name() {
  _set_bit(9);
  if (business_name_ == &_default_business_name_) {
    business_name_ = new ::std::string;
  }
  return business_name_;
}

// optional bytes baiduid = 11;
inline bool Request::has_baiduid() const {
  return _has_bit(10);
}
inline void Request::clear_baiduid() {
  if (baiduid_ != &_default_baiduid_) {
    baiduid_->clear();
  }
  _clear_bit(10);
}
inline const ::std::string& Request::baiduid() const {
  return *baiduid_;
}
inline void Request::set_baiduid(const ::std::string& value) {
  _set_bit(10);
  if (baiduid_ == &_default_baiduid_) {
    baiduid_ = new ::std::string;
  }
  baiduid_->assign(value);
}
inline void Request::set_baiduid(const char* value) {
  _set_bit(10);
  if (baiduid_ == &_default_baiduid_) {
    baiduid_ = new ::std::string;
  }
  baiduid_->assign(value);
}
inline void Request::set_baiduid(const void* value, size_t size) {
  _set_bit(10);
  if (baiduid_ == &_default_baiduid_) {
    baiduid_ = new ::std::string;
  }
  baiduid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_baiduid() {
  _set_bit(10);
  if (baiduid_ == &_default_baiduid_) {
    baiduid_ = new ::std::string;
  }
  return baiduid_;
}

// optional bytes from = 12;
inline bool Request::has_from() const {
  return _has_bit(11);
}
inline void Request::clear_from() {
  if (from_ != &_default_from_) {
    from_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& Request::from() const {
  return *from_;
}
inline void Request::set_from(const ::std::string& value) {
  _set_bit(11);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void Request::set_from(const char* value) {
  _set_bit(11);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(value);
}
inline void Request::set_from(const void* value, size_t size) {
  _set_bit(11);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  from_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Request::mutable_from() {
  _set_bit(11);
  if (from_ == &_default_from_) {
    from_ = new ::std::string;
  }
  return from_;
}

// -------------------------------------------------------------------

// BoundRank

// repeated .bizus_basemap.SearchPoi poi_list = 1;
inline int BoundRank::poi_list_size() const {
  return poi_list_.size();
}
inline void BoundRank::clear_poi_list() {
  poi_list_.Clear();
}
inline const ::bizus_basemap::SearchPoi& BoundRank::poi_list(int index) const {
  return poi_list_.Get(index);
}
inline ::bizus_basemap::SearchPoi* BoundRank::mutable_poi_list(int index) {
  return poi_list_.Mutable(index);
}
inline ::bizus_basemap::SearchPoi* BoundRank::add_poi_list() {
  return poi_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >&
BoundRank::poi_list() const {
  return poi_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::SearchPoi >*
BoundRank::mutable_poi_list() {
  return &poi_list_;
}

// optional .bizus_basemap.QueryInfo query = 2;
inline bool BoundRank::has_query() const {
  return _has_bit(1);
}
inline void BoundRank::clear_query() {
  if (query_ != NULL) query_->::bizus_basemap::QueryInfo::Clear();
  _clear_bit(1);
}
inline const ::bizus_basemap::QueryInfo& BoundRank::query() const {
  return query_ != NULL ? *query_ : *default_instance_->query_;
}
inline ::bizus_basemap::QueryInfo* BoundRank::mutable_query() {
  _set_bit(1);
  if (query_ == NULL) query_ = new ::bizus_basemap::QueryInfo;
  return query_;
}

// optional .bizus_basemap.Request request = 3;
inline bool BoundRank::has_request() const {
  return _has_bit(2);
}
inline void BoundRank::clear_request() {
  if (request_ != NULL) request_->::bizus_basemap::Request::Clear();
  _clear_bit(2);
}
inline const ::bizus_basemap::Request& BoundRank::request() const {
  return request_ != NULL ? *request_ : *default_instance_->request_;
}
inline ::bizus_basemap::Request* BoundRank::mutable_request() {
  _set_bit(2);
  if (request_ == NULL) request_ = new ::bizus_basemap::Request;
  return request_;
}

// optional int32 code = 4;
inline bool BoundRank::has_code() const {
  return _has_bit(3);
}
inline void BoundRank::clear_code() {
  code_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 BoundRank::code() const {
  return code_;
}
inline void BoundRank::set_code(::google::protobuf::int32 value) {
  _set_bit(3);
  code_ = value;
}

// optional int32 level = 5;
inline bool BoundRank::has_level() const {
  return _has_bit(4);
}
inline void BoundRank::clear_level() {
  level_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 BoundRank::level() const {
  return level_;
}
inline void BoundRank::set_level(::google::protobuf::int32 value) {
  _set_bit(4);
  level_ = value;
}

// optional bytes res_bound = 6;
inline bool BoundRank::has_res_bound() const {
  return _has_bit(5);
}
inline void BoundRank::clear_res_bound() {
  if (res_bound_ != &_default_res_bound_) {
    res_bound_->clear();
  }
  _clear_bit(5);
}
inline const ::std::string& BoundRank::res_bound() const {
  return *res_bound_;
}
inline void BoundRank::set_res_bound(const ::std::string& value) {
  _set_bit(5);
  if (res_bound_ == &_default_res_bound_) {
    res_bound_ = new ::std::string;
  }
  res_bound_->assign(value);
}
inline void BoundRank::set_res_bound(const char* value) {
  _set_bit(5);
  if (res_bound_ == &_default_res_bound_) {
    res_bound_ = new ::std::string;
  }
  res_bound_->assign(value);
}
inline void BoundRank::set_res_bound(const void* value, size_t size) {
  _set_bit(5);
  if (res_bound_ == &_default_res_bound_) {
    res_bound_ = new ::std::string;
  }
  res_bound_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BoundRank::mutable_res_bound() {
  _set_bit(5);
  if (res_bound_ == &_default_res_bound_) {
    res_bound_ = new ::std::string;
  }
  return res_bound_;
}

// optional bytes exp_info = 7;
inline bool BoundRank::has_exp_info() const {
  return _has_bit(6);
}
inline void BoundRank::clear_exp_info() {
  if (exp_info_ != &_default_exp_info_) {
    exp_info_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& BoundRank::exp_info() const {
  return *exp_info_;
}
inline void BoundRank::set_exp_info(const ::std::string& value) {
  _set_bit(6);
  if (exp_info_ == &_default_exp_info_) {
    exp_info_ = new ::std::string;
  }
  exp_info_->assign(value);
}
inline void BoundRank::set_exp_info(const char* value) {
  _set_bit(6);
  if (exp_info_ == &_default_exp_info_) {
    exp_info_ = new ::std::string;
  }
  exp_info_->assign(value);
}
inline void BoundRank::set_exp_info(const void* value, size_t size) {
  _set_bit(6);
  if (exp_info_ == &_default_exp_info_) {
    exp_info_ = new ::std::string;
  }
  exp_info_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BoundRank::mutable_exp_info() {
  _set_bit(6);
  if (exp_info_ == &_default_exp_info_) {
    exp_info_ = new ::std::string;
  }
  return exp_info_;
}

// -------------------------------------------------------------------

// AdvPoiInfo

// optional uint64 bid = 1;
inline bool AdvPoiInfo::has_bid() const {
  return _has_bit(0);
}
inline void AdvPoiInfo::clear_bid() {
  bid_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 AdvPoiInfo::bid() const {
  return bid_;
}
inline void AdvPoiInfo::set_bid(::google::protobuf::uint64 value) {
  _set_bit(0);
  bid_ = value;
}

// optional bytes name = 2;
inline bool AdvPoiInfo::has_name() const {
  return _has_bit(1);
}
inline void AdvPoiInfo::clear_name() {
  if (name_ != &_default_name_) {
    name_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& AdvPoiInfo::name() const {
  return *name_;
}
inline void AdvPoiInfo::set_name(const ::std::string& value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AdvPoiInfo::set_name(const char* value) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void AdvPoiInfo::set_name(const void* value, size_t size) {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdvPoiInfo::mutable_name() {
  _set_bit(1);
  if (name_ == &_default_name_) {
    name_ = new ::std::string;
  }
  return name_;
}

// optional int32 point_x = 3;
inline bool AdvPoiInfo::has_point_x() const {
  return _has_bit(2);
}
inline void AdvPoiInfo::clear_point_x() {
  point_x_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 AdvPoiInfo::point_x() const {
  return point_x_;
}
inline void AdvPoiInfo::set_point_x(::google::protobuf::int32 value) {
  _set_bit(2);
  point_x_ = value;
}

// optional int32 point_y = 4;
inline bool AdvPoiInfo::has_point_y() const {
  return _has_bit(3);
}
inline void AdvPoiInfo::clear_point_y() {
  point_y_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 AdvPoiInfo::point_y() const {
  return point_y_;
}
inline void AdvPoiInfo::set_point_y(::google::protobuf::int32 value) {
  _set_bit(3);
  point_y_ = value;
}

// optional bytes tag = 5;
inline bool AdvPoiInfo::has_tag() const {
  return _has_bit(4);
}
inline void AdvPoiInfo::clear_tag() {
  if (tag_ != &_default_tag_) {
    tag_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& AdvPoiInfo::tag() const {
  return *tag_;
}
inline void AdvPoiInfo::set_tag(const ::std::string& value) {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void AdvPoiInfo::set_tag(const char* value) {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void AdvPoiInfo::set_tag(const void* value, size_t size) {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdvPoiInfo::mutable_tag() {
  _set_bit(4);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  return tag_;
}

// optional int32 rank = 6;
inline bool AdvPoiInfo::has_rank() const {
  return _has_bit(5);
}
inline void AdvPoiInfo::clear_rank() {
  rank_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 AdvPoiInfo::rank() const {
  return rank_;
}
inline void AdvPoiInfo::set_rank(::google::protobuf::int32 value) {
  _set_bit(5);
  rank_ = value;
}

// optional int32 brand_id = 7;
inline bool AdvPoiInfo::has_brand_id() const {
  return _has_bit(6);
}
inline void AdvPoiInfo::clear_brand_id() {
  brand_id_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 AdvPoiInfo::brand_id() const {
  return brand_id_;
}
inline void AdvPoiInfo::set_brand_id(::google::protobuf::int32 value) {
  _set_bit(6);
  brand_id_ = value;
}

// optional bool vip_flag = 8;
inline bool AdvPoiInfo::has_vip_flag() const {
  return _has_bit(7);
}
inline void AdvPoiInfo::clear_vip_flag() {
  vip_flag_ = false;
  _clear_bit(7);
}
inline bool AdvPoiInfo::vip_flag() const {
  return vip_flag_;
}
inline void AdvPoiInfo::set_vip_flag(bool value) {
  _set_bit(7);
  vip_flag_ = value;
}

// optional bytes character = 9;
inline bool AdvPoiInfo::has_character() const {
  return _has_bit(8);
}
inline void AdvPoiInfo::clear_character() {
  if (character_ != &_default_character_) {
    character_->clear();
  }
  _clear_bit(8);
}
inline const ::std::string& AdvPoiInfo::character() const {
  return *character_;
}
inline void AdvPoiInfo::set_character(const ::std::string& value) {
  _set_bit(8);
  if (character_ == &_default_character_) {
    character_ = new ::std::string;
  }
  character_->assign(value);
}
inline void AdvPoiInfo::set_character(const char* value) {
  _set_bit(8);
  if (character_ == &_default_character_) {
    character_ = new ::std::string;
  }
  character_->assign(value);
}
inline void AdvPoiInfo::set_character(const void* value, size_t size) {
  _set_bit(8);
  if (character_ == &_default_character_) {
    character_ = new ::std::string;
  }
  character_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdvPoiInfo::mutable_character() {
  _set_bit(8);
  if (character_ == &_default_character_) {
    character_ = new ::std::string;
  }
  return character_;
}

// optional int32 from = 10;
inline bool AdvPoiInfo::has_from() const {
  return _has_bit(9);
}
inline void AdvPoiInfo::clear_from() {
  from_ = 0;
  _clear_bit(9);
}
inline ::google::protobuf::int32 AdvPoiInfo::from() const {
  return from_;
}
inline void AdvPoiInfo::set_from(::google::protobuf::int32 value) {
  _set_bit(9);
  from_ = value;
}

// optional int32 to = 11;
inline bool AdvPoiInfo::has_to() const {
  return _has_bit(10);
}
inline void AdvPoiInfo::clear_to() {
  to_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 AdvPoiInfo::to() const {
  return to_;
}
inline void AdvPoiInfo::set_to(::google::protobuf::int32 value) {
  _set_bit(10);
  to_ = value;
}

// optional bytes stat_log = 12;
inline bool AdvPoiInfo::has_stat_log() const {
  return _has_bit(11);
}
inline void AdvPoiInfo::clear_stat_log() {
  if (stat_log_ != &_default_stat_log_) {
    stat_log_->clear();
  }
  _clear_bit(11);
}
inline const ::std::string& AdvPoiInfo::stat_log() const {
  return *stat_log_;
}
inline void AdvPoiInfo::set_stat_log(const ::std::string& value) {
  _set_bit(11);
  if (stat_log_ == &_default_stat_log_) {
    stat_log_ = new ::std::string;
  }
  stat_log_->assign(value);
}
inline void AdvPoiInfo::set_stat_log(const char* value) {
  _set_bit(11);
  if (stat_log_ == &_default_stat_log_) {
    stat_log_ = new ::std::string;
  }
  stat_log_->assign(value);
}
inline void AdvPoiInfo::set_stat_log(const void* value, size_t size) {
  _set_bit(11);
  if (stat_log_ == &_default_stat_log_) {
    stat_log_ = new ::std::string;
  }
  stat_log_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdvPoiInfo::mutable_stat_log() {
  _set_bit(11);
  if (stat_log_ == &_default_stat_log_) {
    stat_log_ = new ::std::string;
  }
  return stat_log_;
}

// optional int64 strategy = 13;
inline bool AdvPoiInfo::has_strategy() const {
  return _has_bit(12);
}
inline void AdvPoiInfo::clear_strategy() {
  strategy_ = GOOGLE_LONGLONG(0);
  _clear_bit(12);
}
inline ::google::protobuf::int64 AdvPoiInfo::strategy() const {
  return strategy_;
}
inline void AdvPoiInfo::set_strategy(::google::protobuf::int64 value) {
  _set_bit(12);
  strategy_ = value;
}

// optional int32 source = 14;
inline bool AdvPoiInfo::has_source() const {
  return _has_bit(13);
}
inline void AdvPoiInfo::clear_source() {
  source_ = 0;
  _clear_bit(13);
}
inline ::google::protobuf::int32 AdvPoiInfo::source() const {
  return source_;
}
inline void AdvPoiInfo::set_source(::google::protobuf::int32 value) {
  _set_bit(13);
  source_ = value;
}

// -------------------------------------------------------------------

// AdvRes

// repeated .bizus_basemap.AdvPoiInfo poi_list = 1;
inline int AdvRes::poi_list_size() const {
  return poi_list_.size();
}
inline void AdvRes::clear_poi_list() {
  poi_list_.Clear();
}
inline const ::bizus_basemap::AdvPoiInfo& AdvRes::poi_list(int index) const {
  return poi_list_.Get(index);
}
inline ::bizus_basemap::AdvPoiInfo* AdvRes::mutable_poi_list(int index) {
  return poi_list_.Mutable(index);
}
inline ::bizus_basemap::AdvPoiInfo* AdvRes::add_poi_list() {
  return poi_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::AdvPoiInfo >&
AdvRes::poi_list() const {
  return poi_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::AdvPoiInfo >*
AdvRes::mutable_poi_list() {
  return &poi_list_;
}

// optional bytes strategy = 2;
inline bool AdvRes::has_strategy() const {
  return _has_bit(1);
}
inline void AdvRes::clear_strategy() {
  if (strategy_ != &_default_strategy_) {
    strategy_->clear();
  }
  _clear_bit(1);
}
inline const ::std::string& AdvRes::strategy() const {
  return *strategy_;
}
inline void AdvRes::set_strategy(const ::std::string& value) {
  _set_bit(1);
  if (strategy_ == &_default_strategy_) {
    strategy_ = new ::std::string;
  }
  strategy_->assign(value);
}
inline void AdvRes::set_strategy(const char* value) {
  _set_bit(1);
  if (strategy_ == &_default_strategy_) {
    strategy_ = new ::std::string;
  }
  strategy_->assign(value);
}
inline void AdvRes::set_strategy(const void* value, size_t size) {
  _set_bit(1);
  if (strategy_ == &_default_strategy_) {
    strategy_ = new ::std::string;
  }
  strategy_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* AdvRes::mutable_strategy() {
  _set_bit(1);
  if (strategy_ == &_default_strategy_) {
    strategy_ = new ::std::string;
  }
  return strategy_;
}

// -------------------------------------------------------------------

// DebugInfo

// required uint64 ad_id = 1;
inline bool DebugInfo::has_ad_id() const {
  return _has_bit(0);
}
inline void DebugInfo::clear_ad_id() {
  ad_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::uint64 DebugInfo::ad_id() const {
  return ad_id_;
}
inline void DebugInfo::set_ad_id(::google::protobuf::uint64 value) {
  _set_bit(0);
  ad_id_ = value;
}

// required uint64 adp_id = 2;
inline bool DebugInfo::has_adp_id() const {
  return _has_bit(1);
}
inline void DebugInfo::clear_adp_id() {
  adp_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::uint64 DebugInfo::adp_id() const {
  return adp_id_;
}
inline void DebugInfo::set_adp_id(::google::protobuf::uint64 value) {
  _set_bit(1);
  adp_id_ = value;
}

// required int32 scale_max = 3;
inline bool DebugInfo::has_scale_max() const {
  return _has_bit(2);
}
inline void DebugInfo::clear_scale_max() {
  scale_max_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 DebugInfo::scale_max() const {
  return scale_max_;
}
inline void DebugInfo::set_scale_max(::google::protobuf::int32 value) {
  _set_bit(2);
  scale_max_ = value;
}

// required int32 scale_min = 4;
inline bool DebugInfo::has_scale_min() const {
  return _has_bit(3);
}
inline void DebugInfo::clear_scale_min() {
  scale_min_ = 0;
  _clear_bit(3);
}
inline ::google::protobuf::int32 DebugInfo::scale_min() const {
  return scale_min_;
}
inline void DebugInfo::set_scale_min(::google::protobuf::int32 value) {
  _set_bit(3);
  scale_min_ = value;
}

// required uint32 cus_id = 5;
inline bool DebugInfo::has_cus_id() const {
  return _has_bit(4);
}
inline void DebugInfo::clear_cus_id() {
  cus_id_ = 0u;
  _clear_bit(4);
}
inline ::google::protobuf::uint32 DebugInfo::cus_id() const {
  return cus_id_;
}
inline void DebugInfo::set_cus_id(::google::protobuf::uint32 value) {
  _set_bit(4);
  cus_id_ = value;
}

// required double ad_bidprice = 6;
inline bool DebugInfo::has_ad_bidprice() const {
  return _has_bit(5);
}
inline void DebugInfo::clear_ad_bidprice() {
  ad_bidprice_ = 0;
  _clear_bit(5);
}
inline double DebugInfo::ad_bidprice() const {
  return ad_bidprice_;
}
inline void DebugInfo::set_ad_bidprice(double value) {
  _set_bit(5);
  ad_bidprice_ = value;
}

// required bytes tag = 7;
inline bool DebugInfo::has_tag() const {
  return _has_bit(6);
}
inline void DebugInfo::clear_tag() {
  if (tag_ != &_default_tag_) {
    tag_->clear();
  }
  _clear_bit(6);
}
inline const ::std::string& DebugInfo::tag() const {
  return *tag_;
}
inline void DebugInfo::set_tag(const ::std::string& value) {
  _set_bit(6);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void DebugInfo::set_tag(const char* value) {
  _set_bit(6);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void DebugInfo::set_tag(const void* value, size_t size) {
  _set_bit(6);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugInfo::mutable_tag() {
  _set_bit(6);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  return tag_;
}

// required uint64 poi_id = 8;
inline bool DebugInfo::has_poi_id() const {
  return _has_bit(7);
}
inline void DebugInfo::clear_poi_id() {
  poi_id_ = GOOGLE_ULONGLONG(0);
  _clear_bit(7);
}
inline ::google::protobuf::uint64 DebugInfo::poi_id() const {
  return poi_id_;
}
inline void DebugInfo::set_poi_id(::google::protobuf::uint64 value) {
  _set_bit(7);
  poi_id_ = value;
}

// required uint64 geohash = 9;
inline bool DebugInfo::has_geohash() const {
  return _has_bit(8);
}
inline void DebugInfo::clear_geohash() {
  geohash_ = GOOGLE_ULONGLONG(0);
  _clear_bit(8);
}
inline ::google::protobuf::uint64 DebugInfo::geohash() const {
  return geohash_;
}
inline void DebugInfo::set_geohash(::google::protobuf::uint64 value) {
  _set_bit(8);
  geohash_ = value;
}

// required double distance = 10;
inline bool DebugInfo::has_distance() const {
  return _has_bit(9);
}
inline void DebugInfo::clear_distance() {
  distance_ = 0;
  _clear_bit(9);
}
inline double DebugInfo::distance() const {
  return distance_;
}
inline void DebugInfo::set_distance(double value) {
  _set_bit(9);
  distance_ = value;
}

// required int32 poi_x = 11;
inline bool DebugInfo::has_poi_x() const {
  return _has_bit(10);
}
inline void DebugInfo::clear_poi_x() {
  poi_x_ = 0;
  _clear_bit(10);
}
inline ::google::protobuf::int32 DebugInfo::poi_x() const {
  return poi_x_;
}
inline void DebugInfo::set_poi_x(::google::protobuf::int32 value) {
  _set_bit(10);
  poi_x_ = value;
}

// required int32 poi_y = 12;
inline bool DebugInfo::has_poi_y() const {
  return _has_bit(11);
}
inline void DebugInfo::clear_poi_y() {
  poi_y_ = 0;
  _clear_bit(11);
}
inline ::google::protobuf::int32 DebugInfo::poi_y() const {
  return poi_y_;
}
inline void DebugInfo::set_poi_y(::google::protobuf::int32 value) {
  _set_bit(11);
  poi_y_ = value;
}

// required int32 grade = 13;
inline bool DebugInfo::has_grade() const {
  return _has_bit(12);
}
inline void DebugInfo::clear_grade() {
  grade_ = 0;
  _clear_bit(12);
}
inline ::google::protobuf::int32 DebugInfo::grade() const {
  return grade_;
}
inline void DebugInfo::set_grade(::google::protobuf::int32 value) {
  _set_bit(12);
  grade_ = value;
}

// required uint32 comment = 14;
inline bool DebugInfo::has_comment() const {
  return _has_bit(13);
}
inline void DebugInfo::clear_comment() {
  comment_ = 0u;
  _clear_bit(13);
}
inline ::google::protobuf::uint32 DebugInfo::comment() const {
  return comment_;
}
inline void DebugInfo::set_comment(::google::protobuf::uint32 value) {
  _set_bit(13);
  comment_ = value;
}

// required bool is_valid = 15;
inline bool DebugInfo::has_is_valid() const {
  return _has_bit(14);
}
inline void DebugInfo::clear_is_valid() {
  is_valid_ = false;
  _clear_bit(14);
}
inline bool DebugInfo::is_valid() const {
  return is_valid_;
}
inline void DebugInfo::set_is_valid(bool value) {
  _set_bit(14);
  is_valid_ = value;
}

// required bool is_current_level = 16;
inline bool DebugInfo::has_is_current_level() const {
  return _has_bit(15);
}
inline void DebugInfo::clear_is_current_level() {
  is_current_level_ = false;
  _clear_bit(15);
}
inline bool DebugInfo::is_current_level() const {
  return is_current_level_;
}
inline void DebugInfo::set_is_current_level(bool value) {
  _set_bit(15);
  is_current_level_ = value;
}

// required bool is_current_bound = 17;
inline bool DebugInfo::has_is_current_bound() const {
  return _has_bit(16);
}
inline void DebugInfo::clear_is_current_bound() {
  is_current_bound_ = false;
  _clear_bit(16);
}
inline bool DebugInfo::is_current_bound() const {
  return is_current_bound_;
}
inline void DebugInfo::set_is_current_bound(bool value) {
  _set_bit(16);
  is_current_bound_ = value;
}

// required int32 strategy = 18;
inline bool DebugInfo::has_strategy() const {
  return _has_bit(17);
}
inline void DebugInfo::clear_strategy() {
  strategy_ = 0;
  _clear_bit(17);
}
inline ::google::protobuf::int32 DebugInfo::strategy() const {
  return strategy_;
}
inline void DebugInfo::set_strategy(::google::protobuf::int32 value) {
  _set_bit(17);
  strategy_ = value;
}

// optional bytes tag2 = 19;
inline bool DebugInfo::has_tag2() const {
  return _has_bit(18);
}
inline void DebugInfo::clear_tag2() {
  if (tag2_ != &_default_tag2_) {
    tag2_->clear();
  }
  _clear_bit(18);
}
inline const ::std::string& DebugInfo::tag2() const {
  return *tag2_;
}
inline void DebugInfo::set_tag2(const ::std::string& value) {
  _set_bit(18);
  if (tag2_ == &_default_tag2_) {
    tag2_ = new ::std::string;
  }
  tag2_->assign(value);
}
inline void DebugInfo::set_tag2(const char* value) {
  _set_bit(18);
  if (tag2_ == &_default_tag2_) {
    tag2_ = new ::std::string;
  }
  tag2_->assign(value);
}
inline void DebugInfo::set_tag2(const void* value, size_t size) {
  _set_bit(18);
  if (tag2_ == &_default_tag2_) {
    tag2_ = new ::std::string;
  }
  tag2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugInfo::mutable_tag2() {
  _set_bit(18);
  if (tag2_ == &_default_tag2_) {
    tag2_ = new ::std::string;
  }
  return tag2_;
}

// optional int32 poi_hot = 20;
inline bool DebugInfo::has_poi_hot() const {
  return _has_bit(19);
}
inline void DebugInfo::clear_poi_hot() {
  poi_hot_ = 0;
  _clear_bit(19);
}
inline ::google::protobuf::int32 DebugInfo::poi_hot() const {
  return poi_hot_;
}
inline void DebugInfo::set_poi_hot(::google::protobuf::int32 value) {
  _set_bit(19);
  poi_hot_ = value;
}

// optional bytes geohash_str = 21;
inline bool DebugInfo::has_geohash_str() const {
  return _has_bit(20);
}
inline void DebugInfo::clear_geohash_str() {
  if (geohash_str_ != &_default_geohash_str_) {
    geohash_str_->clear();
  }
  _clear_bit(20);
}
inline const ::std::string& DebugInfo::geohash_str() const {
  return *geohash_str_;
}
inline void DebugInfo::set_geohash_str(const ::std::string& value) {
  _set_bit(20);
  if (geohash_str_ == &_default_geohash_str_) {
    geohash_str_ = new ::std::string;
  }
  geohash_str_->assign(value);
}
inline void DebugInfo::set_geohash_str(const char* value) {
  _set_bit(20);
  if (geohash_str_ == &_default_geohash_str_) {
    geohash_str_ = new ::std::string;
  }
  geohash_str_->assign(value);
}
inline void DebugInfo::set_geohash_str(const void* value, size_t size) {
  _set_bit(20);
  if (geohash_str_ == &_default_geohash_str_) {
    geohash_str_ = new ::std::string;
  }
  geohash_str_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DebugInfo::mutable_geohash_str() {
  _set_bit(20);
  if (geohash_str_ == &_default_geohash_str_) {
    geohash_str_ = new ::std::string;
  }
  return geohash_str_;
}

// -------------------------------------------------------------------

// DebugList

// repeated .bizus_basemap.DebugInfo debug_list = 1;
inline int DebugList::debug_list_size() const {
  return debug_list_.size();
}
inline void DebugList::clear_debug_list() {
  debug_list_.Clear();
}
inline const ::bizus_basemap::DebugInfo& DebugList::debug_list(int index) const {
  return debug_list_.Get(index);
}
inline ::bizus_basemap::DebugInfo* DebugList::mutable_debug_list(int index) {
  return debug_list_.Mutable(index);
}
inline ::bizus_basemap::DebugInfo* DebugList::add_debug_list() {
  return debug_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::bizus_basemap::DebugInfo >&
DebugList::debug_list() const {
  return debug_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::bizus_basemap::DebugInfo >*
DebugList::mutable_debug_list() {
  return &debug_list_;
}

// -------------------------------------------------------------------

// BasemapOpInfo

// optional bytes tag = 1;
inline bool BasemapOpInfo::has_tag() const {
  return _has_bit(0);
}
inline void BasemapOpInfo::clear_tag() {
  if (tag_ != &_default_tag_) {
    tag_->clear();
  }
  _clear_bit(0);
}
inline const ::std::string& BasemapOpInfo::tag() const {
  return *tag_;
}
inline void BasemapOpInfo::set_tag(const ::std::string& value) {
  _set_bit(0);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void BasemapOpInfo::set_tag(const char* value) {
  _set_bit(0);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(value);
}
inline void BasemapOpInfo::set_tag(const void* value, size_t size) {
  _set_bit(0);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  tag_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasemapOpInfo::mutable_tag() {
  _set_bit(0);
  if (tag_ == &_default_tag_) {
    tag_ = new ::std::string;
  }
  return tag_;
}

// optional int32 rank = 2;
inline bool BasemapOpInfo::has_rank() const {
  return _has_bit(1);
}
inline void BasemapOpInfo::clear_rank() {
  rank_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 BasemapOpInfo::rank() const {
  return rank_;
}
inline void BasemapOpInfo::set_rank(::google::protobuf::int32 value) {
  _set_bit(1);
  rank_ = value;
}

// optional int32 brand_id = 3;
inline bool BasemapOpInfo::has_brand_id() const {
  return _has_bit(2);
}
inline void BasemapOpInfo::clear_brand_id() {
  brand_id_ = 0;
  _clear_bit(2);
}
inline ::google::protobuf::int32 BasemapOpInfo::brand_id() const {
  return brand_id_;
}
inline void BasemapOpInfo::set_brand_id(::google::protobuf::int32 value) {
  _set_bit(2);
  brand_id_ = value;
}

// optional bool vip_flag = 4;
inline bool BasemapOpInfo::has_vip_flag() const {
  return _has_bit(3);
}
inline void BasemapOpInfo::clear_vip_flag() {
  vip_flag_ = false;
  _clear_bit(3);
}
inline bool BasemapOpInfo::vip_flag() const {
  return vip_flag_;
}
inline void BasemapOpInfo::set_vip_flag(bool value) {
  _set_bit(3);
  vip_flag_ = value;
}

// optional bytes character = 5;
inline bool BasemapOpInfo::has_character() const {
  return _has_bit(4);
}
inline void BasemapOpInfo::clear_character() {
  if (character_ != &_default_character_) {
    character_->clear();
  }
  _clear_bit(4);
}
inline const ::std::string& BasemapOpInfo::character() const {
  return *character_;
}
inline void BasemapOpInfo::set_character(const ::std::string& value) {
  _set_bit(4);
  if (character_ == &_default_character_) {
    character_ = new ::std::string;
  }
  character_->assign(value);
}
inline void BasemapOpInfo::set_character(const char* value) {
  _set_bit(4);
  if (character_ == &_default_character_) {
    character_ = new ::std::string;
  }
  character_->assign(value);
}
inline void BasemapOpInfo::set_character(const void* value, size_t size) {
  _set_bit(4);
  if (character_ == &_default_character_) {
    character_ = new ::std::string;
  }
  character_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BasemapOpInfo::mutable_character() {
  _set_bit(4);
  if (character_ == &_default_character_) {
    character_ = new ::std::string;
  }
  return character_;
}

// optional int32 from = 6;
inline bool BasemapOpInfo::has_from() const {
  return _has_bit(5);
}
inline void BasemapOpInfo::clear_from() {
  from_ = 0;
  _clear_bit(5);
}
inline ::google::protobuf::int32 BasemapOpInfo::from() const {
  return from_;
}
inline void BasemapOpInfo::set_from(::google::protobuf::int32 value) {
  _set_bit(5);
  from_ = value;
}

// optional int32 to = 7;
inline bool BasemapOpInfo::has_to() const {
  return _has_bit(6);
}
inline void BasemapOpInfo::clear_to() {
  to_ = 0;
  _clear_bit(6);
}
inline ::google::protobuf::int32 BasemapOpInfo::to() const {
  return to_;
}
inline void BasemapOpInfo::set_to(::google::protobuf::int32 value) {
  _set_bit(6);
  to_ = value;
}

// -------------------------------------------------------------------

// Response

// optional int32 status = 1;
inline bool Response::has_status() const {
  return _has_bit(0);
}
inline void Response::clear_status() {
  status_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 Response::status() const {
  return status_;
}
inline void Response::set_status(::google::protobuf::int32 value) {
  _set_bit(0);
  status_ = value;
}

// required .bizus_basemap.AdvRes ads = 2;
inline bool Response::has_ads() const {
  return _has_bit(1);
}
inline void Response::clear_ads() {
  if (ads_ != NULL) ads_->::bizus_basemap::AdvRes::Clear();
  _clear_bit(1);
}
inline const ::bizus_basemap::AdvRes& Response::ads() const {
  return ads_ != NULL ? *ads_ : *default_instance_->ads_;
}
inline ::bizus_basemap::AdvRes* Response::mutable_ads() {
  _set_bit(1);
  if (ads_ == NULL) ads_ = new ::bizus_basemap::AdvRes;
  return ads_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace bizus_basemap

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_bizus_5fbasemap_2eproto__INCLUDED
