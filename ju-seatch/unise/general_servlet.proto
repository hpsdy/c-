// define the general search request
// Author: wangguangyuan@baidu.com (Guangyuan Wang)

package unise;

import "topfeed.proto";

option cc_generic_services = true;

/// @brief 查询树节点类型
/// @note 在PHP中使用1,2,3,4，避免关键词冲突
enum QueryNodeType {
    VALUE = 1;                           ///< 代表叶子或值节点
    AND = 2;                             ///< 代表and逻辑节点
    OR = 3;                              ///< 代表or逻辑节点
    NOT = 4;                             ///< 代表not逻辑节点
    BRANCH = 5;                          ///< 代表一颗需要并行检索拉链的分支，只有第一层可以为BRANCH
    // for internal use
    LIST_VALUE = 100;
    ARRAY_VALUE = 101;
}

enum Status {
    kStatusOK    = 0; ///< 注意，默认生成的proto对象会是0
    kStatusRetry = 1;
    kStatusError = 2;
}

// 不再支持的方法
message NumberRange {
    required int64 min = 1;
    required int64 max = 2;
}

/// @brief: 查询树叶子节点，或称值节点
/// @note: 一个扇区可以包含多个annotation，在扇区中检索，可以避免使用OR节点连接很多annotation节点。
///        但是，建索引的时候，必须针对对应的扇区，建索引
message QueryNodeValue {
    optional string section_name = 1;     ///< 扇区名，如果指定且未指定annotation_name，在指定扇区中搜索
    optional string annotation_name = 2;  ///< 注释名，如果指定了，那就在指定注释中搜索
                                          ///< 如果上述2个字段都没有设置，错误，会默认构造空节点

    /// values, only one can be set
    optional bytes text_value = 3;          ///< 字符检索
    optional NumberRange number_value = 4;  ///< 废弃，目前在SearchParams中支持范围查询

    // other extension parameters
    optional uint32 weight = 5;              ///< 查询节点的权重，当父节点为BRANCH类型时，才生效
    optional uint32 match_type = 6;          ///< 框架未使用
    optional bool trans_conversion = 7 [default=false]; ///< 是否进行大小写转换,半角转全角,繁体转简体

    // extensions
    extensions 50 to 127;                   ///< 扩展字段
}

/// @brief 查询树节点
message QueryNode {
    required QueryNodeType type = 1;        ///< 节点类型
    optional QueryNodeValue value = 2;      ///< 如果为VALUE类型，那么需要设置叶子节点
    repeated QueryNode children = 3;        ///< 如果为and、or、not类型，那么需要设置孩子节点
}

/// @brief 实验参数
message Experiment {
    required string key = 1;                    ///< 检索插件通过key获取对应的value
    optional string value = 2;                  ///< value为string，因此，需要做反序列化可能
}

/// @brief 整数范围约束定义
message NumberSpec {
    // 我知道，可以使用uint64，但是会给编码造成很多意想不到的困难
    required int64 min = 1;     ///< 下限，包含min
    required int64 max = 2;     ///< 上限，包含max
}

/// @brief 范围约束定义
message RangeRestriction {
    required string annotation_name = 1;    ///< 范围约束的annotation name
    optional NumberSpec number_spec = 2;    ///< 目前只支持整数类型的范围
}

/// @brief 排序参数,支持对annotation的排序，设置该参数后，不再按照score排序
message SortParam {
    required string annotation_name = 1;    ///< annotation可以为text或number类型
    optional bool ascending = 2;            ///< 是否排升序，不设置，排升序
}

/// @brief 查询参数 无特殊需要，不用关注这个参数
message SearchParams {
    repeated Experiment experiments = 1;        ///< key-value形式的实验参数

    /// 下面参数控制检索行为
    /// 生效方式:首先不能超时，召回深度足够就停止检索，超过检索深度就停止
    optional int32 retrieve_timeout = 2;        ///< 倒排检索超时时间，该时间不小于整体检索时间
    optional int32 retrieve_depth   = 3;        ///< 满足查询条件的被从倒排中拉出来的最多doc数目
    optional int32 recall_docs      = 4;        ///< 经过cluster后，在final filter前
                                                ///< 满足条件的docs数目
    optional int32 exact_num_results = 5;       ///< 页面翻页可展现的最大结果数
    /// 范围过滤参数
    repeated RangeRestriction range_restrictions = 100;  ///< 范围检索使用，可以为多个
                                                         ///< 生效顺序不一定
    /// 排序参数
    repeated SortParam sort_params = 101; ///< 需要按照某字段排序使用，前面的优先级高

    extensions 1000 to 1999;                    ///< 用户扩展字段
}

/// @brief 查询请求
message GeneralSearchRequest {
    optional bytes query = 1;                   ///< minifrontend的查询语句，debug使用
    optional QueryNode query_tree = 2;          ///< 查询树，由UI负责构造，基本上必须填写
    optional SearchParams search_params = 3;    ///< 查询参数
    required int32 num_results = 4;             ///< 查询结果总数
    optional int32 start_result = 5;            ///< 从第几个结果开始，从1开始计数
    optional uint64 start_docid = 6;            ///< not used now, 从那个doc开始选
    optional uint64 session_id = 7;             ///< not used now，用户session id预留字段
    optional uint64 business_id = 8;            ///< not used now，业务id预留字段
    optional uint64 request_id = 9;             ///< 唯一代表一个请求的id,用于后期实现服务cancle
    optional uint64 sample_id = 10;             ///< 样本id，小流量实验配置的id，与插件的生效配置匹配
    optional bytes raw_query  = 11;             ///< 原始query

    optional TopfeedRequest topfeed = 12;
}

/// @brief 摘要
message Snippet {
    required bytes key = 1;           ///< key
    optional bytes value = 2;         ///< value
}

/// @brief 作为一种高效的中间数据传输
///        与Snippet的功能类似
message Value {
    required uint32 id           = 1; ///< 通常是annotation_id，也可以自定义
    optional string text_value   = 2; ///< string值
    optional uint64 number_value = 3; ///< 整数值
}

/// @brief 单个检索结果
message SearchResult {
    required uint64 docid           = 1;   ///< 唯一标示结果的docid
    required int64 score            = 2;   ///< 该doc的分数，结果顺序一般以分数排序
    repeated Snippet snippets       = 3;   ///< 该doc的相关摘要信息
    optional int32 levelid          = 4;   ///< 预留字段，如果赋值
                                           ///< 那么去重时，<docid,levelid>是唯一标识
    repeated Value values           = 5;   ///< annotation sort专用字段，请用户谨慎用
                                           ///< 在FinalResultFilter中被填充值，会首先
                                           ///< 清空之前的值

    extensions 1000 to 1999;               ///< 单个检索结果的扩展字段
}

/// @brief 插件结果，一开始的设计是为了debug使用
///        增加扩展字段，供扩展返回插件信息
message PluginResponse {
    required string name = 1;              ///< 插件名
    required bool enable = 2;              ///< 本debug信息是否生效
    required string information = 3;       ///< 信息
    optional string context_log = 4;       ///< 入参日志
    repeated Experiment trigger_type = 5;  ///< trigger_types.doc_id->strval

    extensions 100 to 199;                 ///< 扩展字段
}

/// @brief 来自一个EngineUnit结果汇总信息，用于SearchEngine汇总信息
message EngineUnitResponse {
    required string name = 1;                             ///< 来自的EngineUnit名称
    required string type = 2;                             ///< 来自的EngineUnit类型
    required int32 num_results = 3;                       ///< 返回多少个结果
    required int64 estimated_num_results = 4;             ///< 预计有多少结果
    required int64 docs_retrieved = 5;                    ///< 实际检索到多少结果
    required int32 search_time = 6;                       ///< 检索耗时
    repeated EngineUnitResponse engine_unit_responses= 7; ///< 如果当前EngineUnit为VEU
                                                          ///< 那么，会有孩子
    repeated PluginResponse plugin_responses = 8;         ///< 当前EU的插件结果
    required int64 docs_recalled = 9;                     ///< 实际召回了多少结果
}

/// @brief 检索结果,Unise与VEU与REU的返回值，都是该结构体
message GeneralSearchResponse {
    required Status status_code = 1;                      ///< 响应状态码
    required string status_msg = 2;                       ///< 响应状态消息，无错误时为空
    repeated SearchResult search_results = 3;             ///< 结果数组，数组大小就是结果个数
    optional string name = 4;                             ///< 该结果来自的EU的名称
    optional string type = 5;                             ///< 该结果来自的EU的类型
    optional int64 estimated_num_results = 6;             ///< 预估结果数，未实现
    optional int64 docs_retrieved = 7;                    ///< 实际遍历深度
    optional int32 search_time = 8;                       ///< 检索耗时
    repeated EngineUnitResponse engine_unit_responses= 9; ///< EU统计结果
    repeated PluginResponse plugin_responses = 10;        ///< 插件统计结果
    optional uint64 docs_recalled = 11;                   ///< 共召回多少个doc
    optional uint32 exact_num_results = 12;               ///< 精确结果数
    optional PluginResponse log_info = 13;                ///< 透传的日志信息
}

/// @brief unise提供的RPC服务
service UniseService {
    rpc Search(GeneralSearchRequest) returns (GeneralSearchResponse);
};
