# 传给 comlog 模块的 Configure 元组
[Log]
# 线上日志级别设置为 4，即最低到 NOTICE 级别
# 测试时日志级别设置为 16，即最低到 DEBUG 级别
level : 4
# 日志记录中的进程名，应用方请自行修改
procname : ju-search
# 自定义日志格式的原则：减少信息量少的字段，增加信息量多的字段，同时有一定可读性
# 以下修改主要参考 glog：
# 1. 去掉月-日中间的 - 号(-1)
# 2. 去掉日志级别和日期之间的空格(-1)
# 3. 在时间后面增加 ".毫秒"(+4)
# 4. 将进程名和线程号中间的 " * " 改为一个 "." (-2)
# 5. 自定义日志级别 INFO 仅用一个字符 I(-3)
time_format: "%m%d %H:%M:%S"
selfdefine: I
# 单行日志最大长度，线上可以设置为2048，线下或测试可以设置大点
log_length:1049000

# 所有需要程序自动处理分析(如MapRed)的关键业务日志，打印到自定义的I等级上，
# 独立一个文件可以减少无谓的数据传输和计算
[.@device]
type : FILE
path : ./log
file : ju-search.log
open : 1
syslevel: 0
selflevel: I
layout: "%L%Y.%U %P.%T %R"

# 其它所有日志，打印到同一个文件中，不再区分 wf 日志文件
[.@device]
type : FILE
path : ./log
file : ju-search.log.ex
open : 1
layout: "%L%Y.%U %P.%T %R"
split_type : 2
cuttime : 3600


[.@device]
type : TTY
path : ./log
file : client
open : 0

[RpcServer]
# ServerAddress : ip+port such as 12.10.192.10:220
ServerAddress : 0.0.0.0:5023
# 这里不再需要配置网络框架的worker线程数了，默认baidurpc跟CPU核数相同

# GlobalHandler可以不配置
[GlobalHandler]
plugin : ArticleGlobalHandler

# 检索引擎顶层，类似于AS
[SearchEngine]
# SearchEngine中HandlerNumber个数，请配置大于CPU核数
HandlerNumber : 16

# SearchHandler可以定制，一般没有特殊需求，请试用默认配置
# 一般用来处理检索多个EngineUnit的逻辑
[.@SearchHandler]
sample_id : 0
# plugin不可为空
plugin : DefaultSearchHandler

[.@SearchHandler]
sample_id : 1
plugin : DefaultSearchHandler

# 如果没有配置query rewriter，那么就不会做任何转换
# 如果希望具备默认的转换，那么至少需要配置一个EmptyQueryRewriter
[.@QueryRewriter]
sample_id : 0
# plugin不可为空
plugin : ArticleQueryRewriter
stopword_dict : stopword.dict

[.@QueryRewriter]
sample_id : 1
plugin : TopfeedQueryRewriter

# ResultAdapter用于最终结果调序
# 定制请参考并复制DefaultResultAdapter中的SortParams的实现，否则不具备SortParams功能
[.@ResultAdapter]
sample_id : 0
# plugin不可为空
plugin : DefaultResultAdapter

[.@ResultAdapter]
sample_id : 1
plugin : DefaultResultAdapter

# EngineUnit，存储引擎，类似BS
[.@EngineUnit]
# EngineUnitType只能为RealEngineUnit或VirtualEngineUnit
EngineUnitType : RealEngineUnit
EngineUnitName : EngineUnit1
# RetrievorNumber一般同HandlerNumber一致
RetrievorNumber : 32
# 目前建议使用程序启动时的相对路径
BaseDocPath : ./data/
BaseDocName : article.json
InfoFileName : ./data/base.n
IncDocPath : ./data/
IncDocNamePrefix : article_event.
AnnotationSchemaConfig : ./conf/annotation.schema
SearchContextFactory : ArticleSearchContextFactory

# 比较器，用于检索过程中
# 该配置项可以缺失，系统会采用DefaultComparator;但是如果配置，那么不能为空
# DefaultComparator支持根据score和docid排序，以及SortParams
[..@Comparator]
sample_id : 0
# plugin不可为空
plugin : "DefaultComparator"

[..@Comparator]
sample_id : 1
plugin : DefaultComparator

# 检索出一个MatchedDoc后第一个执行的过滤
[..@EarlyResultFilters]
sample_id : 0
# 使用逗号分隔多个ResultFilter，可以为空
plugin : ""

[..@EarlyResultFilters]
sample_id : 1
plugin : "TopfeedEarlyFilter"

# Scorer是打分器，用来给doc打分
[..@Scorers]
# sample_id等于0,或者没有找到对应的配置时，使用下面的插件
# sample_id可以为uint64
sample_id : 0
# 使用逗号分隔多个Scorers，可以为空
plugin : "ArticleScorer"

[..@Scorers]
sample_id : 1
plugin : "TopfeedScorer"

# Score之后的过滤器
[..@LaterResultFilters]
sample_id : 0
# 可以为空，使用英文逗号分隔不同的插件
plugin : ""

# LaterResultFilter之后，进行聚合逻辑，聚合逻辑一般来实现去重操作
[..@ResultClusters]
sample_id : 0
# 可以为空
plugin : ""

# Cluster之后的过滤插件，如果通过，那么doc根据排序将得到展现
[..@FinalResultFilters]
sample_id : 0
# 可以为空
plugin : ""

[..@FinalResultFilters]
sample_id : 1
plugin : "TopfeedFinalFilter"

# 填充插件，通过FinalResultFilters的doc会被填充数据
[..@ResultFiller]
sample_id : 0
# 必有且只能有一个
plugin : "ArticleFiller"

[..@ResultFiller]
sample_id : 1
plugin : TopfeedFiller

# DimensionDoc配置信息，id号推荐从0开始递增，可用范围为int32
[..@DimensionDoc]
Id : 1
DimensionName : ArticleDoc
DocFactory : ArticleDocFactory
# 声明当前DimensionDoc是FactDoc
IsFactDoc : true
